

7B22  C_nfa: defb 0x01+0x80,"C"+0x80
; [DASMZ80] C_nfa: start 0x7B22 end 0x7B24 type bytedata
7B24  C_lfa: defw TILL_nfa
; [DASMZ80] C_lfa: start 0x7B24 end 0x7B26 type pointers
7B26  C_cfa: defw 0x6306
; [DASMZ80] C_cfa: start 0x7B26 end 0x7B28 type pointers
7B28  C_pfa: 
7B28 defw 1_cfa
7B2A defw TEXT_cfa
7B2C defw PAD_cfa
7B2E defw COUNT_cfa
7B30 defw #LAG_cfa
7B32 defw ROT_cfa
7B34 defw OVER_cfa
7B36 defw MIN_cfa
7B38 defw >R_cfa
7B3A defw R_cfa
7B3C defw R#_cfa
7B3E defw +!_cfa
7B40 defw R_cfa
7B42 defw -_cfa
7B44 defw >R_cfa
7B46 defw DUP_cfa
7B48 defw HERE_cfa
7B4A defw R_cfa
7B4C defw CMOVE_cfa
7B4E defw HERE_cfa
7B50 defw #LEAD_cfa
7B52 defw +_cfa
7B54 defw R>_cfa
7B56 defw CMOVE_cfa
7B58 defw R>_cfa
7B5A defw CMOVE_cfa
7B5C defw UPDATE_cfa
7B5E defw 0_cfa
7B60 defw M_cfa
7B62 defw ;S_cfa
; [DASMZ80] C_pfa: start 0x7B28 end 0x7B64 type pointers

7AF9  TILL_nfa: defb 0x04+0x80,"TIL","L"+0x80
; [DASMZ80] TILL_nfa: start 0x7AF9 end 0x7AFE type bytedata
7AFE  TILL_lfa: defw X_nfa
; [DASMZ80] TILL_lfa: start 0x7AFE end 0x7B00 type pointers
7B00  TILL_cfa: defw 0x6306
; [DASMZ80] TILL_cfa: start 0x7B00 end 0x7B02 type pointers
7B02  TILL_pfa: 
7B02 defw #LEAD_cfa
7B04 defw +_cfa
7B06 defw 1_cfa
7B08 defw TEXT_cfa
7B0A defw 1LINE_cfa
7B0C defw 0=_cfa
7B0E defw 0_cfa
7B10 defw ?ERROR_cfa
7B12 defw #LEAD_cfa
7B14 defw +_cfa
7B16 defw SWAP_cfa
7B18 defw -_cfa
7B1A defw DELETE_cfa
7B1C defw 0_cfa
7B1E defw M_cfa
7B20 defw ;S_cfa
; [DASMZ80] TILL_pfa: start 0x7B02 end 0x7B22 type pointers

7AE1  X_nfa: defb 0x01+0x80,"X"+0x80
; [DASMZ80] X_nfa: start 0x7AE1 end 0x7AE3 type bytedata
7AE3  X_lfa: defw B_nfa
; [DASMZ80] X_lfa: start 0x7AE3 end 0x7AE5 type pointers
7AE5  X_cfa: defw 0x6306
; [DASMZ80] X_cfa: start 0x7AE5 end 0x7AE7 type pointers
7AE7  X_pfa: 
7AE7 defw 1_cfa
7AE9 defw TEXT_cfa
7AEB defw FIND_cfa
7AED defw PAD_cfa
7AEF defw C@_cfa
7AF1 defw DELETE_cfa
7AF3 defw 0_cfa
7AF5 defw M_cfa
7AF7 defw ;S_cfa
; [DASMZ80] X_pfa: start 0x7AE7 end 0x7AF9 type pointers

7AD1  B_nfa: defb 0x01+0x80,"B"+0x80
; [DASMZ80] B_nfa: start 0x7AD1 end 0x7AD3 type bytedata
7AD3  B_lfa: defw F_nfa
; [DASMZ80] B_lfa: start 0x7AD3 end 0x7AD5 type pointers
7AD5  B_cfa: defw 0x6306
; [DASMZ80] B_cfa: start 0x7AD5 end 0x7AD7 type pointers
7AD7  B_pfa: 
7AD7 defw PAD_cfa
7AD9 defw C@_cfa
7ADB defw MINUS_cfa
7ADD defw M_cfa
7ADF defw ;S_cfa
; [DASMZ80] B_pfa: start 0x7AD7 end 0x7AE1 type pointers

7AC3  F_nfa: defb 0x01+0x80,"F"+0x80
; [DASMZ80] F_nfa: start 0x7AC3 end 0x7AC5 type bytedata
7AC5  F_lfa: defw N_nfa
; [DASMZ80] F_lfa: start 0x7AC5 end 0x7AC7 type pointers
7AC7  F_cfa: defw 0x6306
; [DASMZ80] F_cfa: start 0x7AC7 end 0x7AC9 type pointers
7AC9  F_pfa: 
7AC9 defw 1_cfa
7ACB defw TEXT_cfa
7ACD defw N_cfa
7ACF defw ;S_cfa
; [DASMZ80] F_pfa: start 0x7AC9 end 0x7AD1 type pointers

7AB5  N_nfa: defb 0x01+0x80,"N"+0x80
; [DASMZ80] N_nfa: start 0x7AB5 end 0x7AB7 type bytedata
7AB7  N_lfa: defw DELETE_nfa
; [DASMZ80] N_lfa: start 0x7AB7 end 0x7AB9 type pointers
7AB9  N_cfa: defw 0x6306
; [DASMZ80] N_cfa: start 0x7AB9 end 0x7ABB type pointers
7ABB  N_pfa: 
7ABB defw FIND_cfa
7ABD defw 0_cfa
7ABF defw M_cfa
7AC1 defw ;S_cfa
; [DASMZ80] N_pfa: start 0x7ABB end 0x7AC3 type pointers

7A86  DELETE_nfa: defb 0x06+0x80,"DELET","E"+0x80
; [DASMZ80] DELETE_nfa: start 0x7A86 end 0x7A8D type bytedata
7A8D  DELETE_lfa: defw FIND_nfa
; [DASMZ80] DELETE_lfa: start 0x7A8D end 0x7A8F type pointers
7A8F  DELETE_cfa: defw 0x6306
; [DASMZ80] DELETE_cfa: start 0x7A8F end 0x7A91 type pointers
7A91  DELETE_pfa: 
7A91 defw >R_cfa
7A93 defw #LAG_cfa
7A95 defw +_cfa
7A97 defw R_cfa
7A99 defw -_cfa
7A9B defw #LAG_cfa
7A9D defw R_cfa
7A9F defw MINUS_cfa
7AA1 defw R#_cfa
7AA3 defw +!_cfa
7AA5 defw #LEAD_cfa
7AA7 defw +_cfa
7AA9 defw SWAP_cfa
7AAB defw CMOVE_cfa
7AAD defw R>_cfa
7AAF defw BLANKS_cfa
7AB1 defw UPDATE_cfa
7AB3 defw ;S_cfa
; [DASMZ80] DELETE_pfa: start 0x7A91 end 0x7AB5 type pointers

7A57  FIND_nfa: defb 0x04+0x80,"FIN","D"+0x80
; [DASMZ80] FIND_nfa: start 0x7A57 end 0x7A5C type bytedata
7A5C  FIND_lfa: defw 1LINE_nfa
; [DASMZ80] FIND_lfa: start 0x7A5C end 0x7A5E type pointers
7A5E  FIND_cfa: defw 0x6306
; [DASMZ80] FIND_cfa: start 0x7A5E end 0x7A60 type pointers
7A60  FIND_pfa: 
7A60 defw LIT_cfa,0x03FF
7A64 defw R#_cfa
7A66 defw @_cfa
7A68 defw <_cfa
7A6A defw 0BRANCH_cfa,0x0012; to 0x7A7E
7A6E defw TOP_cfa
7A70 defw PAD_cfa
7A72 defw HERE_cfa
7A74 defw C/L_cfa
7A76 defw 1+_cfa
7A78 defw CMOVE_cfa
7A7A defw 0_cfa
7A7C defw ERROR_cfa
7A7E defw 1LINE_cfa
7A80 defw 0BRANCH_cfa,0xFFDE; to 0x7A60
7A84 defw ;S_cfa
; [DASMZ80] FIND_pfa: start 0x7A60 end 0x7A86 type pointers

7A3F  1LINE_nfa: defb 0x05+0x80,"1LIN","E"+0x80
; [DASMZ80] 1LINE_nfa: start 0x7A3F end 0x7A45 type bytedata
7A45  1LINE_lfa: defw MATCH_nfa
; [DASMZ80] 1LINE_lfa: start 0x7A45 end 0x7A47 type pointers
7A47  1LINE_cfa: defw 0x6306
; [DASMZ80] 1LINE_cfa: start 0x7A47 end 0x7A49 type pointers
7A49  1LINE_pfa: 
7A49 defw #LAG_cfa
7A4B defw PAD_cfa
7A4D defw COUNT_cfa
7A4F defw MATCH_cfa
7A51 defw R#_cfa
7A53 defw +!_cfa
7A55 defw ;S_cfa
; [DASMZ80] 1LINE_pfa: start 0x7A49 end 0x7A57 type pointers

79F1  MATCH_nfa: defb 0x05+0x80,"MATC","H"+0x80
; [DASMZ80] MATCH_nfa: start 0x79F1 end 0x79F7 type bytedata
79F7  MATCH_lfa: defw -TEXT_nfa
; [DASMZ80] MATCH_lfa: start 0x79F7 end 0x79F9 type pointers
79F9  MATCH_cfa: defw 0x6306
; [DASMZ80] MATCH_cfa: start 0x79F9 end 0x79FB type pointers
79FB  MATCH_pfa: 
79FB defw >R_cfa
79FD defw >R_cfa
79FF defw 2DUP_cfa
7A01 defw R>_cfa
7A03 defw R>_cfa
7A05 defw 2SWAP_cfa
7A07 defw OVER_cfa
7A09 defw +_cfa
7A0B defw SWAP_cfa
7A0D defw (DO)_cfa
7A0F defw 2DUP_cfa
7A11 defw I_cfa
7A13 defw -TEXT_cfa
7A15 defw 0BRANCH_cfa,0x001A; to 0x7A31
7A19 defw >R_cfa
7A1B defw 2DROP_cfa
7A1D defw R>_cfa
7A1F defw -_cfa
7A21 defw I_cfa
7A23 defw SWAP_cfa
7A25 defw -_cfa
7A27 defw 0_cfa
7A29 defw SWAP_cfa
7A2B defw 0_cfa
7A2D defw 0_cfa
7A2F defw LEAVE_cfa
7A31 defw (LOOP)_cfa,0xFFDC; to 0x7A0F
7A35 defw 2DROP_cfa
7A37 defw SWAP_cfa
7A39 defw 0=_cfa
7A3B defw SWAP_cfa
7A3D defw ;S_cfa
; [DASMZ80] MATCH_pfa: start 0x79FB end 0x7A3F type pointers

79B1  -TEXT_nfa: defb 0x05+0x80,"-TEX","T"+0x80
; [DASMZ80] -TEXT_nfa: start 0x79B1 end 0x79B7 type bytedata
79B7  -TEXT_lfa: defw COPY_nfa
; [DASMZ80] -TEXT_lfa: start 0x79B7 end 0x79B9 type pointers
79B9  -TEXT_cfa: defw 0x6306
; [DASMZ80] -TEXT_cfa: start 0x79B9 end 0x79BB type pointers
79BB  -TEXT_pfa: 
79BB defw SWAP_cfa
79BD defw -DUP_cfa
79BF defw 0BRANCH_cfa,0x002A; to 0x79EB
79C3 defw OVER_cfa
79C5 defw +_cfa
79C7 defw SWAP_cfa
79C9 defw (DO)_cfa
79CB defw DUP_cfa
79CD defw C@_cfa
79CF defw I_cfa
79D1 defw C@_cfa
79D3 defw -_cfa
79D5 defw 0BRANCH_cfa,0x000A; to 0x79E1
79D9 defw 0=_cfa
79DB defw LEAVE_cfa
79DD defw BRANCH_cfa,0x0004; to 0x79E3
79E1 defw 1+_cfa
79E3 defw (LOOP)_cfa,0xFFE6; to 0x79CB
79E7 defw BRANCH_cfa,0x0006; to 0x79EF
79EB defw DROP_cfa
79ED defw 0=_cfa
79EF defw ;S_cfa
; [DASMZ80] -TEXT_pfa: start 0x79BB end 0x79F1 type pointers

7974  COPY_nfa: defb 0x04+0x80,"COP","Y"+0x80
; [DASMZ80] COPY_nfa: start 0x7974 end 0x7979 type bytedata
7979  COPY_lfa: defw CLEAR_nfa
; [DASMZ80] COPY_lfa: start 0x7979 end 0x797B type pointers
797B  COPY_cfa: defw 0x6306
; [DASMZ80] COPY_cfa: start 0x797B end 0x797D type pointers
797D  COPY_pfa: 
797D defw B/SCR_cfa
797F defw *_cfa
7981 defw OFFSET_cfa
7983 defw @_cfa
7985 defw +_cfa
7987 defw SWAP_cfa
7989 defw B/SCR_cfa
798B defw *_cfa
798D defw B/SCR_cfa
798F defw OVER_cfa
7991 defw +_cfa
7993 defw SWAP_cfa
7995 defw (DO)_cfa
7997 defw DUP_cfa
7999 defw I_cfa
799B defw BLOCK_cfa
799D defw 2_cfa
799F defw -_cfa
79A1 defw !_cfa
79A3 defw 1+_cfa
79A5 defw UPDATE_cfa
79A7 defw (LOOP)_cfa,0xFFEE; to 0x7997
79AB defw DROP_cfa
79AD defw FLUSH_cfa
79AF defw ;S_cfa
; [DASMZ80] COPY_pfa: start 0x797D end 0x79B1 type pointers

7954  CLEAR_nfa: defb 0x05+0x80,"CLEA","R"+0x80
; [DASMZ80] CLEAR_nfa: start 0x7954 end 0x795A type bytedata
795A  CLEAR_lfa: defw TOP_nfa
; [DASMZ80] CLEAR_lfa: start 0x795A end 0x795C type pointers
795C  CLEAR_cfa: defw 0x6306
; [DASMZ80] CLEAR_cfa: start 0x795C end 0x795E type pointers
795E  CLEAR_pfa: 
795E defw SCR_cfa
7960 defw !_cfa
7962 defw LIT_cfa,0x0010
7966 defw 0_cfa
7968 defw (DO)_cfa
796A defw I_cfa
796C defw E_cfa
796E defw (LOOP)_cfa,0xFFFA; to 0x796A
7972 defw ;S_cfa
; [DASMZ80] CLEAR_pfa: start 0x795E end 0x7974 type pointers

7944  TOP_nfa: defb 0x03+0x80,"TO","P"+0x80
; [DASMZ80] TOP_nfa: start 0x7944 end 0x7948 type bytedata
7948  TOP_lfa: defw I_nfa
; [DASMZ80] TOP_lfa: start 0x7948 end 0x794A type pointers
794A  TOP_cfa: defw 0x6306
; [DASMZ80] TOP_cfa: start 0x794A end 0x794C type pointers
794C  TOP_pfa: 
794C defw 0_cfa
794E defw R#_cfa
7950 defw !_cfa
7952 defw ;S_cfa
; [DASMZ80] TOP_pfa: start 0x794C end 0x7954 type pointers

7936  I_nfa: defb 0x01+0x80,"I"+0x80
; [DASMZ80] I_nfa: start 0x7936 end 0x7938 type bytedata
7938  I_lfa: defw P_nfa
; [DASMZ80] I_lfa: start 0x7938 end 0x793A type pointers
793A  I_cfa: defw 0x6306
; [DASMZ80] I_cfa: start 0x793A end 0x793C type pointers
793C  I_pfa: 
793C defw DUP_cfa
793E defw S_cfa
7940 defw R_cfa
7942 defw ;S_cfa
; [DASMZ80] I_pfa: start 0x793C end 0x7944 type pointers

7928  P_nfa: defb 0x01+0x80,"P"+0x80
; [DASMZ80] P_nfa: start 0x7928 end 0x792A type bytedata
792A  P_lfa: defw R_nfa
; [DASMZ80] P_lfa: start 0x792A end 0x792C type pointers
792C  P_cfa: defw 0x6306
; [DASMZ80] P_cfa: start 0x792C end 0x792E type pointers
792E  P_pfa: 
792E defw 1_cfa
7930 defw TEXT_cfa
7932 defw R_cfa
7934 defw ;S_cfa
; [DASMZ80] P_pfa: start 0x792E end 0x7936 type pointers

7918  R_nfa: defb 0x01+0x80,"R"+0x80
; [DASMZ80] R_nfa: start 0x7918 end 0x791A type bytedata
791A  R_lfa: defw L_nfa
; [DASMZ80] R_lfa: start 0x791A end 0x791C type pointers
791C  R_cfa: defw 0x6306
; [DASMZ80] R_cfa: start 0x791C end 0x791E type pointers
791E  R_pfa: 
791E defw PAD_cfa
7920 defw 1+_cfa
7922 defw SWAP_cfa
7924 defw -MOVE_cfa
7926 defw ;S_cfa
; [DASMZ80] R_pfa: start 0x791E end 0x7928 type pointers

7906  L_nfa: defb 0x01+0x80,"L"+0x80
; [DASMZ80] L_nfa: start 0x7906 end 0x7908 type bytedata
7908  L_lfa: defw T_nfa
; [DASMZ80] L_lfa: start 0x7908 end 0x790A type pointers
790A  L_cfa: defw 0x6306
; [DASMZ80] L_cfa: start 0x790A end 0x790C type pointers
790C  L_pfa: 
790C defw SCR_cfa
790E defw @_cfa
7910 defw LIST_cfa
7912 defw 0_cfa
7914 defw M_cfa
7916 defw ;S_cfa
; [DASMZ80] L_pfa: start 0x790C end 0x7918 type pointers

78EC  T_nfa: defb 0x01+0x80,"T"+0x80
; [DASMZ80] T_nfa: start 0x78EC end 0x78EE type bytedata
78EE  T_lfa: defw M_nfa
; [DASMZ80] T_lfa: start 0x78EE end 0x78F0 type pointers
78F0  T_cfa: defw 0x6306
; [DASMZ80] T_cfa: start 0x78F0 end 0x78F2 type pointers
78F2  T_pfa: 
78F2 defw DUP_cfa
78F4 defw C/L_cfa
78F6 defw *_cfa
78F8 defw R#_cfa
78FA defw !_cfa
78FC defw DUP_cfa
78FE defw H_cfa
7900 defw 0_cfa
7902 defw M_cfa
7904 defw ;S_cfa
; [DASMZ80] T_pfa: start 0x78F2 end 0x7906 type pointers

78C8  M_nfa: defb 0x01+0x80,"M"+0x80
; [DASMZ80] M_nfa: start 0x78C8 end 0x78CA type bytedata
78CA  M_lfa: defw D_nfa
; [DASMZ80] M_lfa: start 0x78CA end 0x78CC type pointers
78CC  M_cfa: defw 0x6306
; [DASMZ80] M_cfa: start 0x78CC end 0x78CE type pointers
78CE  M_pfa: 
78CE defw R#_cfa
78D0 defw +!_cfa
78D2 defw CR_cfa
78D4 defw SPACE_cfa
78D6 defw #LEAD_cfa
78D8 defw TYPE_cfa
78DA defw LIT_cfa,0x005F
78DE defw EMIT_cfa
78E0 defw #LAG_cfa
78E2 defw TYPE_cfa
78E4 defw #LOCATE_cfa
78E6 defw ._cfa
78E8 defw DROP_cfa
78EA defw ;S_cfa
; [DASMZ80] M_pfa: start 0x78CE end 0x78EC type pointers

78A2  D_nfa: defb 0x01+0x80,"D"+0x80
; [DASMZ80] D_nfa: start 0x78A2 end 0x78A4 type bytedata
78A4  D_lfa: defw S_nfa
; [DASMZ80] D_lfa: start 0x78A4 end 0x78A6 type pointers
78A6  D_cfa: defw 0x6306
; [DASMZ80] D_cfa: start 0x78A6 end 0x78A8 type pointers
78A8  D_pfa: 
78A8 defw DUP_cfa
78AA defw H_cfa
78AC defw LIT_cfa,0x000F
78B0 defw DUP_cfa
78B2 defw ROT_cfa
78B4 defw (DO)_cfa
78B6 defw I_cfa
78B8 defw 1+_cfa
78BA defw LINE_cfa
78BC defw I_cfa
78BE defw -MOVE_cfa
78C0 defw (LOOP)_cfa,0xFFF4; to 0x78B6
78C4 defw E_cfa
78C6 defw ;S_cfa
; [DASMZ80] D_pfa: start 0x78A8 end 0x78C8 type pointers

787A  S_nfa: defb 0x01+0x80,"S"+0x80
; [DASMZ80] S_nfa: start 0x787A end 0x787C type bytedata
787C  S_lfa: defw E_nfa
; [DASMZ80] S_lfa: start 0x787C end 0x787E type pointers
787E  S_cfa: defw 0x6306
; [DASMZ80] S_cfa: start 0x787E end 0x7880 type pointers
7880  S_pfa: 
7880 defw DUP_cfa
7882 defw 1_cfa
7884 defw -_cfa
7886 defw LIT_cfa,0x000E
788A defw (DO)_cfa
788C defw I_cfa
788E defw LINE_cfa
7890 defw I_cfa
7892 defw 1+_cfa
7894 defw -MOVE_cfa
7896 defw LIT_cfa,0xFFFF
789A defw (+LOOP)_cfa,0xFFF0; to 0x788C
789E defw E_cfa
78A0 defw ;S_cfa
; [DASMZ80] S_pfa: start 0x7880 end 0x78A2 type pointers

786A  E_nfa: defb 0x01+0x80,"E"+0x80
; [DASMZ80] E_nfa: start 0x786A end 0x786C type bytedata
786C  E_lfa: defw H_nfa
; [DASMZ80] E_lfa: start 0x786C end 0x786E type pointers
786E  E_cfa: defw 0x6306
; [DASMZ80] E_cfa: start 0x786E end 0x7870 type pointers
7870  E_pfa: 
7870 defw LINE_cfa
7872 defw C/L_cfa
7874 defw BLANKS_cfa
7876 defw UPDATE_cfa
7878 defw ;S_cfa
; [DASMZ80] E_pfa: start 0x7870 end 0x787A type pointers

7852  H_nfa: defb 0x01+0x80,"H"+0x80
; [DASMZ80] H_nfa: start 0x7852 end 0x7854 type bytedata
7854  H_lfa: defw -MOVE_nfa
; [DASMZ80] H_lfa: start 0x7854 end 0x7856 type pointers
7856  H_cfa: defw 0x6306
; [DASMZ80] H_cfa: start 0x7856 end 0x7858 type pointers
7858  H_pfa: 
7858 defw LINE_cfa
785A defw PAD_cfa
785C defw 1+_cfa
785E defw C/L_cfa
7860 defw DUP_cfa
7862 defw PAD_cfa
7864 defw C!_cfa
7866 defw CMOVE_cfa
7868 defw ;S_cfa
; [DASMZ80] H_pfa: start 0x7858 end 0x786A type pointers

783E  -MOVE_nfa: defb 0x05+0x80,"-MOV","E"+0x80
; [DASMZ80] -MOVE_nfa: start 0x783E end 0x7844 type bytedata
7844  -MOVE_lfa: defw #LAG_nfa
; [DASMZ80] -MOVE_lfa: start 0x7844 end 0x7846 type pointers
7846  -MOVE_cfa: defw 0x6306
; [DASMZ80] -MOVE_cfa: start 0x7846 end 0x7848 type pointers
7848  -MOVE_pfa: 
7848 defw LINE_cfa
784A defw C/L_cfa
784C defw CMOVE_cfa
784E defw UPDATE_cfa
7850 defw ;S_cfa
; [DASMZ80] -MOVE_pfa: start 0x7848 end 0x7852 type pointers

7825  #LAG_nfa: defb 0x04+0x80,"#LA","G"+0x80
; [DASMZ80] #LAG_nfa: start 0x7825 end 0x782A type bytedata
782A  #LAG_lfa: defw #LEAD_nfa
; [DASMZ80] #LAG_lfa: start 0x782A end 0x782C type pointers
782C  #LAG_cfa: defw 0x6306
; [DASMZ80] #LAG_cfa: start 0x782C end 0x782E type pointers
782E  #LAG_pfa: 
782E defw #LEAD_cfa
7830 defw DUP_cfa
7832 defw >R_cfa
7834 defw +_cfa
7836 defw C/L_cfa
7838 defw R>_cfa
783A defw -_cfa
783C defw ;S_cfa
; [DASMZ80] #LAG_pfa: start 0x782E end 0x783E type pointers

7813  #LEAD_nfa: defb 0x05+0x80,"#LEA","D"+0x80
; [DASMZ80] #LEAD_nfa: start 0x7813 end 0x7819 type bytedata
7819  #LEAD_lfa: defw #LOCATE_nfa
; [DASMZ80] #LEAD_lfa: start 0x7819 end 0x781B type pointers
781B  #LEAD_cfa: defw 0x6306
; [DASMZ80] #LEAD_cfa: start 0x781B end 0x781D type pointers
781D  #LEAD_pfa: 
781D defw #LOCATE_cfa
781F defw LINE_cfa
7821 defw SWAP_cfa
7823 defw ;S_cfa
; [DASMZ80] #LEAD_pfa: start 0x781D end 0x7825 type pointers

77FD  #LOCATE_nfa: defb 0x07+0x80,"#LOCAT","E"+0x80
; [DASMZ80] #LOCATE_nfa: start 0x77FD end 0x7805 type bytedata
7805  #LOCATE_lfa: defw  _nfa
; [DASMZ80] #LOCATE_lfa: start 0x7805 end 0x7807 type pointers
7807  #LOCATE_cfa: defw 0x6306
; [DASMZ80] #LOCATE_cfa: start 0x7807 end 0x7809 type pointers
7809  #LOCATE_pfa: 
7809 defw R#_cfa
780B defw @_cfa
780D defw C/L_cfa
780F defw /MOD_cfa
7811 defw ;S_cfa
; [DASMZ80] #LOCATE_pfa: start 0x7809 end 0x7813 type pointers

6CF6   _nfa: defb 0x01+0x80," "+0x80
; [DASMZ80]  _nfa: start 0x6CF6 end 0x6CF8 type bytedata
6CF8   _lfa: defw DIS-ALL_nfa
; [DASMZ80]  _lfa: start 0x6CF8 end 0x6CFA type pointers
6CFA   _cfa: defw 0x0000
; [DASMZ80]  _cfa: start 0x6CFA end 0x6CFC type pointers
6CFC   _pfa: ; Word type not implemented.

9DAF  DIS-ALL_nfa: defb 0x07+0x80,"DIS-AL","L"+0x80
; [DASMZ80] DIS-ALL_nfa: start 0x9DAF end 0x9DB7 type bytedata
9DB7  DIS-ALL_lfa: defw DIS-FROM_nfa
; [DASMZ80] DIS-ALL_lfa: start 0x9DB7 end 0x9DB9 type pointers
9DB9  DIS-ALL_cfa: defw 0x6306
; [DASMZ80] DIS-ALL_cfa: start 0x9DB9 end 0x9DBB type pointers
9DBB  DIS-ALL_pfa: 
9DBB defw CONTEXT_cfa
9DBD defw @_cfa
9DBF defw @_cfa
9DC1 defw DIS-FROM_cfa
9DC3 defw ;S_cfa
; [DASMZ80] DIS-ALL_pfa: start 0x9DBB end 0x9DC5 type pointers

9D88  DIS-FROM_nfa: defb 0x08+0x80,"DIS-FRO","M"+0x80
; [DASMZ80] DIS-FROM_nfa: start 0x9D88 end 0x9D91 type bytedata
9D91  DIS-FROM_lfa: defw DIS_nfa
; [DASMZ80] DIS-FROM_lfa: start 0x9D91 end 0x9D93 type pointers
9D93  DIS-FROM_cfa: defw 0x6306
; [DASMZ80] DIS-FROM_cfa: start 0x9D93 end 0x9D95 type pointers
9D95  DIS-FROM_pfa: 
9D95 defw PFA_cfa
9D97 defw DUP_cfa
9D99 defw DIS_cfa
9D9B defw LFA_cfa
9D9D defw @_cfa
9D9F defw DUP_cfa
9DA1 defw 0=_cfa
9DA3 defw ?TERMINAL_cfa
9DA5 defw OR_cfa
9DA7 defw 0BRANCH_cfa,0xFFEC; to 0x9D95
9DAB defw DROP_cfa
9DAD defw ;S_cfa
; [DASMZ80] DIS-FROM_pfa: start 0x9D95 end 0x9DAF type pointers

9D11  DIS_nfa: defb 0x03+0x80,"DI","S"+0x80
; [DASMZ80] DIS_nfa: start 0x9D11 end 0x9D15 type bytedata
9D15  DIS_lfa: defw HEADER_nfa
; [DASMZ80] DIS_lfa: start 0x9D15 end 0x9D17 type pointers
9D17  DIS_cfa: defw 0x6306
; [DASMZ80] DIS_cfa: start 0x9D17 end 0x9D19 type pointers
9D19  DIS_pfa: 
9D19 defw DUP_cfa
9D1B defw HEADER_cfa
9D1D defw DUP_cfa
9D1F defw COLON?_cfa
9D21 defw 0BRANCH_cfa,0x0006; to 0x9D29
9D25 defw DIS-COLON_cfa
9D27 defw EXIT_cfa
9D29 defw DUP_cfa
9D2B defw CONSTANT?_cfa
9D2D defw 0BRANCH_cfa,0x0006; to 0x9D35
9D31 defw DIS-VALUE_cfa
9D33 defw EXIT_cfa
9D35 defw DUP_cfa
9D37 defw VARIABLE?_cfa
9D39 defw 0BRANCH_cfa,0x0006; to 0x9D41
9D3D defw DIS-VALUE_cfa
9D3F defw EXIT_cfa
9D41 defw DUP_cfa
9D43 defw 2CONSTANT?_cfa
9D45 defw 0BRANCH_cfa,0x0006; to 0x9D4D
9D49 defw DIS-2VALUE_cfa
9D4B defw EXIT_cfa
9D4D defw DUP_cfa
9D4F defw 2VARIABLE?_cfa
9D51 defw 0BRANCH_cfa,0x0006; to 0x9D59
9D55 defw DIS-2VALUE_cfa
9D57 defw EXIT_cfa
9D59 defw DUP_cfa
9D5B defw USER?_cfa
9D5D defw 0BRANCH_cfa,0x0006; to 0x9D65
9D61 defw DIS-VALUE_cfa
9D63 defw EXIT_cfa
9D65 defw DROP_cfa
9D67 defw (.")_cfa
9D69 defb 0x1C,"; Word type not implemented."
9D86 defw ;S_cfa
; [DASMZ80] DIS_pfa: start 0x9D19 end 0x9D88 type pointers

9CF4  HEADER_nfa: defb 0x06+0x80,"HEADE","R"+0x80
; [DASMZ80] HEADER_nfa: start 0x9CF4 end 0x9CFB type bytedata
9CFB  HEADER_lfa: defw PARAMETER-FIELD_nfa
; [DASMZ80] HEADER_lfa: start 0x9CFB end 0x9CFD type pointers
9CFD  HEADER_cfa: defw 0x6306
; [DASMZ80] HEADER_cfa: start 0x9CFD end 0x9CFF type pointers
9CFF  HEADER_pfa: 
9CFF defw CR_cfa
9D01 defw DUP_cfa
9D03 defw NAME-FIELD_cfa
9D05 defw DUP_cfa
9D07 defw LINK-FIELD_cfa
9D09 defw DUP_cfa
9D0B defw CODE-FIELD_cfa
9D0D defw PARAMETER-FIELD_cfa
9D0F defw ;S_cfa
; [DASMZ80] HEADER_pfa: start 0x9CFF end 0x9D11 type pointers

9CCE  PARAMETER-FIELD_nfa: defb 0x0F+0x80,"PARAMETER-FIEL","D"+0x80
; [DASMZ80] PARAMETER-FIELD_nfa: start 0x9CCE end 0x9CDE type bytedata
9CDE  PARAMETER-FIELD_lfa: defw CODE-FIELD_nfa
; [DASMZ80] PARAMETER-FIELD_lfa: start 0x9CDE end 0x9CE0 type pointers
9CE0  PARAMETER-FIELD_cfa: defw 0x6306
; [DASMZ80] PARAMETER-FIELD_cfa: start 0x9CE0 end 0x9CE2 type pointers
9CE2  PARAMETER-FIELD_pfa: 
9CE2 defw DUP_cfa
9CE4 defw DATA-START_cfa
9CE6 defw !_cfa
9CE8 defw DUP_cfa
9CEA defw ADDRESS_cfa
9CEC defw SPACE_cfa
9CEE defw PFA-LABEL_cfa
9CF0 defw DEF_cfa
9CF2 defw ;S_cfa
; [DASMZ80] PARAMETER-FIELD_pfa: start 0x9CE2 end 0x9CF4 type pointers

9C93  CODE-FIELD_nfa: defb 0x0A+0x80,"CODE-FIEL","D"+0x80
; [DASMZ80] CODE-FIELD_nfa: start 0x9C93 end 0x9C9E type bytedata
9C9E  CODE-FIELD_lfa: defw (CODE-FIELD)_nfa
; [DASMZ80] CODE-FIELD_lfa: start 0x9C9E end 0x9CA0 type pointers
9CA0  CODE-FIELD_cfa: defw 0x6306
; [DASMZ80] CODE-FIELD_cfa: start 0x9CA0 end 0x9CA2 type pointers
9CA2  CODE-FIELD_pfa: 
9CA2 defw DUP_cfa
9CA4 defw CFA_cfa
9CA6 defw DUP_cfa
9CA8 defw DATA-START_cfa
9CAA defw !_cfa
9CAC defw DUP_cfa
9CAE defw ADDRESS_cfa
9CB0 defw SPACE_cfa
9CB2 defw CFA-LABEL_cfa
9CB4 defw DEF_cfa
9CB6 defw DEFW_cfa
9CB8 defw DUP_cfa
9CBA defw (CODE-FIELD)_cfa
9CBC defw CFA_cfa
9CBE defw CFA-LABEL$_cfa
9CC0 defw DATA-START_cfa
9CC2 defw @_cfa
9CC4 defw 2+_cfa
9CC6 defw DATA-END_cfa
9CC8 defw !_cfa
9CCA defw POINTERS_cfa
9CCC defw ;S_cfa
; [DASMZ80] CODE-FIELD_pfa: start 0x9CA2 end 0x9CCE type pointers

9C66  (CODE-FIELD)_nfa: defb 0x0C+0x80,"(CODE-FIELD",")"+0x80
; [DASMZ80] (CODE-FIELD)_nfa: start 0x9C66 end 0x9C73 type bytedata
9C73  (CODE-FIELD)_lfa: defw LINK-FIELD_nfa
; [DASMZ80] (CODE-FIELD)_lfa: start 0x9C73 end 0x9C75 type pointers
9C75  (CODE-FIELD)_cfa: defw 0x6306
; [DASMZ80] (CODE-FIELD)_cfa: start 0x9C75 end 0x9C77 type pointers
9C77  (CODE-FIELD)_pfa: 
9C77 defw DUP_cfa
9C79 defw CFA_cfa
9C7B defw @_cfa
9C7D defw 2DUP_cfa
9C7F defw =_cfa
9C81 defw 0BRANCH_cfa,0x000A; to 0x9C8D
9C85 defw DROP_cfa
9C87 defw PFA-LABEL_cfa
9C89 defw BRANCH_cfa,0x0006; to 0x9C91
9C8D defw NHEX._cfa
9C8F defw DROP_cfa
9C91 defw ;S_cfa
; [DASMZ80] (CODE-FIELD)_pfa: start 0x9C77 end 0x9C93 type pointers

9C1D  LINK-FIELD_nfa: defb 0x0A+0x80,"LINK-FIEL","D"+0x80
; [DASMZ80] LINK-FIELD_nfa: start 0x9C1D end 0x9C28 type bytedata
9C28  LINK-FIELD_lfa: defw NAME-FIELD_nfa
; [DASMZ80] LINK-FIELD_lfa: start 0x9C28 end 0x9C2A type pointers
9C2A  LINK-FIELD_cfa: defw 0x6306
; [DASMZ80] LINK-FIELD_cfa: start 0x9C2A end 0x9C2C type pointers
9C2C  LINK-FIELD_pfa: 
9C2C defw DUP_cfa
9C2E defw DUP_cfa
9C30 defw DUP_cfa
9C32 defw LFA_cfa
9C34 defw DUP_cfa
9C36 defw DATA-START_cfa
9C38 defw !_cfa
9C3A defw ADDRESS_cfa
9C3C defw SPACE_cfa
9C3E defw LFA-LABEL_cfa
9C40 defw DEF_cfa
9C42 defw LFA_cfa
9C44 defw DEFW_cfa
9C46 defw @_cfa
9C48 defw DUP_cfa
9C4A defw 0BRANCH_cfa,0x0008; to 0x9C54
9C4E defw NFA-LABEL_cfa
9C50 defw BRANCH_cfa,0x0004; to 0x9C56
9C54 defw U._cfa
9C56 defw DATA-START_cfa
9C58 defw @_cfa
9C5A defw 2+_cfa
9C5C defw DATA-END_cfa
9C5E defw !_cfa
9C60 defw LFA-LABEL$_cfa
9C62 defw POINTERS_cfa
9C64 defw ;S_cfa
; [DASMZ80] LINK-FIELD_pfa: start 0x9C2C end 0x9C66 type pointers

9BD4  NAME-FIELD_nfa: defb 0x0A+0x80,"NAME-FIEL","D"+0x80
; [DASMZ80] NAME-FIELD_nfa: start 0x9BD4 end 0x9BDF type bytedata
9BDF  NAME-FIELD_lfa: defw COUNT-BYTE_nfa
; [DASMZ80] NAME-FIELD_lfa: start 0x9BDF end 0x9BE1 type pointers
9BE1  NAME-FIELD_cfa: defw 0x6306
; [DASMZ80] NAME-FIELD_cfa: start 0x9BE1 end 0x9BE3 type pointers
9BE3  NAME-FIELD_pfa: 
9BE3 defw NFA_cfa
9BE5 defw DUP_cfa
9BE7 defw DUP_cfa
9BE9 defw DATA-START_cfa
9BEB defw !_cfa
9BED defw DUP_cfa
9BEF defw ADDRESS_cfa
9BF1 defw DUP_cfa
9BF3 defw SPACE_cfa
9BF5 defw NFA-LABEL_cfa
9BF7 defw DEF_cfa
9BF9 defw DEFB_cfa
9BFB defw DUP_cfa
9BFD defw C@_cfa
9BFF defw COUNT-BYTE_cfa
9C01 defw DUP_cfa
9C03 defw C@_cfa
9C05 defw LEN-ONLY_cfa
9C07 defw (.")_cfa
9C09 defb 0x01,","
9C0B defw 2DUP_cfa
9C0D defw +_cfa
9C0F defw 1+_cfa
9C11 defw DATA-END_cfa
9C13 defw !_cfa
9C15 defw NAME_cfa
9C17 defw NFA-LABEL$_cfa
9C19 defw BYTEDATA_cfa
9C1B defw ;S_cfa
; [DASMZ80] NAME-FIELD_pfa: start 0x9BE3 end 0x9C1D type pointers

9BA3  COUNT-BYTE_nfa: defb 0x0A+0x80,"COUNT-BYT","E"+0x80
; [DASMZ80] COUNT-BYTE_nfa: start 0x9BA3 end 0x9BAE type bytedata
9BAE  COUNT-BYTE_lfa: defw LEN-ONLY_nfa
; [DASMZ80] COUNT-BYTE_lfa: start 0x9BAE end 0x9BB0 type pointers
9BB0  COUNT-BYTE_cfa: defw 0x6306
; [DASMZ80] COUNT-BYTE_cfa: start 0x9BB0 end 0x9BB2 type pointers
9BB2  COUNT-BYTE_pfa: 
9BB2 defw DUP_cfa
9BB4 defw LEN-ONLY_cfa
9BB6 defw BHEX._cfa
9BB8 defw (.")_cfa
9BBA defb 0x05,"+0x80"
9BC0 defw LIT_cfa,0x0040
9BC4 defw AND_cfa
9BC6 defw 0BRANCH_cfa,0x000A; to 0x9BD2
9BCA defw (.")_cfa
9BCC defb 0x05,"+0x40"
9BD2 defw ;S_cfa
; [DASMZ80] COUNT-BYTE_pfa: start 0x9BB2 end 0x9BD4 type pointers

9B8E  LEN-ONLY_nfa: defb 0x08+0x80,"LEN-ONL","Y"+0x80
; [DASMZ80] LEN-ONLY_nfa: start 0x9B8E end 0x9B97 type bytedata
9B97  LEN-ONLY_lfa: defw NAME_nfa
; [DASMZ80] LEN-ONLY_lfa: start 0x9B97 end 0x9B99 type pointers
9B99  LEN-ONLY_cfa: defw 0x6306
; [DASMZ80] LEN-ONLY_cfa: start 0x9B99 end 0x9B9B type pointers
9B9B  LEN-ONLY_pfa: 
9B9B defw LIT_cfa,0x003F
9B9F defw AND_cfa
9BA1 defw ;S_cfa
; [DASMZ80] LEN-ONLY_pfa: start 0x9B9B end 0x9BA3 type pointers

9B57  NAME_nfa: defb 0x04+0x80,"NAM","E"+0x80
; [DASMZ80] NAME_nfa: start 0x9B57 end 0x9B5C type bytedata
9B5C  NAME_lfa: defw (NAME)_nfa
; [DASMZ80] NAME_lfa: start 0x9B5C end 0x9B5E type pointers
9B5E  NAME_cfa: defw 0x6306
; [DASMZ80] NAME_cfa: start 0x9B5E end 0x9B60 type pointers
9B60  NAME_pfa: 
9B60 defw DUP_cfa
9B62 defw 1_cfa
9B64 defw >_cfa
9B66 defw 0BRANCH_cfa,0x0004; to 0x9B6C
9B6A defw (NAME)_cfa
9B6C defw LIT_cfa,0x0022
9B70 defw EMIT_cfa
9B72 defw +_cfa
9B74 defw C@_cfa
9B76 defw LIT_cfa,0x007F
9B7A defw AND_cfa
9B7C defw EMIT_cfa
9B7E defw LIT_cfa,0x0022
9B82 defw EMIT_cfa
9B84 defw (.")_cfa
9B86 defb 0x05,"+0x80"
9B8C defw ;S_cfa
; [DASMZ80] NAME_pfa: start 0x9B60 end 0x9B8E type pointers

9B30  (NAME)_nfa: defb 0x06+0x80,"(NAME",")"+0x80
; [DASMZ80] (NAME)_nfa: start 0x9B30 end 0x9B37 type bytedata
9B37  (NAME)_lfa: defw DIS-COLON_nfa
; [DASMZ80] (NAME)_lfa: start 0x9B37 end 0x9B39 type pointers
9B39  (NAME)_cfa: defw 0x6306
; [DASMZ80] (NAME)_cfa: start 0x9B39 end 0x9B3B type pointers
9B3B  (NAME)_pfa: 
9B3B defw LIT_cfa,0x0022
9B3F defw EMIT_cfa
9B41 defw 2DUP_cfa
9B43 defw 1_cfa
9B45 defw /STRING_cfa
9B47 defw TYPE_cfa
9B49 defw LIT_cfa,0x0022
9B4D defw EMIT_cfa
9B4F defw LIT_cfa,0x002C
9B53 defw EMIT_cfa
9B55 defw ;S_cfa
; [DASMZ80] (NAME)_pfa: start 0x9B3B end 0x9B57 type pointers

9AEE  DIS-COLON_nfa: defb 0x09+0x80,"DIS-COLO","N"+0x80
; [DASMZ80] DIS-COLON_nfa: start 0x9AEE end 0x9AF8 type bytedata
9AF8  DIS-COLON_lfa: defw DIS-2VALUE_nfa
; [DASMZ80] DIS-COLON_lfa: start 0x9AF8 end 0x9AFA type pointers
9AFA  DIS-COLON_cfa: defw 0x6306
; [DASMZ80] DIS-COLON_cfa: start 0x9AFA end 0x9AFC type pointers
9AFC  DIS-COLON_pfa: 
9AFC defw DUP_cfa
9AFE defw DUP_cfa
9B00 defw ADDRESS_cfa
9B02 defw DUP_cfa
9B04 defw COLON-END?_cfa
9B06 defw 0=_cfa
9B08 defw 0BRANCH_cfa,0x0012; to 0x9B1C
9B0C defw DEFW_cfa
9B0E defw DUP_cfa
9B10 defw @_cfa
9B12 defw CFA-LABEL_cfa
9B14 defw DIS-SPECIAL-CASES_cfa
9B16 defw 2+_cfa
9B18 defw BRANCH_cfa,0xFFE4; to 0x9AFE
9B1C defw DUP_cfa
9B1E defw DEFW_cfa
9B20 defw @_cfa
9B22 defw CFA-LABEL_cfa
9B24 defw 2+_cfa
9B26 defw DATA-END_cfa
9B28 defw !_cfa
9B2A defw PFA-LABEL$_cfa
9B2C defw POINTERS_cfa
9B2E defw ;S_cfa
; [DASMZ80] DIS-COLON_pfa: start 0x9AFC end 0x9B30 type pointers

9AB5  DIS-2VALUE_nfa: defb 0x0A+0x80,"DIS-2VALU","E"+0x80
; [DASMZ80] DIS-2VALUE_nfa: start 0x9AB5 end 0x9AC0 type bytedata
9AC0  DIS-2VALUE_lfa: defw DIS-VALUE_nfa
; [DASMZ80] DIS-2VALUE_lfa: start 0x9AC0 end 0x9AC2 type pointers
9AC2  DIS-2VALUE_cfa: defw 0x6306
; [DASMZ80] DIS-2VALUE_cfa: start 0x9AC2 end 0x9AC4 type pointers
9AC4  DIS-2VALUE_pfa: 
9AC4 defw DUP_cfa
9AC6 defw DUP_cfa
9AC8 defw LIT_cfa,0x0004
9ACC defw +_cfa
9ACE defw DATA-END_cfa
9AD0 defw !_cfa
9AD2 defw DUP_cfa
9AD4 defw ADDRESS_cfa
9AD6 defw DEFW_cfa
9AD8 defw DUP_cfa
9ADA defw @_cfa
9ADC defw NHEX._cfa
9ADE defw (.")_cfa
9AE0 defb 0x01,","
9AE2 defw 2+_cfa
9AE4 defw @_cfa
9AE6 defw NHEX._cfa
9AE8 defw PFA-LABEL$_cfa
9AEA defw WORDDATA_cfa
9AEC defw ;S_cfa
; [DASMZ80] DIS-2VALUE_pfa: start 0x9AC4 end 0x9AEE type pointers

9A8D  DIS-VALUE_nfa: defb 0x09+0x80,"DIS-VALU","E"+0x80
; [DASMZ80] DIS-VALUE_nfa: start 0x9A8D end 0x9A97 type bytedata
9A97  DIS-VALUE_lfa: defw CODE_nfa
; [DASMZ80] DIS-VALUE_lfa: start 0x9A97 end 0x9A99 type pointers
9A99  DIS-VALUE_cfa: defw 0x6306
; [DASMZ80] DIS-VALUE_cfa: start 0x9A99 end 0x9A9B type pointers
9A9B  DIS-VALUE_pfa: 
9A9B defw DUP_cfa
9A9D defw DUP_cfa
9A9F defw 2+_cfa
9AA1 defw DATA-END_cfa
9AA3 defw !_cfa
9AA5 defw DUP_cfa
9AA7 defw ADDRESS_cfa
9AA9 defw DEFW_cfa
9AAB defw @_cfa
9AAD defw NHEX._cfa
9AAF defw PFA-LABEL$_cfa
9AB1 defw WORDDATA_cfa
9AB3 defw ;S_cfa
; [DASMZ80] DIS-VALUE_pfa: start 0x9A9B end 0x9AB5 type pointers

9A73  CODE_nfa: defb 0x04+0x80,"COD","E"+0x80
; [DASMZ80] CODE_nfa: start 0x9A73 end 0x9A78 type bytedata
9A78  CODE_lfa: defw POINTERS_nfa
; [DASMZ80] CODE_lfa: start 0x9A78 end 0x9A7A type pointers
9A7A  CODE_cfa: defw 0x6306
; [DASMZ80] CODE_cfa: start 0x9A7A end 0x9A7C type pointers
9A7C  CODE_pfa: 
9A7C defw Z80DASM-BLOCK_cfa
9A7E defw (.")_cfa
9A80 defb 0x0A," type code"
9A8B defw ;S_cfa
; [DASMZ80] CODE_pfa: start 0x9A7C end 0x9A8D type pointers

9A51  POINTERS_nfa: defb 0x08+0x80,"POINTER","S"+0x80
; [DASMZ80] POINTERS_nfa: start 0x9A51 end 0x9A5A type bytedata
9A5A  POINTERS_lfa: defw WORDDATA_nfa
; [DASMZ80] POINTERS_lfa: start 0x9A5A end 0x9A5C type pointers
9A5C  POINTERS_cfa: defw 0x6306
; [DASMZ80] POINTERS_cfa: start 0x9A5C end 0x9A5E type pointers
9A5E  POINTERS_pfa: 
9A5E defw Z80DASM-BLOCK_cfa
9A60 defw (.")_cfa
9A62 defb 0x0E," type pointers"
9A71 defw ;S_cfa
; [DASMZ80] POINTERS_pfa: start 0x9A5E end 0x9A73 type pointers

9A2F  WORDDATA_nfa: defb 0x08+0x80,"WORDDAT","A"+0x80
; [DASMZ80] WORDDATA_nfa: start 0x9A2F end 0x9A38 type bytedata
9A38  WORDDATA_lfa: defw BYTEDATA_nfa
; [DASMZ80] WORDDATA_lfa: start 0x9A38 end 0x9A3A type pointers
9A3A  WORDDATA_cfa: defw 0x6306
; [DASMZ80] WORDDATA_cfa: start 0x9A3A end 0x9A3C type pointers
9A3C  WORDDATA_pfa: 
9A3C defw Z80DASM-BLOCK_cfa
9A3E defw (.")_cfa
9A40 defb 0x0E," type worddata"
9A4F defw ;S_cfa
; [DASMZ80] WORDDATA_pfa: start 0x9A3C end 0x9A51 type pointers

9A0D  BYTEDATA_nfa: defb 0x08+0x80,"BYTEDAT","A"+0x80
; [DASMZ80] BYTEDATA_nfa: start 0x9A0D end 0x9A16 type bytedata
9A16  BYTEDATA_lfa: defw Z80DASM-BLOCK_nfa
; [DASMZ80] BYTEDATA_lfa: start 0x9A16 end 0x9A18 type pointers
9A18  BYTEDATA_cfa: defw 0x6306
; [DASMZ80] BYTEDATA_cfa: start 0x9A18 end 0x9A1A type pointers
9A1A  BYTEDATA_pfa: 
9A1A defw Z80DASM-BLOCK_cfa
9A1C defw (.")_cfa
9A1E defb 0x0E," type bytedata"
9A2D defw ;S_cfa
; [DASMZ80] BYTEDATA_pfa: start 0x9A1A end 0x9A2F type pointers

99C7  Z80DASM-BLOCK_nfa: defb 0x0D+0x80,"Z80DASM-BLOC","K"+0x80
; [DASMZ80] Z80DASM-BLOCK_nfa: start 0x99C7 end 0x99D5 type bytedata
99D5  Z80DASM-BLOCK_lfa: defw DATA-END_nfa
; [DASMZ80] Z80DASM-BLOCK_lfa: start 0x99D5 end 0x99D7 type pointers
99D7  Z80DASM-BLOCK_cfa: defw 0x6306
; [DASMZ80] Z80DASM-BLOCK_cfa: start 0x99D7 end 0x99D9 type pointers
99D9  Z80DASM-BLOCK_pfa: 
99D9 defw CR_cfa
99DB defw (.")_cfa
99DD defb 0x0C,"; [DASMZ80] "
99EA defw TYPE_cfa
99EC defw (.")_cfa
99EE defb 0x08,": start "
99F7 defw DATA-START_cfa
99F9 defw @_cfa
99FB defw NHEX._cfa
99FD defw (.")_cfa
99FF defb 0x05," end "
9A05 defw DATA-END_cfa
9A07 defw @_cfa
9A09 defw NHEX._cfa
9A0B defw ;S_cfa
; [DASMZ80] Z80DASM-BLOCK_pfa: start 0x99D9 end 0x9A0D type pointers

99B8  DATA-END_nfa: defb 0x08+0x80,"DATA-EN","D"+0x80
; [DASMZ80] DATA-END_nfa: start 0x99B8 end 0x99C1 type bytedata
99C1  DATA-END_lfa: defw DATA-START_nfa
; [DASMZ80] DATA-END_lfa: start 0x99C1 end 0x99C3 type pointers
99C3  DATA-END_cfa: defw 0x6362
; [DASMZ80] DATA-END_cfa: start 0x99C3 end 0x99C5 type pointers
99C5  DATA-END_pfa: 
99C5 defw 0x99C7
; [DASMZ80] DATA-END_pfa: start 0x99C5 end 0x99C7 type worddata

99A7  DATA-START_nfa: defb 0x0A+0x80,"DATA-STAR","T"+0x80
; [DASMZ80] DATA-START_nfa: start 0x99A7 end 0x99B2 type bytedata
99B2  DATA-START_lfa: defw 2VARIABLE?_nfa
; [DASMZ80] DATA-START_lfa: start 0x99B2 end 0x99B4 type pointers
99B4  DATA-START_cfa: defw 0x6362
; [DASMZ80] DATA-START_cfa: start 0x99B4 end 0x99B6 type pointers
99B6  DATA-START_pfa: 
99B6 defw 0x99B6
; [DASMZ80] DATA-START_pfa: start 0x99B6 end 0x99B8 type worddata

998C  2VARIABLE?_nfa: defb 0x0A+0x80,"2VARIABLE","?"+0x80
; [DASMZ80] 2VARIABLE?_nfa: start 0x998C end 0x9997 type bytedata
9997  2VARIABLE?_lfa: defw 2CONSTANT?_nfa
; [DASMZ80] 2VARIABLE?_lfa: start 0x9997 end 0x9999 type pointers
9999  2VARIABLE?_cfa: defw 0x6306
; [DASMZ80] 2VARIABLE?_cfa: start 0x9999 end 0x999B type pointers
999B  2VARIABLE?_pfa: 
999B defw CFA_cfa
999D defw @_cfa
999F defw LIT_cfa,0x7F23
99A3 defw =_cfa
99A5 defw ;S_cfa
; [DASMZ80] 2VARIABLE?_pfa: start 0x999B end 0x99A7 type pointers

9971  2CONSTANT?_nfa: defb 0x0A+0x80,"2CONSTANT","?"+0x80
; [DASMZ80] 2CONSTANT?_nfa: start 0x9971 end 0x997C type bytedata
997C  2CONSTANT?_lfa: defw USER?_nfa
; [DASMZ80] 2CONSTANT?_lfa: start 0x997C end 0x997E type pointers
997E  2CONSTANT?_cfa: defw 0x6306
; [DASMZ80] 2CONSTANT?_cfa: start 0x997E end 0x9980 type pointers
9980  2CONSTANT?_pfa: 
9980 defw CFA_cfa
9982 defw @_cfa
9984 defw LIT_cfa,0x7F00
9988 defw =_cfa
998A defw ;S_cfa
; [DASMZ80] 2CONSTANT?_pfa: start 0x9980 end 0x998C type pointers

995B  USER?_nfa: defb 0x05+0x80,"USER","?"+0x80
; [DASMZ80] USER?_nfa: start 0x995B end 0x9961 type bytedata
9961  USER?_lfa: defw VARIABLE?_nfa
; [DASMZ80] USER?_lfa: start 0x9961 end 0x9963 type pointers
9963  USER?_cfa: defw 0x6306
; [DASMZ80] USER?_cfa: start 0x9963 end 0x9965 type pointers
9965  USER?_pfa: 
9965 defw CFA_cfa
9967 defw @_cfa
9969 defw LIT_cfa,0x6374
996D defw =_cfa
996F defw ;S_cfa
; [DASMZ80] USER?_pfa: start 0x9965 end 0x9971 type pointers

9941  VARIABLE?_nfa: defb 0x09+0x80,"VARIABLE","?"+0x80
; [DASMZ80] VARIABLE?_nfa: start 0x9941 end 0x994B type bytedata
994B  VARIABLE?_lfa: defw CONSTANT?_nfa
; [DASMZ80] VARIABLE?_lfa: start 0x994B end 0x994D type pointers
994D  VARIABLE?_cfa: defw 0x6306
; [DASMZ80] VARIABLE?_cfa: start 0x994D end 0x994F type pointers
994F  VARIABLE?_pfa: 
994F defw CFA_cfa
9951 defw @_cfa
9953 defw LIT_cfa,0x6362
9957 defw =_cfa
9959 defw ;S_cfa
; [DASMZ80] VARIABLE?_pfa: start 0x994F end 0x995B type pointers

9927  CONSTANT?_nfa: defb 0x09+0x80,"CONSTANT","?"+0x80
; [DASMZ80] CONSTANT?_nfa: start 0x9927 end 0x9931 type bytedata
9931  CONSTANT?_lfa: defw COLON?_nfa
; [DASMZ80] CONSTANT?_lfa: start 0x9931 end 0x9933 type pointers
9933  CONSTANT?_cfa: defw 0x6306
; [DASMZ80] CONSTANT?_cfa: start 0x9933 end 0x9935 type pointers
9935  CONSTANT?_pfa: 
9935 defw CFA_cfa
9937 defw @_cfa
9939 defw LIT_cfa,0x6348
993D defw =_cfa
993F defw ;S_cfa
; [DASMZ80] CONSTANT?_pfa: start 0x9935 end 0x9941 type pointers

990C  COLON?_nfa: defb 0x06+0x80,"COLON","?"+0x80
; [DASMZ80] COLON?_nfa: start 0x990C end 0x9913 type bytedata
9913  COLON?_lfa: defw COLON-END?_nfa
; [DASMZ80] COLON?_lfa: start 0x9913 end 0x9915 type pointers
9915  COLON?_cfa: defw 0x6306
; [DASMZ80] COLON?_cfa: start 0x9915 end 0x9917 type pointers
9917  COLON?_pfa: 
9917 defw CFA_cfa
9919 defw @_cfa
991B defw LIT_cfa,0x62F4
991F defw CFA_cfa
9921 defw @_cfa
9923 defw =_cfa
9925 defw ;S_cfa
; [DASMZ80] COLON?_pfa: start 0x9917 end 0x9927 type pointers

987D  COLON-END?_nfa: defb 0x0A+0x80,"COLON-END","?"+0x80
; [DASMZ80] COLON-END?_nfa: start 0x987D end 0x9888 type bytedata
9888  COLON-END?_lfa: defw ADDR_nfa
; [DASMZ80] COLON-END?_lfa: start 0x9888 end 0x988A type pointers
988A  COLON-END?_cfa: defw 0x6306
; [DASMZ80] COLON-END?_cfa: start 0x988A end 0x988C type pointers
988C  COLON-END?_pfa: 
988C defw LIT_cfa,0x987B
9890 defw !_cfa
9892 defw TRUE_cfa
9894 defw ADDR_cfa
9896 defw @_cfa
9898 defw LIT_cfa,0x6148
989C defw =_cfa
989E defw 0BRANCH_cfa,0x0004; to 0x98A4
98A2 defw EXIT_cfa
98A4 defw ADDR_cfa
98A6 defw @_cfa
98A8 defw LIT_cfa,0x676E
98AC defw =_cfa
98AE defw 0BRANCH_cfa,0x0004; to 0x98B4
98B2 defw EXIT_cfa
98B4 defw ADDR_cfa
98B6 defw LIT_cfa,0x6E04
98BA defw =_cfa
98BC defw 0BRANCH_cfa,0x0004; to 0x98C2
98C0 defw EXIT_cfa
98C2 defw ADDR_cfa
98C4 defw LIT_cfa,0x6DAE
98C8 defw =_cfa
98CA defw 0BRANCH_cfa,0x0004; to 0x98D0
98CE defw EXIT_cfa
98D0 defw ADDR_cfa
98D2 defw LIT_cfa,0x6D6A
98D6 defw =_cfa
98D8 defw 0BRANCH_cfa,0x0004; to 0x98DE
98DC defw EXIT_cfa
98DE defw ADDR_cfa
98E0 defw LIT_cfa,0x6C99
98E4 defw =_cfa
98E6 defw 0BRANCH_cfa,0x0004; to 0x98EC
98EA defw EXIT_cfa
98EC defw ADDR_cfa
98EE defw LIT_cfa,0x6B2A
98F2 defw =_cfa
98F4 defw 0BRANCH_cfa,0x0004; to 0x98FA
98F8 defw EXIT_cfa
98FA defw ADDR_cfa
98FC defw LIT_cfa,0x6D4C
9900 defw =_cfa
9902 defw 0BRANCH_cfa,0x0004; to 0x9908
9906 defw EXIT_cfa
9908 defw 0=_cfa
990A defw ;S_cfa
; [DASMZ80] COLON-END?_pfa: start 0x988C end 0x990C type pointers

9872  ADDR_nfa: defb 0x04+0x80,"ADD","R"+0x80
; [DASMZ80] ADDR_nfa: start 0x9872 end 0x9877 type bytedata
9877  ADDR_lfa: defw DIS-SPECIAL-CASES_nfa
; [DASMZ80] ADDR_lfa: start 0x9877 end 0x9879 type pointers
9879  ADDR_cfa: defw 0x6348
; [DASMZ80] ADDR_cfa: start 0x9879 end 0x987B type pointers
987B  ADDR_pfa: 
987B defw 0x990A
; [DASMZ80] ADDR_pfa: start 0x987B end 0x987D type worddata

97B4  DIS-SPECIAL-CASES_nfa: defb 0x11+0x80,"DIS-SPECIAL-CASE","S"+0x80
; [DASMZ80] DIS-SPECIAL-CASES_nfa: start 0x97B4 end 0x97C6 type bytedata
97C6  DIS-SPECIAL-CASES_lfa: defw DIS-STRING_nfa
; [DASMZ80] DIS-SPECIAL-CASES_lfa: start 0x97C6 end 0x97C8 type pointers
97C8  DIS-SPECIAL-CASES_cfa: defw 0x6306
; [DASMZ80] DIS-SPECIAL-CASES_cfa: start 0x97C8 end 0x97CA type pointers
97CA  DIS-SPECIAL-CASES_pfa: 
97CA defw DUP_cfa
97CC defw @_cfa
97CE defw LIT_cfa,0x66F7
97D2 defw OVER_cfa
97D4 defw =_cfa
97D6 defw 0BRANCH_cfa,0x000A; to 0x97E2
97DA defw DROP_cfa
97DC defw DIS-COMPILE_cfa
97DE defw BRANCH_cfa,0x0090; to 0x9870
97E2 defw LIT_cfa,0x5E7D
97E6 defw OVER_cfa
97E8 defw =_cfa
97EA defw 0BRANCH_cfa,0x000A; to 0x97F6
97EE defw DROP_cfa
97F0 defw DIS-LITERAL_cfa
97F2 defw BRANCH_cfa,0x007C; to 0x9870
97F6 defw LIT_cfa,0x5EA1
97FA defw OVER_cfa
97FC defw =_cfa
97FE defw 0BRANCH_cfa,0x000A; to 0x980A
9802 defw DROP_cfa
9804 defw DIS-BRANCH_cfa
9806 defw BRANCH_cfa,0x0068; to 0x9870
980A defw LIT_cfa,0x5EB9
980E defw OVER_cfa
9810 defw =_cfa
9812 defw 0BRANCH_cfa,0x000A; to 0x981E
9816 defw DROP_cfa
9818 defw DIS-BRANCH_cfa
981A defw BRANCH_cfa,0x0054; to 0x9870
981E defw LIT_cfa,0x5ECE
9822 defw OVER_cfa
9824 defw =_cfa
9826 defw 0BRANCH_cfa,0x000A; to 0x9832
982A defw DROP_cfa
982C defw DIS-BRANCH_cfa
982E defw BRANCH_cfa,0x0040; to 0x9870
9832 defw LIT_cfa,0x5F08
9836 defw OVER_cfa
9838 defw =_cfa
983A defw 0BRANCH_cfa,0x000A; to 0x9846
983E defw DROP_cfa
9840 defw DIS-BRANCH_cfa
9842 defw BRANCH_cfa,0x002C; to 0x9870
9846 defw LIT_cfa,0x6847
984A defw OVER_cfa
984C defw =_cfa
984E defw 0BRANCH_cfa,0x000A; to 0x985A
9852 defw DROP_cfa
9854 defw DIS-STRING_cfa
9856 defw BRANCH_cfa,0x0018; to 0x9870
985A defw LIT_cfa,0x916A
985E defw OVER_cfa
9860 defw =_cfa
9862 defw 0BRANCH_cfa,0x000A; to 0x986E
9866 defw DROP_cfa
9868 defw DIS-STRING_cfa
986A defw BRANCH_cfa,0x0004; to 0x9870
986E defw DROP_cfa
9870 defw ;S_cfa
; [DASMZ80] DIS-SPECIAL-CASES_pfa: start 0x97CA end 0x9872 type pointers

978D  DIS-STRING_nfa: defb 0x0A+0x80,"DIS-STRIN","G"+0x80
; [DASMZ80] DIS-STRING_nfa: start 0x978D end 0x9798 type bytedata
9798  DIS-STRING_lfa: defw (DIS-STRING)_nfa
; [DASMZ80] DIS-STRING_lfa: start 0x9798 end 0x979A type pointers
979A  DIS-STRING_cfa: defw 0x6306
; [DASMZ80] DIS-STRING_cfa: start 0x979A end 0x979C type pointers
979C  DIS-STRING_pfa: 
979C defw 2+_cfa
979E defw DUP_cfa
97A0 defw ADDRESS_cfa
97A2 defw DEFB_cfa
97A4 defw DUP_cfa
97A6 defw COUNT_cfa
97A8 defw (DIS-STRING)_cfa
97AA defw DUP_cfa
97AC defw C@_cfa
97AE defw +_cfa
97B0 defw 1-_cfa
97B2 defw ;S_cfa
; [DASMZ80] DIS-STRING_pfa: start 0x979C end 0x97B4 type pointers

9762  (DIS-STRING)_nfa: defb 0x0C+0x80,"(DIS-STRING",")"+0x80
; [DASMZ80] (DIS-STRING)_nfa: start 0x9762 end 0x976F type bytedata
976F  (DIS-STRING)_lfa: defw DIS-BRANCH_nfa
; [DASMZ80] (DIS-STRING)_lfa: start 0x976F end 0x9771 type pointers
9771  (DIS-STRING)_cfa: defw 0x6306
; [DASMZ80] (DIS-STRING)_cfa: start 0x9771 end 0x9773 type pointers
9773  (DIS-STRING)_pfa: 
9773 defw DUP_cfa
9775 defw BHEX._cfa
9777 defw LIT_cfa,0x002C
977B defw EMIT_cfa
977D defw LIT_cfa,0x0022
9781 defw EMIT_cfa
9783 defw TYPE_cfa
9785 defw LIT_cfa,0x0022
9789 defw EMIT_cfa
978B defw ;S_cfa
; [DASMZ80] (DIS-STRING)_pfa: start 0x9773 end 0x978D type pointers

973D  DIS-BRANCH_nfa: defb 0x0A+0x80,"DIS-BRANC","H"+0x80
; [DASMZ80] DIS-BRANCH_nfa: start 0x973D end 0x9748 type bytedata
9748  DIS-BRANCH_lfa: defw DIS-LITERAL_nfa
; [DASMZ80] DIS-BRANCH_lfa: start 0x9748 end 0x974A type pointers
974A  DIS-BRANCH_cfa: defw 0x6306
; [DASMZ80] DIS-BRANCH_cfa: start 0x974A end 0x974C type pointers
974C  DIS-BRANCH_pfa: 
974C defw DIS-LITERAL_cfa
974E defw (.")_cfa
9750 defb 0x05,"; to "
9756 defw DUP_cfa
9758 defw DUP_cfa
975A defw @_cfa
975C defw +_cfa
975E defw NHEX._cfa
9760 defw ;S_cfa
; [DASMZ80] DIS-BRANCH_pfa: start 0x974C end 0x9762 type pointers

971F  DIS-LITERAL_nfa: defb 0x0B+0x80,"DIS-LITERA","L"+0x80
; [DASMZ80] DIS-LITERAL_nfa: start 0x971F end 0x972B type bytedata
972B  DIS-LITERAL_lfa: defw DIS-COMPILE_nfa
; [DASMZ80] DIS-LITERAL_lfa: start 0x972B end 0x972D type pointers
972D  DIS-LITERAL_cfa: defw 0x6306
; [DASMZ80] DIS-LITERAL_cfa: start 0x972D end 0x972F type pointers
972F  DIS-LITERAL_pfa: 
972F defw 2+_cfa
9731 defw DUP_cfa
9733 defw @_cfa
9735 defw (.")_cfa
9737 defb 0x01,","
9739 defw NHEX._cfa
973B defw ;S_cfa
; [DASMZ80] DIS-LITERAL_pfa: start 0x972F end 0x973D type pointers

9701  DIS-COMPILE_nfa: defb 0x0B+0x80,"DIS-COMPIL","E"+0x80
; [DASMZ80] DIS-COMPILE_nfa: start 0x9701 end 0x970D type bytedata
970D  DIS-COMPILE_lfa: defw DEFB_nfa
; [DASMZ80] DIS-COMPILE_lfa: start 0x970D end 0x970F type pointers
970F  DIS-COMPILE_cfa: defw 0x6306
; [DASMZ80] DIS-COMPILE_cfa: start 0x970F end 0x9711 type pointers
9711  DIS-COMPILE_pfa: 
9711 defw 2+_cfa
9713 defw DUP_cfa
9715 defw @_cfa
9717 defw (.")_cfa
9719 defb 0x01,","
971B defw CFA-LABEL_cfa
971D defw ;S_cfa
; [DASMZ80] DIS-COMPILE_pfa: start 0x9711 end 0x971F type pointers

96EE  DEFB_nfa: defb 0x04+0x80,"DEF","B"+0x80
; [DASMZ80] DEFB_nfa: start 0x96EE end 0x96F3 type bytedata
96F3  DEFB_lfa: defw DEFW_nfa
; [DASMZ80] DEFB_lfa: start 0x96F3 end 0x96F5 type pointers
96F5  DEFB_cfa: defw 0x6306
; [DASMZ80] DEFB_cfa: start 0x96F5 end 0x96F7 type pointers
96F7  DEFB_pfa: 
96F7 defw (.")_cfa
96F9 defb 0x05,"defb "
96FF defw ;S_cfa
; [DASMZ80] DEFB_pfa: start 0x96F7 end 0x9701 type pointers

96DB  DEFW_nfa: defb 0x04+0x80,"DEF","W"+0x80
; [DASMZ80] DEFW_nfa: start 0x96DB end 0x96E0 type bytedata
96E0  DEFW_lfa: defw PFA-LABEL_nfa
; [DASMZ80] DEFW_lfa: start 0x96E0 end 0x96E2 type pointers
96E2  DEFW_cfa: defw 0x6306
; [DASMZ80] DEFW_cfa: start 0x96E2 end 0x96E4 type pointers
96E4  DEFW_pfa: 
96E4 defw (.")_cfa
96E6 defb 0x05,"defw "
96EC defw ;S_cfa
; [DASMZ80] DEFW_pfa: start 0x96E4 end 0x96EE type pointers

96C7  PFA-LABEL_nfa: defb 0x09+0x80,"PFA-LABE","L"+0x80
; [DASMZ80] PFA-LABEL_nfa: start 0x96C7 end 0x96D1 type bytedata
96D1  PFA-LABEL_lfa: defw CFA-LABEL_nfa
; [DASMZ80] PFA-LABEL_lfa: start 0x96D1 end 0x96D3 type pointers
96D3  PFA-LABEL_cfa: defw 0x6306
; [DASMZ80] PFA-LABEL_cfa: start 0x96D3 end 0x96D5 type pointers
96D5  PFA-LABEL_pfa: 
96D5 defw PFA-LABEL$_cfa
96D7 defw TYPE_cfa
96D9 defw ;S_cfa
; [DASMZ80] PFA-LABEL_pfa: start 0x96D5 end 0x96DB type pointers

96B3  CFA-LABEL_nfa: defb 0x09+0x80,"CFA-LABE","L"+0x80
; [DASMZ80] CFA-LABEL_nfa: start 0x96B3 end 0x96BD type bytedata
96BD  CFA-LABEL_lfa: defw LFA-LABEL_nfa
; [DASMZ80] CFA-LABEL_lfa: start 0x96BD end 0x96BF type pointers
96BF  CFA-LABEL_cfa: defw 0x6306
; [DASMZ80] CFA-LABEL_cfa: start 0x96BF end 0x96C1 type pointers
96C1  CFA-LABEL_pfa: 
96C1 defw CFA-LABEL$_cfa
96C3 defw TYPE_cfa
96C5 defw ;S_cfa
; [DASMZ80] CFA-LABEL_pfa: start 0x96C1 end 0x96C7 type pointers

969F  LFA-LABEL_nfa: defb 0x09+0x80,"LFA-LABE","L"+0x80
; [DASMZ80] LFA-LABEL_nfa: start 0x969F end 0x96A9 type bytedata
96A9  LFA-LABEL_lfa: defw NFA-LABEL_nfa
; [DASMZ80] LFA-LABEL_lfa: start 0x96A9 end 0x96AB type pointers
96AB  LFA-LABEL_cfa: defw 0x6306
; [DASMZ80] LFA-LABEL_cfa: start 0x96AB end 0x96AD type pointers
96AD  LFA-LABEL_pfa: 
96AD defw LFA-LABEL$_cfa
96AF defw TYPE_cfa
96B1 defw ;S_cfa
; [DASMZ80] LFA-LABEL_pfa: start 0x96AD end 0x96B3 type pointers

968B  NFA-LABEL_nfa: defb 0x09+0x80,"NFA-LABE","L"+0x80
; [DASMZ80] NFA-LABEL_nfa: start 0x968B end 0x9695 type bytedata
9695  NFA-LABEL_lfa: defw PFA-LABEL$_nfa
; [DASMZ80] NFA-LABEL_lfa: start 0x9695 end 0x9697 type pointers
9697  NFA-LABEL_cfa: defw 0x6306
; [DASMZ80] NFA-LABEL_cfa: start 0x9697 end 0x9699 type pointers
9699  NFA-LABEL_pfa: 
9699 defw NFA-LABEL$_cfa
969B defw TYPE_cfa
969D defw ;S_cfa
; [DASMZ80] NFA-LABEL_pfa: start 0x9699 end 0x969F type pointers

966D  PFA-LABEL$_nfa: defb 0x0A+0x80,"PFA-LABEL","$"+0x80
; [DASMZ80] PFA-LABEL$_nfa: start 0x966D end 0x9678 type bytedata
9678  PFA-LABEL$_lfa: defw CFA-LABEL$_nfa
; [DASMZ80] PFA-LABEL$_lfa: start 0x9678 end 0x967A type pointers
967A  PFA-LABEL$_cfa: defw 0x6306
; [DASMZ80] PFA-LABEL$_cfa: start 0x967A end 0x967C type pointers
967C  PFA-LABEL$_pfa: 
967C defw NFA_cfa
967E defw ID_cfa
9680 defw SLIT_cfa
9682 defb 0x04,"_pfa"
9687 defw S+_cfa
9689 defw ;S_cfa
; [DASMZ80] PFA-LABEL$_pfa: start 0x967C end 0x968B type pointers

964D  CFA-LABEL$_nfa: defb 0x0A+0x80,"CFA-LABEL","$"+0x80
; [DASMZ80] CFA-LABEL$_nfa: start 0x964D end 0x9658 type bytedata
9658  CFA-LABEL$_lfa: defw LFA-LABEL$_nfa
; [DASMZ80] CFA-LABEL$_lfa: start 0x9658 end 0x965A type pointers
965A  CFA-LABEL$_cfa: defw 0x6306
; [DASMZ80] CFA-LABEL$_cfa: start 0x965A end 0x965C type pointers
965C  CFA-LABEL$_pfa: 
965C defw 2+_cfa
965E defw NFA_cfa
9660 defw ID_cfa
9662 defw SLIT_cfa
9664 defb 0x04,"_cfa"
9669 defw S+_cfa
966B defw ;S_cfa
; [DASMZ80] CFA-LABEL$_pfa: start 0x965C end 0x966D type pointers

962F  LFA-LABEL$_nfa: defb 0x0A+0x80,"LFA-LABEL","$"+0x80
; [DASMZ80] LFA-LABEL$_nfa: start 0x962F end 0x963A type bytedata
963A  LFA-LABEL$_lfa: defw NFA-LABEL$_nfa
; [DASMZ80] LFA-LABEL$_lfa: start 0x963A end 0x963C type pointers
963C  LFA-LABEL$_cfa: defw 0x6306
; [DASMZ80] LFA-LABEL$_cfa: start 0x963C end 0x963E type pointers
963E  LFA-LABEL$_pfa: 
963E defw NFA_cfa
9640 defw ID_cfa
9642 defw SLIT_cfa
9644 defb 0x04,"_lfa"
9649 defw S+_cfa
964B defw ;S_cfa
; [DASMZ80] LFA-LABEL$_pfa: start 0x963E end 0x964D type pointers

9613  NFA-LABEL$_nfa: defb 0x0A+0x80,"NFA-LABEL","$"+0x80
; [DASMZ80] NFA-LABEL$_nfa: start 0x9613 end 0x961E type bytedata
961E  NFA-LABEL$_lfa: defw ID_nfa
; [DASMZ80] NFA-LABEL$_lfa: start 0x961E end 0x9620 type pointers
9620  NFA-LABEL$_cfa: defw 0x6306
; [DASMZ80] NFA-LABEL$_cfa: start 0x9620 end 0x9622 type pointers
9622  NFA-LABEL$_pfa: 
9622 defw ID_cfa
9624 defw SLIT_cfa
9626 defb 0x04,"_nfa"
962B defw S+_cfa
962D defw ;S_cfa
; [DASMZ80] NFA-LABEL$_pfa: start 0x9622 end 0x962F type pointers

95E6  ID_nfa: defb 0x02+0x80,"I","D"+0x80
; [DASMZ80] ID_nfa: start 0x95E6 end 0x95E9 type bytedata
95E9  ID_lfa: defw DEF_nfa
; [DASMZ80] ID_lfa: start 0x95E9 end 0x95EB type pointers
95EB  ID_cfa: defw 0x6306
; [DASMZ80] ID_cfa: start 0x95EB end 0x95ED type pointers
95ED  ID_pfa: 
95ED defw DUP_cfa
95EF defw 1+_cfa
95F1 defw SWAP_cfa
95F3 defw C@_cfa
95F5 defw LIT_cfa,0x003F
95F9 defw AND_cfa
95FB defw SAVE-STRING_cfa
95FD defw 2DUP_cfa
95FF defw +_cfa
9601 defw 1-_cfa
9603 defw DUP_cfa
9605 defw C@_cfa
9607 defw LIT_cfa,0x007F
960B defw AND_cfa
960D defw SWAP_cfa
960F defw C!_cfa
9611 defw ;S_cfa
; [DASMZ80] ID_pfa: start 0x95ED end 0x9613 type pointers

95D7  DEF_nfa: defb 0x03+0x80,"DE","F"+0x80
; [DASMZ80] DEF_nfa: start 0x95D7 end 0x95DB type bytedata
95DB  DEF_lfa: defw DHEX._nfa
; [DASMZ80] DEF_lfa: start 0x95DB end 0x95DD type pointers
95DD  DEF_cfa: defw 0x6306
; [DASMZ80] DEF_cfa: start 0x95DD end 0x95DF type pointers
95DF  DEF_pfa: 
95DF defw (.")_cfa
95E1 defb 0x02,": "
95E4 defw ;S_cfa
; [DASMZ80] DEF_pfa: start 0x95DF end 0x95E6 type pointers

95A2  DHEX._nfa: defb 0x05+0x80,"DHEX","."+0x80
; [DASMZ80] DHEX._nfa: start 0x95A2 end 0x95A8 type bytedata
95A8  DHEX._lfa: defw NHEX._nfa
; [DASMZ80] DHEX._lfa: start 0x95A8 end 0x95AA type pointers
95AA  DHEX._cfa: defw 0x6306
; [DASMZ80] DHEX._cfa: start 0x95AA end 0x95AC type pointers
95AC  DHEX._pfa: 
95AC defw BASE_cfa
95AE defw @_cfa
95B0 defw >R_cfa
95B2 defw HEX_cfa
95B4 defw <#_cfa
95B6 defw #_cfa
95B8 defw #_cfa
95BA defw #_cfa
95BC defw #_cfa
95BE defw #_cfa
95C0 defw #_cfa
95C2 defw #_cfa
95C4 defw #_cfa
95C6 defw #>_cfa
95C8 defw (.")_cfa
95CA defb 0x02,"0x"
95CD defw TYPE_cfa
95CF defw R>_cfa
95D1 defw BASE_cfa
95D3 defw !_cfa
95D5 defw ;S_cfa
; [DASMZ80] DHEX._pfa: start 0x95AC end 0x95D7 type pointers

9575  NHEX._nfa: defb 0x05+0x80,"NHEX","."+0x80
; [DASMZ80] NHEX._nfa: start 0x9575 end 0x957B type bytedata
957B  NHEX._lfa: defw BHEX._nfa
; [DASMZ80] NHEX._lfa: start 0x957B end 0x957D type pointers
957D  NHEX._cfa: defw 0x6306
; [DASMZ80] NHEX._cfa: start 0x957D end 0x957F type pointers
957F  NHEX._pfa: 
957F defw BASE_cfa
9581 defw @_cfa
9583 defw HEX_cfa
9585 defw SWAP_cfa
9587 defw S->D_cfa
9589 defw <#_cfa
958B defw #_cfa
958D defw #_cfa
958F defw #_cfa
9591 defw #_cfa
9593 defw #>_cfa
9595 defw (.")_cfa
9597 defb 0x02,"0x"
959A defw TYPE_cfa
959C defw BASE_cfa
959E defw !_cfa
95A0 defw ;S_cfa
; [DASMZ80] NHEX._pfa: start 0x957F end 0x95A2 type pointers

954C  BHEX._nfa: defb 0x05+0x80,"BHEX","."+0x80
; [DASMZ80] BHEX._nfa: start 0x954C end 0x9552 type bytedata
9552  BHEX._lfa: defw ID.BS_nfa
; [DASMZ80] BHEX._lfa: start 0x9552 end 0x9554 type pointers
9554  BHEX._cfa: defw 0x6306
; [DASMZ80] BHEX._cfa: start 0x9554 end 0x9556 type pointers
9556  BHEX._pfa: 
9556 defw BASE_cfa
9558 defw @_cfa
955A defw HEX_cfa
955C defw SWAP_cfa
955E defw S->D_cfa
9560 defw <#_cfa
9562 defw #_cfa
9564 defw #_cfa
9566 defw #>_cfa
9568 defw (.")_cfa
956A defb 0x02,"0x"
956D defw TYPE_cfa
956F defw BASE_cfa
9571 defw !_cfa
9573 defw ;S_cfa
; [DASMZ80] BHEX._pfa: start 0x9556 end 0x9575 type pointers

952A  ID.BS_nfa: defb 0x05+0x80,"ID.B","S"+0x80
; [DASMZ80] ID.BS_nfa: start 0x952A end 0x9530 type bytedata
9530  ID.BS_lfa: defw MARGIN_nfa
; [DASMZ80] ID.BS_lfa: start 0x9530 end 0x9532 type pointers
9532  ID.BS_cfa: defw 0x6306
; [DASMZ80] ID.BS_cfa: start 0x9532 end 0x9534 type pointers
9534  ID.BS_pfa: 
9534 defw LIT_cfa,0x632F
9538 defw LIT_cfa,0x6B72
953C defw !_cfa
953E defw ID._cfa
9540 defw LIT_cfa,0x65AD
9544 defw LIT_cfa,0x6B72
9548 defw !_cfa
954A defw ;S_cfa
; [DASMZ80] ID.BS_pfa: start 0x9534 end 0x954C type pointers

950B  MARGIN_nfa: defb 0x06+0x80,"MARGI","N"+0x80
; [DASMZ80] MARGIN_nfa: start 0x950B end 0x9512 type bytedata
9512  MARGIN_lfa: defw ADDRESS_nfa
; [DASMZ80] MARGIN_lfa: start 0x9512 end 0x9514 type pointers
9514  MARGIN_cfa: defw 0x6306
; [DASMZ80] MARGIN_cfa: start 0x9514 end 0x9516 type pointers
9516  MARGIN_pfa: 
9516 defw LIT_cfa,0x0005
951A defw BASE_cfa
951C defw @_cfa
951E defw LIT_cfa,0x000A
9522 defw =_cfa
9524 defw +_cfa
9526 defw SPACES_cfa
9528 defw ;S_cfa
; [DASMZ80] MARGIN_pfa: start 0x9516 end 0x952A type pointers

94F9  ADDRESS_nfa: defb 0x07+0x80,"ADDRES","S"+0x80
; [DASMZ80] ADDRESS_nfa: start 0x94F9 end 0x9501 type bytedata
9501  ADDRESS_lfa: defw S+_nfa
; [DASMZ80] ADDRESS_lfa: start 0x9501 end 0x9503 type pointers
9503  ADDRESS_cfa: defw 0x6306
; [DASMZ80] ADDRESS_cfa: start 0x9503 end 0x9505 type pointers
9505  ADDRESS_pfa: 
9505 defw CR_cfa
9507 defw U._cfa
9509 defw ;S_cfa
; [DASMZ80] ADDRESS_pfa: start 0x9505 end 0x950B type pointers

94D2  S+_nfa: defb 0x02+0x80,"S","+"+0x80
; [DASMZ80] S+_nfa: start 0x94D2 end 0x94D5 type bytedata
94D5  S+_lfa: defw SMOVE_nfa
; [DASMZ80] S+_lfa: start 0x94D5 end 0x94D7 type pointers
94D7  S+_cfa: defw 0x6306
; [DASMZ80] S+_cfa: start 0x94D7 end 0x94D9 type pointers
94D9  S+_pfa: 
94D9 defw LENGTHS_cfa
94DB defw +_cfa
94DD defw >R_cfa
94DF defw R_cfa
94E1 defw ALLOCATE-STRING_cfa
94E3 defw >R_cfa
94E5 defw 2_cfa
94E7 defw PICK_cfa
94E9 defw R_cfa
94EB defw +_cfa
94ED defw SMOVE_cfa
94EF defw R_cfa
94F1 defw SMOVE_cfa
94F3 defw R>_cfa
94F5 defw R>_cfa
94F7 defw ;S_cfa
; [DASMZ80] S+_pfa: start 0x94D9 end 0x94F9 type pointers

94C2  SMOVE_nfa: defb 0x05+0x80,"SMOV","E"+0x80
; [DASMZ80] SMOVE_nfa: start 0x94C2 end 0x94C8 type bytedata
94C8  SMOVE_lfa: defw SAVE-COUNTED-STRING_nfa
; [DASMZ80] SMOVE_lfa: start 0x94C8 end 0x94CA type pointers
94CA  SMOVE_cfa: defw 0x6306
; [DASMZ80] SMOVE_cfa: start 0x94CA end 0x94CC type pointers
94CC  SMOVE_pfa: 
94CC defw SWAP_cfa
94CE defw MOVE_cfa
94D0 defw ;S_cfa
; [DASMZ80] SMOVE_pfa: start 0x94CC end 0x94D2 type pointers

939A  SAVE-COUNTED-STRING_nfa: defb 0x13+0x80,"SAVE-COUNTED-STRIN","G"+0x80
; [DASMZ80] SAVE-COUNTED-STRING_nfa: start 0x939A end 0x93AE type bytedata
93AE  SAVE-COUNTED-STRING_lfa: defw SAVE-STRING_nfa
; [DASMZ80] SAVE-COUNTED-STRING_lfa: start 0x93AE end 0x93B0 type pointers
93B0  SAVE-COUNTED-STRING_cfa: defw 0x6306
; [DASMZ80] SAVE-COUNTED-STRING_cfa: start 0x93B0 end 0x93B2 type pointers
93B2  SAVE-COUNTED-STRING_pfa: 
93B2 defw DUP_cfa
93B4 defw 1+_cfa
93B6 defw ALLOCATE-STRING_cfa
93B8 defw DUP_cfa
93BA defw >R_cfa
93BC defw PLACE_cfa
93BE defw R>_cfa
93C0 defw ;S_cfa
; [DASMZ80] SAVE-COUNTED-STRING_pfa: start 0x93B2 end 0x93C2 type pointers

937A  SAVE-STRING_nfa: defb 0x0B+0x80,"SAVE-STRIN","G"+0x80
; [DASMZ80] SAVE-STRING_nfa: start 0x937A end 0x9386 type bytedata
9386  SAVE-STRING_lfa: defw ALLOT-CSB_nfa
; [DASMZ80] SAVE-STRING_lfa: start 0x9386 end 0x9388 type pointers
9388  SAVE-STRING_cfa: defw 0x6306
; [DASMZ80] SAVE-STRING_cfa: start 0x9388 end 0x938A type pointers
938A  SAVE-STRING_pfa: 
938A defw DUP_cfa
938C defw ALLOCATE-STRING_cfa
938E defw SWAP_cfa
9390 defw 2DUP_cfa
9392 defw 2>R_cfa
9394 defw MOVE_cfa
9396 defw 2R>_cfa
9398 defw ;S_cfa
; [DASMZ80] SAVE-STRING_pfa: start 0x938A end 0x939A type pointers

9360  ALLOT-CSB_nfa: defb 0x09+0x80,"ALLOT-CS","B"+0x80
; [DASMZ80] ALLOT-CSB_nfa: start 0x9360 end 0x936A type bytedata
936A  ALLOT-CSB_lfa: defw SET-CSB_nfa
; [DASMZ80] ALLOT-CSB_lfa: start 0x936A end 0x936C type pointers
936C  ALLOT-CSB_cfa: defw 0x6306
; [DASMZ80] ALLOT-CSB_cfa: start 0x936C end 0x936E type pointers
936E  ALLOT-CSB_pfa: 
936E defw HERE_cfa
9370 defw OVER_cfa
9372 defw ALLOT_cfa
9374 defw SWAP_cfa
9376 defw SET-CSB_cfa
9378 defw ;S_cfa
; [DASMZ80] ALLOT-CSB_pfa: start 0x936E end 0x937A type pointers

9340  SET-CSB_nfa: defb 0x07+0x80,"SET-CS","B"+0x80
; [DASMZ80] SET-CSB_nfa: start 0x9340 end 0x9348 type bytedata
9348  SET-CSB_lfa: defw ALLOCATE-STRING_nfa
; [DASMZ80] SET-CSB_lfa: start 0x9348 end 0x934A type pointers
934A  SET-CSB_cfa: defw 0x6306
; [DASMZ80] SET-CSB_cfa: start 0x934A end 0x934C type pointers
934C  SET-CSB_pfa: 
934C defw DUP_cfa
934E defw LIT_cfa,0x92DF
9352 defw !_cfa
9354 defw CSB-UNUSED_cfa
9356 defw !_cfa
9358 defw LIT_cfa,0x92FB
935C defw !_cfa
935E defw ;S_cfa
; [DASMZ80] SET-CSB_pfa: start 0x934C end 0x9360 type pointers

9320  ALLOCATE-STRING_nfa: defb 0x0F+0x80,"ALLOCATE-STRIN","G"+0x80
; [DASMZ80] ALLOCATE-STRING_nfa: start 0x9320 end 0x9330 type bytedata
9330  ALLOCATE-STRING_lfa: defw ?CSB_nfa
; [DASMZ80] ALLOCATE-STRING_lfa: start 0x9330 end 0x9332 type pointers
9332  ALLOCATE-STRING_cfa: defw 0x6306
; [DASMZ80] ALLOCATE-STRING_cfa: start 0x9332 end 0x9334 type pointers
9334  ALLOCATE-STRING_pfa: 
9334 defw ?CSB_cfa
9336 defw CSB0_cfa
9338 defw CSB-UNUSED_cfa
933A defw @_cfa
933C defw +_cfa
933E defw ;S_cfa
; [DASMZ80] ALLOCATE-STRING_pfa: start 0x9334 end 0x9340 type pointers

92FD  ?CSB_nfa: defb 0x04+0x80,"?CS","B"+0x80
; [DASMZ80] ?CSB_nfa: start 0x92FD end 0x9302 type bytedata
9302  ?CSB_lfa: defw CSB0_nfa
; [DASMZ80] ?CSB_lfa: start 0x9302 end 0x9304 type pointers
9304  ?CSB_cfa: defw 0x6306
; [DASMZ80] ?CSB_cfa: start 0x9304 end 0x9306 type pointers
9306  ?CSB_pfa: 
9306 defw DUP_cfa
9308 defw CSB-UNUSED_cfa
930A defw @_cfa
930C defw >_cfa
930E defw 0BRANCH_cfa,0x0008; to 0x9318
9312 defw /CSB_cfa
9314 defw CSB-UNUSED_cfa
9316 defw !_cfa
9318 defw MINUS_cfa
931A defw CSB-UNUSED_cfa
931C defw +!_cfa
931E defw ;S_cfa
; [DASMZ80] ?CSB_pfa: start 0x9306 end 0x9320 type pointers

92F2  CSB0_nfa: defb 0x04+0x80,"CSB","0"+0x80
; [DASMZ80] CSB0_nfa: start 0x92F2 end 0x92F7 type bytedata
92F7  CSB0_lfa: defw CSB-UNUSED_nfa
; [DASMZ80] CSB0_lfa: start 0x92F7 end 0x92F9 type pointers
92F9  CSB0_cfa: defw 0x6348
; [DASMZ80] CSB0_cfa: start 0x92F9 end 0x92FB type pointers
92FB  CSB0_pfa: 
92FB defw 0x93C2
; [DASMZ80] CSB0_pfa: start 0x92FB end 0x92FD type worddata

92E1  CSB-UNUSED_nfa: defb 0x0A+0x80,"CSB-UNUSE","D"+0x80
; [DASMZ80] CSB-UNUSED_nfa: start 0x92E1 end 0x92EC type bytedata
92EC  CSB-UNUSED_lfa: defw /CSB_nfa
; [DASMZ80] CSB-UNUSED_lfa: start 0x92EC end 0x92EE type pointers
92EE  CSB-UNUSED_cfa: defw 0x6362
; [DASMZ80] CSB-UNUSED_cfa: start 0x92EE end 0x92F0 type pointers
92F0  CSB-UNUSED_pfa: 
92F0 defw 0x00C2
; [DASMZ80] CSB-UNUSED_pfa: start 0x92F0 end 0x92F2 type worddata

92D6  /CSB_nfa: defb 0x04+0x80,"/CS","B"+0x80
; [DASMZ80] /CSB_nfa: start 0x92D6 end 0x92DB type bytedata
92DB  /CSB_lfa: defw 2R>_nfa
; [DASMZ80] /CSB_lfa: start 0x92DB end 0x92DD type pointers
92DD  /CSB_cfa: defw 0x6348
; [DASMZ80] /CSB_cfa: start 0x92DD end 0x92DF type pointers
92DF  /CSB_pfa: 
92DF defw 0x0100
; [DASMZ80] /CSB_pfa: start 0x92DF end 0x92E1 type worddata

92B9  2R>_nfa: defb 0x03+0x80,"2R",">"+0x80
; [DASMZ80] 2R>_nfa: start 0x92B9 end 0x92BD type bytedata
92BD  2R>_lfa: defw 2>R_nfa
; [DASMZ80] 2R>_lfa: start 0x92BD end 0x92BF type pointers
92BF  2R>_cfa: defw 2R>_pfa
; [DASMZ80] 2R>_cfa: start 0x92BF end 0x92C1 type pointers
92C1  2R>_pfa: ; Word type not implemented.

929C  2>R_nfa: defb 0x03+0x80,"2>","R"+0x80
; [DASMZ80] 2>R_nfa: start 0x929C end 0x92A0 type bytedata
92A0  2>R_lfa: defw 2R_nfa
; [DASMZ80] 2>R_lfa: start 0x92A0 end 0x92A2 type pointers
92A2  2>R_cfa: defw 2>R_pfa
; [DASMZ80] 2>R_cfa: start 0x92A2 end 0x92A4 type pointers
92A4  2>R_pfa: ; Word type not implemented.

9283  2R_nfa: defb 0x02+0x80,"2","R"+0x80
; [DASMZ80] 2R_nfa: start 0x9283 end 0x9286 type bytedata
9286  2R_lfa: defw RP_nfa
; [DASMZ80] 2R_lfa: start 0x9286 end 0x9288 type pointers
9288  2R_cfa: defw 2R_pfa
; [DASMZ80] 2R_cfa: start 0x9288 end 0x928A type pointers
928A  2R_pfa: ; Word type not implemented.

927A  RP_nfa: defb 0x02+0x80,"R","P"+0x80
; [DASMZ80] RP_nfa: start 0x927A end 0x927D type bytedata
927D  RP_lfa: defw STR=_nfa
; [DASMZ80] RP_lfa: start 0x927D end 0x927F type pointers
927F  RP_cfa: defw 0x6348
; [DASMZ80] RP_cfa: start 0x927F end 0x9281 type pointers
9281  RP_pfa: 
9281 defw 0x5E68
; [DASMZ80] RP_pfa: start 0x9281 end 0x9283 type worddata

9253  STR=_nfa: defb 0x04+0x80,"STR","="+0x80
; [DASMZ80] STR=_nfa: start 0x9253 end 0x9258 type bytedata
9258  STR=_lfa: defw LENGTHS_nfa
; [DASMZ80] STR=_lfa: start 0x9258 end 0x925A type pointers
925A  STR=_cfa: defw 0x6306
; [DASMZ80] STR=_cfa: start 0x925A end 0x925C type pointers
925C  STR=_pfa: 
925C defw LENGTHS_cfa
925E defw -_cfa
9260 defw 0BRANCH_cfa,0x000E; to 0x9270
9264 defw 2DROP_cfa
9266 defw 2DROP_cfa
9268 defw FALSE_cfa
926A defw EXIT_cfa
926C defw BRANCH_cfa,0x000A; to 0x9278
9270 defw DROP_cfa
9272 defw -TEXT_cfa
9274 defw 0=_cfa
9276 defw 0=_cfa
9278 defw ;S_cfa
; [DASMZ80] STR=_pfa: start 0x925C end 0x927A type pointers

923F  LENGTHS_nfa: defb 0x07+0x80,"LENGTH","S"+0x80
; [DASMZ80] LENGTHS_nfa: start 0x923F end 0x9247 type bytedata
9247  LENGTHS_lfa: defw S'_nfa
; [DASMZ80] LENGTHS_lfa: start 0x9247 end 0x9249 type pointers
9249  LENGTHS_cfa: defw 0x6306
; [DASMZ80] LENGTHS_cfa: start 0x9249 end 0x924B type pointers
924B  LENGTHS_pfa: 
924B defw 2_cfa
924D defw PICK_cfa
924F defw OVER_cfa
9251 defw ;S_cfa
; [DASMZ80] LENGTHS_pfa: start 0x924B end 0x9253 type pointers

9230  S'_nfa: defb 0x02+0x80+0x40,"S","'"+0x80
; [DASMZ80] S'_nfa: start 0x9230 end 0x9233 type bytedata
9233  S'_lfa: defw S"_nfa
; [DASMZ80] S'_lfa: start 0x9233 end 0x9235 type pointers
9235  S'_cfa: defw 0x6306
; [DASMZ80] S'_cfa: start 0x9235 end 0x9237 type pointers
9237  S'_pfa: 
9237 defw LIT_cfa,0x0027
923B defw (S)_cfa
923D defw ;S_cfa
; [DASMZ80] S'_pfa: start 0x9237 end 0x923F type pointers

9221  S"_nfa: defb 0x02+0x80+0x40,"S","""+0x80
; [DASMZ80] S"_nfa: start 0x9221 end 0x9224 type bytedata
9224  S"_lfa: defw (S)_nfa
; [DASMZ80] S"_lfa: start 0x9224 end 0x9226 type pointers
9226  S"_cfa: defw 0x6306
; [DASMZ80] S"_cfa: start 0x9226 end 0x9228 type pointers
9228  S"_pfa: 
9228 defw LIT_cfa,0x0022
922C defw (S)_cfa
922E defw ;S_cfa
; [DASMZ80] S"_pfa: start 0x9228 end 0x9230 type pointers

91FB  (S)_nfa: defb 0x03+0x80,"(S",")"+0x80
; [DASMZ80] (S)_nfa: start 0x91FB end 0x91FF type bytedata
91FF  (S)_lfa: defw /STRING_nfa
; [DASMZ80] (S)_lfa: start 0x91FF end 0x9201 type pointers
9201  (S)_cfa: defw 0x6306
; [DASMZ80] (S)_cfa: start 0x9201 end 0x9203 type pointers
9203  (S)_pfa: 
9203 defw STATE_cfa
9205 defw @_cfa
9207 defw 0BRANCH_cfa,0x0014; to 0x921D
920B defw COMPILE_cfa,SLIT_cfa
920F defw WORD_cfa
9211 defw HERE_cfa
9213 defw C@_cfa
9215 defw 1+_cfa
9217 defw ALLOT_cfa
9219 defw BRANCH_cfa,0x0004; to 0x921F
921D defw PARSE-TEXT_cfa
921F defw ;S_cfa
; [DASMZ80] (S)_pfa: start 0x9203 end 0x9221 type pointers

91DF  /STRING_nfa: defb 0x07+0x80,"/STRIN","G"+0x80
; [DASMZ80] /STRING_nfa: start 0x91DF end 0x91E7 type bytedata
91E7  /STRING_lfa: defw +PLACE_nfa
; [DASMZ80] /STRING_lfa: start 0x91E7 end 0x91E9 type pointers
91E9  /STRING_cfa: defw 0x6306
; [DASMZ80] /STRING_cfa: start 0x91E9 end 0x91EB type pointers
91EB  /STRING_pfa: 
91EB defw DUP_cfa
91ED defw >R_cfa
91EF defw -_cfa
91F1 defw SWAP_cfa
91F3 defw R>_cfa
91F5 defw +_cfa
91F7 defw SWAP_cfa
91F9 defw ;S_cfa
; [DASMZ80] /STRING_pfa: start 0x91EB end 0x91FB type pointers

91BC  +PLACE_nfa: defb 0x06+0x80,"+PLAC","E"+0x80
; [DASMZ80] +PLACE_nfa: start 0x91BC end 0x91C3 type bytedata
91C3  +PLACE_lfa: defw PLACE_nfa
; [DASMZ80] +PLACE_lfa: start 0x91C3 end 0x91C5 type pointers
91C5  +PLACE_cfa: defw 0x6306
; [DASMZ80] +PLACE_cfa: start 0x91C5 end 0x91C7 type pointers
91C7  +PLACE_pfa: 
91C7 defw 2DUP_cfa
91C9 defw C@_cfa
91CB defw +_cfa
91CD defw OVER_cfa
91CF defw C!_cfa
91D1 defw DUP_cfa
91D3 defw C@_cfa
91D5 defw 1+_cfa
91D7 defw +_cfa
91D9 defw SWAP_cfa
91DB defw MOVE_cfa
91DD defw ;S_cfa
; [DASMZ80] +PLACE_pfa: start 0x91C7 end 0x91DF type pointers

91A6  PLACE_nfa: defb 0x05+0x80,"PLAC","E"+0x80
; [DASMZ80] PLACE_nfa: start 0x91A6 end 0x91AC type bytedata
91AC  PLACE_lfa: defw SLITERAL_nfa
; [DASMZ80] PLACE_lfa: start 0x91AC end 0x91AE type pointers
91AE  PLACE_cfa: defw 0x6306
; [DASMZ80] PLACE_cfa: start 0x91AE end 0x91B0 type pointers
91B0  PLACE_pfa: 
91B0 defw 2DUP_cfa
91B2 defw C!_cfa
91B4 defw 1+_cfa
91B6 defw SWAP_cfa
91B8 defw MOVE_cfa
91BA defw ;S_cfa
; [DASMZ80] PLACE_pfa: start 0x91B0 end 0x91BC type pointers

9191  SLITERAL_nfa: defb 0x08+0x80+0x40,"SLITERA","L"+0x80
; [DASMZ80] SLITERAL_nfa: start 0x9191 end 0x919A type bytedata
919A  SLITERAL_lfa: defw S,_nfa
; [DASMZ80] SLITERAL_lfa: start 0x919A end 0x919C type pointers
919C  SLITERAL_cfa: defw 0x6306
; [DASMZ80] SLITERAL_cfa: start 0x919C end 0x919E type pointers
919E  SLITERAL_pfa: 
919E defw COMPILE_cfa,SLIT_cfa
91A2 defw S,_cfa
91A4 defw ;S_cfa
; [DASMZ80] SLITERAL_pfa: start 0x919E end 0x91A6 type pointers

917C  S,_nfa: defb 0x02+0x80,"S",","+0x80
; [DASMZ80] S,_nfa: start 0x917C end 0x917F type bytedata
917F  S,_lfa: defw SLIT_nfa
; [DASMZ80] S,_lfa: start 0x917F end 0x9181 type pointers
9181  S,_cfa: defw 0x6306
; [DASMZ80] S,_cfa: start 0x9181 end 0x9183 type pointers
9183  S,_pfa: 
9183 defw SWAP_cfa
9185 defw HERE_cfa
9187 defw ROT_cfa
9189 defw CMOVE_cfa
918B defw 1+_cfa
918D defw ALLOT_cfa
918F defw ;S_cfa
; [DASMZ80] S,_pfa: start 0x9183 end 0x9191 type pointers

9163  SLIT_nfa: defb 0x04+0x80,"SLI","T"+0x80
; [DASMZ80] SLIT_nfa: start 0x9163 end 0x9168 type bytedata
9168  SLIT_lfa: defw PARSE-NAME_nfa
; [DASMZ80] SLIT_lfa: start 0x9168 end 0x916A type pointers
916A  SLIT_cfa: defw 0x6306
; [DASMZ80] SLIT_cfa: start 0x916A end 0x916C type pointers
916C  SLIT_pfa: 
916C defw R_cfa
916E defw COUNT_cfa
9170 defw DUP_cfa
9172 defw 1+_cfa
9174 defw R>_cfa
9176 defw +_cfa
9178 defw >R_cfa
917A defw ;S_cfa
; [DASMZ80] SLIT_pfa: start 0x916C end 0x917C type pointers

914E  PARSE-NAME_nfa: defb 0x0A+0x80,"PARSE-NAM","E"+0x80
; [DASMZ80] PARSE-NAME_nfa: start 0x914E end 0x9159 type bytedata
9159  PARSE-NAME_lfa: defw PARSE-TEXT_nfa
; [DASMZ80] PARSE-NAME_lfa: start 0x9159 end 0x915B type pointers
915B  PARSE-NAME_cfa: defw 0x6306
; [DASMZ80] PARSE-NAME_cfa: start 0x915B end 0x915D type pointers
915D  PARSE-NAME_pfa: 
915D defw BL_cfa
915F defw PARSE-TEXT_cfa
9161 defw ;S_cfa
; [DASMZ80] PARSE-NAME_pfa: start 0x915D end 0x9163 type pointers

9137  PARSE-TEXT_nfa: defb 0x0A+0x80,"PARSE-TEX","T"+0x80
; [DASMZ80] PARSE-TEXT_nfa: start 0x9137 end 0x9142 type bytedata
9142  PARSE-TEXT_lfa: defw PICK_nfa
; [DASMZ80] PARSE-TEXT_lfa: start 0x9142 end 0x9144 type pointers
9144  PARSE-TEXT_cfa: defw 0x6306
; [DASMZ80] PARSE-TEXT_cfa: start 0x9144 end 0x9146 type pointers
9146  PARSE-TEXT_pfa: 
9146 defw TEXT_cfa
9148 defw PAD_cfa
914A defw COUNT_cfa
914C defw ;S_cfa
; [DASMZ80] PARSE-TEXT_pfa: start 0x9146 end 0x914E type pointers

9124  PICK_nfa: defb 0x04+0x80,"PIC","K"+0x80
; [DASMZ80] PICK_nfa: start 0x9124 end 0x9129 type bytedata
9129  PICK_lfa: defw ?EXIT_nfa
; [DASMZ80] PICK_lfa: start 0x9129 end 0x912B type pointers
912B  PICK_cfa: defw PICK_pfa
; [DASMZ80] PICK_cfa: start 0x912B end 0x912D type pointers
912D  PICK_pfa: ; Word type not implemented.

9110  ?EXIT_nfa: defb 0x05+0x80+0x40,"?EXI","T"+0x80
; [DASMZ80] ?EXIT_nfa: start 0x9110 end 0x9116 type bytedata
9116  ?EXIT_lfa: defw OFF_nfa
; [DASMZ80] ?EXIT_lfa: start 0x9116 end 0x9118 type pointers
9118  ?EXIT_cfa: defw 0x6306
; [DASMZ80] ?EXIT_cfa: start 0x9118 end 0x911A type pointers
911A  ?EXIT_pfa: 
911A defw IF_cfa
911C defw COMPILE_cfa,EXIT_cfa
9120 defw THEN_cfa
9122 defw ;S_cfa
; [DASMZ80] ?EXIT_pfa: start 0x911A end 0x9124 type pointers

9100  OFF_nfa: defb 0x03+0x80,"OF","F"+0x80
; [DASMZ80] OFF_nfa: start 0x9100 end 0x9104 type bytedata
9104  OFF_lfa: defw ON_nfa
; [DASMZ80] OFF_lfa: start 0x9104 end 0x9106 type pointers
9106  OFF_cfa: defw OFF_pfa
; [DASMZ80] OFF_cfa: start 0x9106 end 0x9108 type pointers
9108  OFF_pfa: ; Word type not implemented.

90F0  ON_nfa: defb 0x02+0x80,"O","N"+0x80
; [DASMZ80] ON_nfa: start 0x90F0 end 0x90F3 type bytedata
90F3  ON_lfa: defw TRUE_nfa
; [DASMZ80] ON_lfa: start 0x90F3 end 0x90F5 type pointers
90F5  ON_cfa: defw ON_pfa
; [DASMZ80] ON_cfa: start 0x90F5 end 0x90F7 type pointers
90F7  ON_pfa: ; Word type not implemented.

90E5  TRUE_nfa: defb 0x04+0x80,"TRU","E"+0x80
; [DASMZ80] TRUE_nfa: start 0x90E5 end 0x90EA type bytedata
90EA  TRUE_lfa: defw FALSE_nfa
; [DASMZ80] TRUE_lfa: start 0x90EA end 0x90EC type pointers
90EC  TRUE_cfa: defw 0x6348
; [DASMZ80] TRUE_cfa: start 0x90EC end 0x90EE type pointers
90EE  TRUE_pfa: 
90EE defw 0x0001
; [DASMZ80] TRUE_pfa: start 0x90EE end 0x90F0 type worddata

90D9  FALSE_nfa: defb 0x05+0x80,"FALS","E"+0x80
; [DASMZ80] FALSE_nfa: start 0x90D9 end 0x90DF type bytedata
90DF  FALSE_lfa: defw MOVE_nfa
; [DASMZ80] FALSE_lfa: start 0x90DF end 0x90E1 type pointers
90E1  FALSE_cfa: defw 0x6348
; [DASMZ80] FALSE_cfa: start 0x90E1 end 0x90E3 type pointers
90E3  FALSE_pfa: 
90E3 defw 0x0000
; [DASMZ80] FALSE_pfa: start 0x90E3 end 0x90E5 type worddata

90B6  MOVE_nfa: defb 0x04+0x80,"MOV","E"+0x80
; [DASMZ80] MOVE_nfa: start 0x90B6 end 0x90BB type bytedata
90BB  MOVE_lfa: defw CMOVE>_nfa
; [DASMZ80] MOVE_lfa: start 0x90BB end 0x90BD type pointers
90BD  MOVE_cfa: defw 0x6306
; [DASMZ80] MOVE_cfa: start 0x90BD end 0x90BF type pointers
90BF  MOVE_pfa: 
90BF defw >R_cfa
90C1 defw 2DUP_cfa
90C3 defw -_cfa
90C5 defw 0<_cfa
90C7 defw 0BRANCH_cfa,0x000A; to 0x90D3
90CB defw R>_cfa
90CD defw CMOVE>_cfa
90CF defw BRANCH_cfa,0x0006; to 0x90D7
90D3 defw R>_cfa
90D5 defw CMOVE_cfa
90D7 defw ;S_cfa
; [DASMZ80] MOVE_pfa: start 0x90BF end 0x90D9 type pointers

9097  CMOVE>_nfa: defb 0x06+0x80,"CMOVE",">"+0x80
; [DASMZ80] CMOVE>_nfa: start 0x9097 end 0x909E type bytedata
909E  CMOVE>_lfa: defw -CASEINS_nfa
; [DASMZ80] CMOVE>_lfa: start 0x909E end 0x90A0 type pointers
90A0  CMOVE>_cfa: defw CMOVE>_pfa
; [DASMZ80] CMOVE>_cfa: start 0x90A0 end 0x90A2 type pointers
90A2  CMOVE>_pfa: ; Word type not implemented.

907E  -CASEINS_nfa: defb 0x08+0x80,"-CASEIN","S"+0x80
; [DASMZ80] -CASEINS_nfa: start 0x907E end 0x9087 type bytedata
9087  -CASEINS_lfa: defw +CASEINS_nfa
; [DASMZ80] -CASEINS_lfa: start 0x9087 end 0x9089 type pointers
9089  -CASEINS_cfa: defw 0x6306
; [DASMZ80] -CASEINS_cfa: start 0x9089 end 0x908B type pointers
908B  -CASEINS_pfa: 
908B defw LIT_cfa,0x69CF
908F defw LIT_cfa,0x6AC7
9093 defw !_cfa
9095 defw ;S_cfa
; [DASMZ80] -CASEINS_pfa: start 0x908B end 0x9097 type pointers

9065  +CASEINS_nfa: defb 0x08+0x80,"+CASEIN","S"+0x80
; [DASMZ80] +CASEINS_nfa: start 0x9065 end 0x906E type bytedata
906E  +CASEINS_lfa: defw UPPER-WORD_nfa
; [DASMZ80] +CASEINS_lfa: start 0x906E end 0x9070 type pointers
9070  +CASEINS_cfa: defw 0x6306
; [DASMZ80] +CASEINS_cfa: start 0x9070 end 0x9072 type pointers
9072  +CASEINS_pfa: 
9072 defw LIT_cfa,0x9059
9076 defw LIT_cfa,0x6AC7
907A defw !_cfa
907C defw ;S_cfa
; [DASMZ80] +CASEINS_pfa: start 0x9072 end 0x907E type pointers

904C  UPPER-WORD_nfa: defb 0x0A+0x80,"UPPER-WOR","D"+0x80
; [DASMZ80] UPPER-WORD_nfa: start 0x904C end 0x9057 type bytedata
9057  UPPER-WORD_lfa: defw UPPERS_nfa
; [DASMZ80] UPPER-WORD_lfa: start 0x9057 end 0x9059 type pointers
9059  UPPER-WORD_cfa: defw 0x6306
; [DASMZ80] UPPER-WORD_cfa: start 0x9059 end 0x905B type pointers
905B  UPPER-WORD_pfa: 
905B defw WORD_cfa
905D defw HERE_cfa
905F defw COUNT_cfa
9061 defw UPPERS_cfa
9063 defw ;S_cfa
; [DASMZ80] UPPER-WORD_pfa: start 0x905B end 0x9065 type pointers

902D  UPPERS_nfa: defb 0x06+0x80,"UPPER","S"+0x80
; [DASMZ80] UPPERS_nfa: start 0x902D end 0x9034 type bytedata
9034  UPPERS_lfa: defw UPPERC_nfa
; [DASMZ80] UPPERS_lfa: start 0x9034 end 0x9036 type pointers
9036  UPPERS_cfa: defw 0x6306
; [DASMZ80] UPPERS_cfa: start 0x9036 end 0x9038 type pointers
9038  UPPERS_pfa: 
9038 defw BOUNDS_cfa
903A defw (DO)_cfa
903C defw I_cfa
903E defw C@_cfa
9040 defw UPPERC_cfa
9042 defw I_cfa
9044 defw C!_cfa
9046 defw (LOOP)_cfa,0xFFF4; to 0x903C
904A defw ;S_cfa
; [DASMZ80] UPPERS_pfa: start 0x9038 end 0x904C type pointers

9012  UPPERC_nfa: defb 0x06+0x80,"UPPER","C"+0x80
; [DASMZ80] UPPERC_nfa: start 0x9012 end 0x9019 type bytedata
9019  UPPERC_lfa: defw (BANK-TAPE)_nfa
; [DASMZ80] UPPERC_lfa: start 0x9019 end 0x901B type pointers
901B  UPPERC_cfa: defw UPPERC_pfa
; [DASMZ80] UPPERC_cfa: start 0x901B end 0x901D type pointers
901D  UPPERC_pfa: ; Word type not implemented.

8FF6  (BANK-TAPE)_nfa: defb 0x0B+0x80,"(BANK-TAPE",")"+0x80
; [DASMZ80] (BANK-TAPE)_nfa: start 0x8FF6 end 0x9002 type bytedata
9002  (BANK-TAPE)_lfa: defw (INIT-DISC)_nfa
; [DASMZ80] (BANK-TAPE)_lfa: start 0x9002 end 0x9004 type pointers
9004  (BANK-TAPE)_cfa: defw 0x6306
; [DASMZ80] (BANK-TAPE)_cfa: start 0x9004 end 0x9006 type pointers
9006  (BANK-TAPE)_pfa: 
9006 defw DISC-BANK_cfa
9008 defw BANK_cfa
900A defw (TAPE)_cfa
900C defw 0_cfa
900E defw BANK_cfa
9010 defw ;S_cfa
; [DASMZ80] (BANK-TAPE)_pfa: start 0x9006 end 0x9012 type pointers

8FDE  (INIT-DISC)_nfa: defb 0x0B+0x80,"(INIT-DISC",")"+0x80
; [DASMZ80] (INIT-DISC)_nfa: start 0x8FDE end 0x8FEA type bytedata
8FEA  (INIT-DISC)_lfa: defw DISC-BANK_nfa
; [DASMZ80] (INIT-DISC)_lfa: start 0x8FEA end 0x8FEC type pointers
8FEC  (INIT-DISC)_cfa: defw 0x6306
; [DASMZ80] (INIT-DISC)_cfa: start 0x8FEC end 0x8FEE type pointers
8FEE  (INIT-DISC)_pfa: 
8FEE defw LO_cfa
8FF0 defw /DISC_cfa
8FF2 defw BLANKS_cfa
8FF4 defw ;S_cfa
; [DASMZ80] (INIT-DISC)_pfa: start 0x8FEE end 0x8FF6 type pointers

8FC2  DISC-BANK_nfa: defb 0x09+0x80,"DISC-BAN","K"+0x80
; [DASMZ80] DISC-BANK_nfa: start 0x8FC2 end 0x8FCC type bytedata
8FCC  DISC-BANK_lfa: defw DR1_nfa
; [DASMZ80] DISC-BANK_lfa: start 0x8FCC end 0x8FCE type pointers
8FCE  DISC-BANK_cfa: defw 0x6306
; [DASMZ80] DISC-BANK_cfa: start 0x8FCE end 0x8FD0 type pointers
8FD0  DISC-BANK_pfa: 
8FD0 defw 1_cfa
8FD2 defw OFFSET_cfa
8FD4 defw @_cfa
8FD6 defw 2_cfa
8FD8 defw *_cfa
8FDA defw +_cfa
8FDC defw ;S_cfa
; [DASMZ80] DISC-BANK_pfa: start 0x8FD0 end 0x8FDE type pointers

8FAE  DR1_nfa: defb 0x03+0x80,"DR","1"+0x80
; [DASMZ80] DR1_nfa: start 0x8FAE end 0x8FB2 type bytedata
8FB2  DR1_lfa: defw BANK_nfa
; [DASMZ80] DR1_lfa: start 0x8FB2 end 0x8FB4 type pointers
8FB4  DR1_cfa: defw 0x6306
; [DASMZ80] DR1_cfa: start 0x8FB4 end 0x8FB6 type pointers
8FB6  DR1_pfa: 
8FB6 defw SCR/DR_cfa
8FB8 defw B/SCR_cfa
8FBA defw *_cfa
8FBC defw OFFSET_cfa
8FBE defw !_cfa
8FC0 defw ;S_cfa
; [DASMZ80] DR1_pfa: start 0x8FB6 end 0x8FC2 type pointers

8F89  BANK_nfa: defb 0x04+0x80,"BAN","K"+0x80
; [DASMZ80] BANK_nfa: start 0x8F89 end 0x8F8E type bytedata
8F8E  BANK_lfa: defw BANK1-PORT_nfa
; [DASMZ80] BANK_lfa: start 0x8F8E end 0x8F90 type pointers
8F90  BANK_cfa: defw 0x6306
; [DASMZ80] BANK_cfa: start 0x8F90 end 0x8F92 type pointers
8F92  BANK_pfa: 
8F92 defw -INTERRUPTS_cfa
8F94 defw SYS-BANKM_cfa
8F96 defw C@_cfa
8F98 defw LIT_cfa,0x00F8
8F9C defw AND_cfa
8F9E defw OR_cfa
8FA0 defw DUP_cfa
8FA2 defw SYS-BANKM_cfa
8FA4 defw C!_cfa
8FA6 defw BANK1-PORT_cfa
8FA8 defw OUTP_cfa
8FAA defw +INTERRUPTS_cfa
8FAC defw ;S_cfa
; [DASMZ80] BANK_pfa: start 0x8F92 end 0x8FAE type pointers

8F78  BANK1-PORT_nfa: defb 0x0A+0x80,"BANK1-POR","T"+0x80
; [DASMZ80] BANK1-PORT_nfa: start 0x8F78 end 0x8F83 type bytedata
8F83  BANK1-PORT_lfa: defw SYS-BANKM_nfa
; [DASMZ80] BANK1-PORT_lfa: start 0x8F83 end 0x8F85 type pointers
8F85  BANK1-PORT_cfa: defw 0x6348
; [DASMZ80] BANK1-PORT_cfa: start 0x8F85 end 0x8F87 type pointers
8F87  BANK1-PORT_pfa: 
8F87 defw 0x7FFD
; [DASMZ80] BANK1-PORT_pfa: start 0x8F87 end 0x8F89 type worddata

8F68  SYS-BANKM_nfa: defb 0x09+0x80,"SYS-BANK","M"+0x80
; [DASMZ80] SYS-BANKM_nfa: start 0x8F68 end 0x8F72 type bytedata
8F72  SYS-BANKM_lfa: defw +INTERRUPTS_nfa
; [DASMZ80] SYS-BANKM_lfa: start 0x8F72 end 0x8F74 type pointers
8F74  SYS-BANKM_cfa: defw 0x6348
; [DASMZ80] SYS-BANKM_cfa: start 0x8F74 end 0x8F76 type pointers
8F76  SYS-BANKM_pfa: 
8F76 defw 0x5B5C
; [DASMZ80] SYS-BANKM_pfa: start 0x8F76 end 0x8F78 type worddata

8F54  +INTERRUPTS_nfa: defb 0x0B+0x80,"+INTERRUPT","S"+0x80
; [DASMZ80] +INTERRUPTS_nfa: start 0x8F54 end 0x8F60 type bytedata
8F60  +INTERRUPTS_lfa: defw -INTERRUPTS_nfa
; [DASMZ80] +INTERRUPTS_lfa: start 0x8F60 end 0x8F62 type pointers
8F62  +INTERRUPTS_cfa: defw +INTERRUPTS_pfa
; [DASMZ80] +INTERRUPTS_cfa: start 0x8F62 end 0x8F64 type pointers
8F64  +INTERRUPTS_pfa: ; Word type not implemented.

8F40  -INTERRUPTS_nfa: defb 0x0B+0x80,"-INTERRUPT","S"+0x80
; [DASMZ80] -INTERRUPTS_nfa: start 0x8F40 end 0x8F4C type bytedata
8F4C  -INTERRUPTS_lfa: defw DECODE_nfa
; [DASMZ80] -INTERRUPTS_lfa: start 0x8F4C end 0x8F4E type pointers
8F4E  -INTERRUPTS_cfa: defw -INTERRUPTS_pfa
; [DASMZ80] -INTERRUPTS_cfa: start 0x8F4E end 0x8F50 type pointers
8F50  -INTERRUPTS_pfa: ; Word type not implemented.

899F  DECODE_nfa: defb 0x06+0x80,"DECOD","E"+0x80
; [DASMZ80] DECODE_nfa: start 0x899F end 0x89A6 type bytedata
89A6  DECODE_lfa: defw DECODE-USAGE_nfa
; [DASMZ80] DECODE_lfa: start 0x89A6 end 0x89A8 type pointers
89A8  DECODE_cfa: defw 0x6306
; [DASMZ80] DECODE_cfa: start 0x89A8 end 0x89AA type pointers
89AA  DECODE_pfa: 
89AA defw DECODE-USAGE_cfa
89AC defw -FIND_cfa
89AE defw 0BRANCH_cfa,0x0010; to 0x89C0
89B2 defw DROP_cfa
89B4 defw 0_cfa
89B6 defw DECODE-LEVEL_cfa
89B8 defw !_cfa
89BA defw (DECODE)_cfa
89BC defw BRANCH_cfa,0x000E; to 0x89CC
89C0 defw (.")_cfa
89C2 defb 0x09,"Not Found"
89CC defw ;S_cfa
; [DASMZ80] DECODE_pfa: start 0x89AA end 0x89CE type pointers

895E  DECODE-USAGE_nfa: defb 0x0C+0x80,"DECODE-USAG","E"+0x80
; [DASMZ80] DECODE-USAGE_nfa: start 0x895E end 0x896B type bytedata
896B  DECODE-USAGE_lfa: defw (DECODE)_nfa
; [DASMZ80] DECODE-USAGE_lfa: start 0x896B end 0x896D type pointers
896D  DECODE-USAGE_cfa: defw 0x6306
; [DASMZ80] DECODE-USAGE_cfa: start 0x896D end 0x896F type pointers
896F  DECODE-USAGE_pfa: 
896F defw CR_cfa
8971 defw (.")_cfa
8973 defb 0x27,"Keys: Space=more, Q=quit, other=deeper."
899B defw CR_cfa
899D defw ;S_cfa
; [DASMZ80] DECODE-USAGE_pfa: start 0x896F end 0x899F type pointers

88AC  (DECODE)_nfa: defb 0x08+0x80,"(DECODE",")"+0x80
; [DASMZ80] (DECODE)_nfa: start 0x88AC end 0x88B5 type bytedata
88B5  (DECODE)_lfa: defw COLON-PFA?_nfa
; [DASMZ80] (DECODE)_lfa: start 0x88B5 end 0x88B7 type pointers
88B7  (DECODE)_cfa: defw 0x6306
; [DASMZ80] (DECODE)_cfa: start 0x88B7 end 0x88B9 type pointers
88B9  (DECODE)_pfa: 
88B9 defw DUP_cfa
88BB defw COLON-PFA?_cfa
88BD defw 0BRANCH_cfa,0x0081; to 0x8940
88C1 defw DUP_cfa
88C3 defw NFA_cfa
88C5 defw DECODE-ADDRESS_cfa
88C7 defw !_cfa
88C9 defw INDENT_cfa
88CB defw (.")_cfa
88CD defb 0x02,": "
88D0 defw DUP_cfa
88D2 defw NFA_cfa
88D4 defw ID._cfa
88D6 defw DUP_cfa
88D8 defw DECODE-ADDRESS_cfa
88DA defw !_cfa
88DC defw DUP_cfa
88DE defw @_cfa
88E0 defw DUP_cfa
88E2 defw DECODE-END?_cfa
88E4 defw 0=_cfa
88E6 defw 0BRANCH_cfa,0x004C; to 0x8934
88EA defw 2+_cfa
88EC defw DUP_cfa
88EE defw INDENT+_cfa
88F0 defw NFA_cfa
88F2 defw ID._cfa
88F4 defw KEY_cfa
88F6 defw LIT_cfa,0x0051
88FA defw OVER_cfa
88FC defw =_cfa
88FE defw 0BRANCH_cfa,0x000C; to 0x890C
8902 defw DROP_cfa
8904 defw SP!_cfa
8906 defw QUIT_cfa
8908 defw BRANCH_cfa,0x001A; to 0x8924
890C defw BL_cfa
890E defw OVER_cfa
8910 defw =_cfa
8912 defw 0BRANCH_cfa,0x000A; to 0x891E
8916 defw DROP_cfa
8918 defw DROP_cfa
891A defw BRANCH_cfa,0x0008; to 0x8924
891E defw SWAP_cfa
8920 defw (DECODE)_cfa
8922 defw DROP_cfa
8924 defw DECODE-SPECIAL-CASES_cfa
8926 defw 2+_cfa
8928 defw LIT_cfa,0xFFFF
892C defw DECODE-LEVEL_cfa
892E defw +!_cfa
8930 defw BRANCH_cfa,0xFFA4; to 0x88D6
8934 defw INDENT_cfa
8936 defw 2+_cfa
8938 defw NFA_cfa
893A defw ID._cfa
893C defw BRANCH_cfa,0x001C; to 0x895A
8940 defw (.")_cfa
8942 defb 0x17,"Not a colon definition."
895A defw DROP_cfa
895C defw ;S_cfa
; [DASMZ80] (DECODE)_pfa: start 0x88B9 end 0x895E type pointers

888D  COLON-PFA?_nfa: defb 0x0A+0x80,"COLON-PFA","?"+0x80
; [DASMZ80] COLON-PFA?_nfa: start 0x888D end 0x8898 type bytedata
8898  COLON-PFA?_lfa: defw DECODE-END?_nfa
; [DASMZ80] COLON-PFA?_lfa: start 0x8898 end 0x889A type pointers
889A  COLON-PFA?_cfa: defw 0x6306
; [DASMZ80] COLON-PFA?_cfa: start 0x889A end 0x889C type pointers
889C  COLON-PFA?_pfa: 
889C defw CFA_cfa
889E defw @_cfa
88A0 defw LIT_cfa,0x62F4
88A4 defw CFA_cfa
88A6 defw @_cfa
88A8 defw =_cfa
88AA defw ;S_cfa
; [DASMZ80] COLON-PFA?_pfa: start 0x889C end 0x88AC type pointers

8865  DECODE-END?_nfa: defb 0x0B+0x80,"DECODE-END","?"+0x80
; [DASMZ80] DECODE-END?_nfa: start 0x8865 end 0x8871 type bytedata
8871  DECODE-END?_lfa: defw DECODE-SPECIAL-CASES_nfa
; [DASMZ80] DECODE-END?_lfa: start 0x8871 end 0x8873 type pointers
8873  DECODE-END?_cfa: defw 0x6306
; [DASMZ80] DECODE-END?_cfa: start 0x8873 end 0x8875 type pointers
8875  DECODE-END?_pfa: 
8875 defw DUP_cfa
8877 defw LIT_cfa,0x614A
887B defw CFA_cfa
887D defw =_cfa
887F defw SWAP_cfa
8881 defw LIT_cfa,0x6770
8885 defw CFA_cfa
8887 defw =_cfa
8889 defw OR_cfa
888B defw ;S_cfa
; [DASMZ80] DECODE-END?_pfa: start 0x8875 end 0x888D type pointers

87B8  DECODE-SPECIAL-CASES_nfa: defb 0x14+0x80,"DECODE-SPECIAL-CASE","S"+0x80
; [DASMZ80] DECODE-SPECIAL-CASES_nfa: start 0x87B8 end 0x87CD type bytedata
87CD  DECODE-SPECIAL-CASES_lfa: defw DECODE-DOT-QUOTE_nfa
; [DASMZ80] DECODE-SPECIAL-CASES_lfa: start 0x87CD end 0x87CF type pointers
87CF  DECODE-SPECIAL-CASES_cfa: defw 0x6306
; [DASMZ80] DECODE-SPECIAL-CASES_cfa: start 0x87CF end 0x87D1 type pointers
87D1  DECODE-SPECIAL-CASES_pfa: 
87D1 defw DUP_cfa
87D3 defw @_cfa
87D5 defw LIT_cfa,0x66F7
87D9 defw OVER_cfa
87DB defw =_cfa
87DD defw 0BRANCH_cfa,0x000A; to 0x87E9
87E1 defw DROP_cfa
87E3 defw DECODE-COMPILE_cfa
87E5 defw BRANCH_cfa,0x007C; to 0x8863
87E9 defw LIT_cfa,0x5E7D
87ED defw OVER_cfa
87EF defw =_cfa
87F1 defw 0BRANCH_cfa,0x000A; to 0x87FD
87F5 defw DROP_cfa
87F7 defw DECODE-LITERAL_cfa
87F9 defw BRANCH_cfa,0x0068; to 0x8863
87FD defw LIT_cfa,0x5EA1
8801 defw OVER_cfa
8803 defw =_cfa
8805 defw 0BRANCH_cfa,0x000A; to 0x8811
8809 defw DROP_cfa
880B defw DECODE-BRANCH_cfa
880D defw BRANCH_cfa,0x0054; to 0x8863
8811 defw LIT_cfa,0x5EB9
8815 defw OVER_cfa
8817 defw =_cfa
8819 defw 0BRANCH_cfa,0x000A; to 0x8825
881D defw DROP_cfa
881F defw DECODE-BRANCH_cfa
8821 defw BRANCH_cfa,0x0040; to 0x8863
8825 defw LIT_cfa,0x5ECE
8829 defw OVER_cfa
882B defw =_cfa
882D defw 0BRANCH_cfa,0x000A; to 0x8839
8831 defw DROP_cfa
8833 defw DECODE-BRANCH_cfa
8835 defw BRANCH_cfa,0x002C; to 0x8863
8839 defw LIT_cfa,0x5F08
883D defw OVER_cfa
883F defw =_cfa
8841 defw 0BRANCH_cfa,0x000A; to 0x884D
8845 defw DROP_cfa
8847 defw DECODE-BRANCH_cfa
8849 defw BRANCH_cfa,0x0018; to 0x8863
884D defw LIT_cfa,0x6847
8851 defw OVER_cfa
8853 defw =_cfa
8855 defw 0BRANCH_cfa,0x000A; to 0x8861
8859 defw DROP_cfa
885B defw DECODE-DOT-QUOTE_cfa
885D defw BRANCH_cfa,0x0004; to 0x8863
8861 defw DROP_cfa
8863 defw ;S_cfa
; [DASMZ80] DECODE-SPECIAL-CASES_pfa: start 0x87D1 end 0x8865 type pointers

878F  DECODE-DOT-QUOTE_nfa: defb 0x10+0x80,"DECODE-DOT-QUOT","E"+0x80
; [DASMZ80] DECODE-DOT-QUOTE_nfa: start 0x878F end 0x87A0 type bytedata
87A0  DECODE-DOT-QUOTE_lfa: defw DECODE-BRANCH_nfa
; [DASMZ80] DECODE-DOT-QUOTE_lfa: start 0x87A0 end 0x87A2 type pointers
87A2  DECODE-DOT-QUOTE_cfa: defw 0x6306
; [DASMZ80] DECODE-DOT-QUOTE_cfa: start 0x87A2 end 0x87A4 type pointers
87A4  DECODE-DOT-QUOTE_pfa: 
87A4 defw 2+_cfa
87A6 defw DUP_cfa
87A8 defw COUNT_cfa
87AA defw TYPE_cfa
87AC defw DUP_cfa
87AE defw C@_cfa
87B0 defw +_cfa
87B2 defw 1_cfa
87B4 defw -_cfa
87B6 defw ;S_cfa
; [DASMZ80] DECODE-DOT-QUOTE_pfa: start 0x87A4 end 0x87B8 type pointers

8766  DECODE-BRANCH_nfa: defb 0x0D+0x80,"DECODE-BRANC","H"+0x80
; [DASMZ80] DECODE-BRANCH_nfa: start 0x8766 end 0x8774 type bytedata
8774  DECODE-BRANCH_lfa: defw DECODE-LITERAL_nfa
; [DASMZ80] DECODE-BRANCH_lfa: start 0x8774 end 0x8776 type pointers
8776  DECODE-BRANCH_cfa: defw 0x6306
; [DASMZ80] DECODE-BRANCH_cfa: start 0x8776 end 0x8778 type pointers
8778  DECODE-BRANCH_pfa: 
8778 defw DECODE-LITERAL_cfa
877A defw (.")_cfa
877C defb 0x06," \ to "
8783 defw DUP_cfa
8785 defw DUP_cfa
8787 defw @_cfa
8789 defw +_cfa
878B defw U._cfa
878D defw ;S_cfa
; [DASMZ80] DECODE-BRANCH_pfa: start 0x8778 end 0x878F type pointers

8749  DECODE-LITERAL_nfa: defb 0x0E+0x80,"DECODE-LITERA","L"+0x80
; [DASMZ80] DECODE-LITERAL_nfa: start 0x8749 end 0x8758 type bytedata
8758  DECODE-LITERAL_lfa: defw DECODE-COMPILE_nfa
; [DASMZ80] DECODE-LITERAL_lfa: start 0x8758 end 0x875A type pointers
875A  DECODE-LITERAL_cfa: defw 0x6306
; [DASMZ80] DECODE-LITERAL_cfa: start 0x875A end 0x875C type pointers
875C  DECODE-LITERAL_pfa: 
875C defw 2+_cfa
875E defw DUP_cfa
8760 defw @_cfa
8762 defw ._cfa
8764 defw ;S_cfa
; [DASMZ80] DECODE-LITERAL_pfa: start 0x875C end 0x8766 type pointers

8728  DECODE-COMPILE_nfa: defb 0x0E+0x80,"DECODE-COMPIL","E"+0x80
; [DASMZ80] DECODE-COMPILE_nfa: start 0x8728 end 0x8737 type bytedata
8737  DECODE-COMPILE_lfa: defw INDENT+_nfa
; [DASMZ80] DECODE-COMPILE_lfa: start 0x8737 end 0x8739 type pointers
8739  DECODE-COMPILE_cfa: defw 0x6306
; [DASMZ80] DECODE-COMPILE_cfa: start 0x8739 end 0x873B type pointers
873B  DECODE-COMPILE_pfa: 
873B defw 2+_cfa
873D defw DUP_cfa
873F defw @_cfa
8741 defw 2+_cfa
8743 defw NFA_cfa
8745 defw ID._cfa
8747 defw ;S_cfa
; [DASMZ80] DECODE-COMPILE_pfa: start 0x873B end 0x8749 type pointers

8712  INDENT+_nfa: defb 0x07+0x80,"INDENT","+"+0x80
; [DASMZ80] INDENT+_nfa: start 0x8712 end 0x871A type bytedata
871A  INDENT+_lfa: defw INDENT_nfa
; [DASMZ80] INDENT+_lfa: start 0x871A end 0x871C type pointers
871C  INDENT+_cfa: defw 0x6306
; [DASMZ80] INDENT+_cfa: start 0x871C end 0x871E type pointers
871E  INDENT+_pfa: 
871E defw 1_cfa
8720 defw DECODE-LEVEL_cfa
8722 defw +!_cfa
8724 defw INDENT_cfa
8726 defw ;S_cfa
; [DASMZ80] INDENT+_pfa: start 0x871E end 0x8728 type pointers

86F3  INDENT_nfa: defb 0x06+0x80,"INDEN","T"+0x80
; [DASMZ80] INDENT_nfa: start 0x86F3 end 0x86FA type bytedata
86FA  INDENT_lfa: defw DECODE-ADDRESS_nfa
; [DASMZ80] INDENT_lfa: start 0x86FA end 0x86FC type pointers
86FC  INDENT_cfa: defw 0x6306
; [DASMZ80] INDENT_cfa: start 0x86FC end 0x86FE type pointers
86FE  INDENT_pfa: 
86FE defw CR_cfa
8700 defw DECODE-ADDRESS_cfa
8702 defw @_cfa
8704 defw U._cfa
8706 defw DECODE-LEVEL_cfa
8708 defw @_cfa
870A defw 2_cfa
870C defw *_cfa
870E defw SPACES_cfa
8710 defw ;S_cfa
; [DASMZ80] INDENT_pfa: start 0x86FE end 0x8712 type pointers

86DE  DECODE-ADDRESS_nfa: defb 0x0E+0x80,"DECODE-ADDRES","S"+0x80
; [DASMZ80] DECODE-ADDRESS_nfa: start 0x86DE end 0x86ED type bytedata
86ED  DECODE-ADDRESS_lfa: defw DECODE-LEVEL_nfa
; [DASMZ80] DECODE-ADDRESS_lfa: start 0x86ED end 0x86EF type pointers
86EF  DECODE-ADDRESS_cfa: defw 0x6362
; [DASMZ80] DECODE-ADDRESS_cfa: start 0x86EF end 0x86F1 type pointers
86F1  DECODE-ADDRESS_pfa: 
86F1 defw 0x0000
; [DASMZ80] DECODE-ADDRESS_pfa: start 0x86F1 end 0x86F3 type worddata

86CB  DECODE-LEVEL_nfa: defb 0x0C+0x80,"DECODE-LEVE","L"+0x80
; [DASMZ80] DECODE-LEVEL_nfa: start 0x86CB end 0x86D8 type bytedata
86D8  DECODE-LEVEL_lfa: defw RECURSE_nfa
; [DASMZ80] DECODE-LEVEL_lfa: start 0x86D8 end 0x86DA type pointers
86DA  DECODE-LEVEL_cfa: defw 0x6362
; [DASMZ80] DECODE-LEVEL_cfa: start 0x86DA end 0x86DC type pointers
86DC  DECODE-LEVEL_pfa: 
86DC defw 0x0000
; [DASMZ80] DECODE-LEVEL_pfa: start 0x86DC end 0x86DE type worddata

86B5  RECURSE_nfa: defb 0x07+0x80+0x40,"RECURS","E"+0x80
; [DASMZ80] RECURSE_nfa: start 0x86B5 end 0x86BD type bytedata
86BD  RECURSE_lfa: defw DUMP_nfa
; [DASMZ80] RECURSE_lfa: start 0x86BD end 0x86BF type pointers
86BF  RECURSE_cfa: defw 0x6306
; [DASMZ80] RECURSE_cfa: start 0x86BF end 0x86C1 type pointers
86C1  RECURSE_pfa: 
86C1 defw LATEST_cfa
86C3 defw PFA_cfa
86C5 defw CFA_cfa
86C7 defw ,_cfa
86C9 defw ;S_cfa
; [DASMZ80] RECURSE_pfa: start 0x86C1 end 0x86CB type pointers

8648  DUMP_nfa: defb 0x04+0x80,"DUM","P"+0x80
; [DASMZ80] DUMP_nfa: start 0x8648 end 0x864D type bytedata
864D  DUMP_lfa: defw STYPE_nfa
; [DASMZ80] DUMP_lfa: start 0x864D end 0x864F type pointers
864F  DUMP_cfa: defw 0x6306
; [DASMZ80] DUMP_cfa: start 0x864F end 0x8651 type pointers
8651  DUMP_pfa: 
8651 defw LIT_cfa,0x0007
8655 defw +_cfa
8657 defw LIT_cfa,0xFFF8
865B defw AND_cfa
865D defw LIT_cfa,0x0008
8661 defw /_cfa
8663 defw 0_cfa
8665 defw 2DUP_cfa
8667 defw -_cfa
8669 defw 0BRANCH_cfa,0x0044; to 0x86AF
866D defw (DO)_cfa
866F defw CR_cfa
8671 defw DUP_cfa
8673 defw H._cfa
8675 defw LIT_cfa,0x0008
8679 defw 0_cfa
867B defw (DO)_cfa
867D defw I_cfa
867F defw OVER_cfa
8681 defw +_cfa
8683 defw @_cfa
8685 defw CSWAP_cfa
8687 defw H._cfa
8689 defw 2_cfa
868B defw (+LOOP)_cfa,0xFFF0; to 0x867D
868F defw DUP_cfa
8691 defw BS_cfa
8693 defw LIT_cfa,0x0008
8697 defw STYPE_cfa
8699 defw ?TERMINAL_cfa
869B defw 0BRANCH_cfa,0x0004; to 0x86A1
869F defw LEAVE_cfa
86A1 defw LIT_cfa,0x0008
86A5 defw +_cfa
86A7 defw (LOOP)_cfa,0xFFC6; to 0x866F
86AB defw BRANCH_cfa,0x0004; to 0x86B1
86AF defw 2DROP_cfa
86B1 defw DROP_cfa
86B3 defw ;S_cfa
; [DASMZ80] DUMP_pfa: start 0x8651 end 0x86B5 type pointers

8606  STYPE_nfa: defb 0x05+0x80,"STYP","E"+0x80
; [DASMZ80] STYPE_nfa: start 0x8606 end 0x860C type bytedata
860C  STYPE_lfa: defw H._nfa
; [DASMZ80] STYPE_lfa: start 0x860C end 0x860E type pointers
860E  STYPE_cfa: defw 0x6306
; [DASMZ80] STYPE_cfa: start 0x860E end 0x8610 type pointers
8610  STYPE_pfa: 
8610 defw 0_cfa
8612 defw 2DUP_cfa
8614 defw -_cfa
8616 defw 0BRANCH_cfa,0x002A; to 0x8642
861A defw (DO)_cfa
861C defw DUP_cfa
861E defw C@_cfa
8620 defw LIT_cfa,0x007F
8624 defw AND_cfa
8626 defw DUP_cfa
8628 defw BL_cfa
862A defw <_cfa
862C defw 0BRANCH_cfa,0x0008; to 0x8636
8630 defw DROP_cfa
8632 defw LIT_cfa,0x002E
8636 defw EMIT_cfa
8638 defw 1+_cfa
863A defw (LOOP)_cfa,0xFFE0; to 0x861C
863E defw BRANCH_cfa,0x0004; to 0x8644
8642 defw 2DROP_cfa
8644 defw DROP_cfa
8646 defw ;S_cfa
; [DASMZ80] STYPE_pfa: start 0x8610 end 0x8648 type pointers

85DF  H._nfa: defb 0x02+0x80,"H","."+0x80
; [DASMZ80] H._nfa: start 0x85DF end 0x85E2 type bytedata
85E2  H._lfa: defw BS_nfa
; [DASMZ80] H._lfa: start 0x85E2 end 0x85E4 type pointers
85E4  H._cfa: defw 0x6306
; [DASMZ80] H._cfa: start 0x85E4 end 0x85E6 type pointers
85E6  H._pfa: 
85E6 defw BASE_cfa
85E8 defw @_cfa
85EA defw HEX_cfa
85EC defw SWAP_cfa
85EE defw S->D_cfa
85F0 defw <#_cfa
85F2 defw #_cfa
85F4 defw #_cfa
85F6 defw #_cfa
85F8 defw #_cfa
85FA defw #>_cfa
85FC defw TYPE_cfa
85FE defw SPACE_cfa
8600 defw BASE_cfa
8602 defw !_cfa
8604 defw ;S_cfa
; [DASMZ80] H._pfa: start 0x85E6 end 0x8606 type pointers

85D0  BS_nfa: defb 0x02+0x80,"B","S"+0x80
; [DASMZ80] BS_nfa: start 0x85D0 end 0x85D3 type bytedata
85D3  BS_lfa: defw CSWAP_nfa
; [DASMZ80] BS_lfa: start 0x85D3 end 0x85D5 type pointers
85D5  BS_cfa: defw 0x6306
; [DASMZ80] BS_cfa: start 0x85D5 end 0x85D7 type pointers
85D7  BS_pfa: 
85D7 defw LIT_cfa,0x0008
85DB defw EMIT_cfa
85DD defw ;S_cfa
; [DASMZ80] BS_pfa: start 0x85D7 end 0x85DF type pointers

85BF  CSWAP_nfa: defb 0x05+0x80,"CSWA","P"+0x80
; [DASMZ80] CSWAP_nfa: start 0x85BF end 0x85C5 type bytedata
85C5  CSWAP_lfa: defw .S_nfa
; [DASMZ80] CSWAP_lfa: start 0x85C5 end 0x85C7 type pointers
85C7  CSWAP_cfa: defw CSWAP_pfa
; [DASMZ80] CSWAP_cfa: start 0x85C7 end 0x85C9 type pointers
85C9  CSWAP_pfa: ; Word type not implemented.

857C  .S_nfa: defb 0x02+0x80,".","S"+0x80
; [DASMZ80] .S_nfa: start 0x857C end 0x857F type bytedata
857F  .S_lfa: defw TURNKEY_nfa
; [DASMZ80] .S_lfa: start 0x857F end 0x8581 type pointers
8581  .S_cfa: defw 0x6306
; [DASMZ80] .S_cfa: start 0x8581 end 0x8583 type pointers
8583  .S_pfa: 
8583 defw DEPTH_cfa
8585 defw DUP_cfa
8587 defw S->D_cfa
8589 defw <#_cfa
858B defw LIT_cfa,0x003E
858F defw HOLD_cfa
8591 defw #S_cfa
8593 defw LIT_cfa,0x003C
8597 defw HOLD_cfa
8599 defw #>_cfa
859B defw TYPE_cfa
859D defw SPACE_cfa
859F defw 0BRANCH_cfa,0x001C; to 0x85BD
85A3 defw SP@_cfa
85A5 defw 2-_cfa
85A7 defw S0_cfa
85A9 defw @_cfa
85AB defw 2-_cfa
85AD defw (DO)_cfa
85AF defw I_cfa
85B1 defw @_cfa
85B3 defw ._cfa
85B5 defw LIT_cfa,0xFFFE
85B9 defw (+LOOP)_cfa,0xFFF4; to 0x85AF
85BD defw ;S_cfa
; [DASMZ80] .S_pfa: start 0x8583 end 0x85BF type pointers

8568  TURNKEY_nfa: defb 0x07+0x80,"TURNKE","Y"+0x80
; [DASMZ80] TURNKEY_nfa: start 0x8568 end 0x8570 type bytedata
8570  TURNKEY_lfa: defw SYSTEM_nfa
; [DASMZ80] TURNKEY_lfa: start 0x8570 end 0x8572 type pointers
8572  TURNKEY_cfa: defw 0x6306
; [DASMZ80] TURNKEY_cfa: start 0x8572 end 0x8574 type pointers
8574  TURNKEY_pfa: 
8574 defw BOOT_cfa
8576 defw !_cfa
8578 defw SYSTEM_cfa
857A defw ;S_cfa
; [DASMZ80] TURNKEY_pfa: start 0x8574 end 0x857C type pointers

854D  SYSTEM_nfa: defb 0x06+0x80,"SYSTE","M"+0x80
; [DASMZ80] SYSTEM_nfa: start 0x854D end 0x8554 type bytedata
8554  SYSTEM_lfa: defw EXTEND_nfa
; [DASMZ80] SYSTEM_lfa: start 0x8554 end 0x8556 type pointers
8556  SYSTEM_cfa: defw 0x6306
; [DASMZ80] SYSTEM_cfa: start 0x8556 end 0x8558 type pointers
8558  SYSTEM_pfa: 
8558 defw EXTEND_cfa
855A defw 0_cfa
855C defw +ORIGIN_cfa
855E defw SIZE_cfa
8560 defw LIT_cfa,0x000A
8564 defw +_cfa
8566 defw ;S_cfa
; [DASMZ80] SYSTEM_pfa: start 0x8558 end 0x8568 type pointers

850A  EXTEND_nfa: defb 0x06+0x80,"EXTEN","D"+0x80
; [DASMZ80] EXTEND_nfa: start 0x850A end 0x8511 type bytedata
8511  EXTEND_lfa: defw NEEDS_nfa
; [DASMZ80] EXTEND_lfa: start 0x8511 end 0x8513 type pointers
8513  EXTEND_cfa: defw 0x6306
; [DASMZ80] EXTEND_cfa: start 0x8513 end 0x8515 type pointers
8515  EXTEND_pfa: 
8515 defw LATEST_cfa
8517 defw LIT_cfa,0x000C
851B defw +ORIGIN_cfa
851D defw !_cfa
851F defw HERE_cfa
8521 defw LIT_cfa,0x001C
8525 defw +ORIGIN_cfa
8527 defw !_cfa
8529 defw HERE_cfa
852B defw LIT_cfa,0x001E
852F defw +ORIGIN_cfa
8531 defw !_cfa
8533 defw HERE_cfa
8535 defw FENCE_cfa
8537 defw !_cfa
8539 defw LIT_cfa,0x6CF4
853D defw LIT_cfa,0x0008
8541 defw +_cfa
8543 defw LIT_cfa,0x0020
8547 defw +ORIGIN_cfa
8549 defw !_cfa
854B defw ;S_cfa
; [DASMZ80] EXTEND_pfa: start 0x8515 end 0x854D type pointers

84FA  NEEDS_nfa: defb 0x05+0x80,"NEED","S"+0x80
; [DASMZ80] NEEDS_nfa: start 0x84FA end 0x8500 type bytedata
8500  NEEDS_lfa: defw ?NEEDS_nfa
; [DASMZ80] NEEDS_lfa: start 0x8500 end 0x8502 type pointers
8502  NEEDS_cfa: defw 0x6306
; [DASMZ80] NEEDS_cfa: start 0x8502 end 0x8504 type pointers
8504  NEEDS_pfa: 
8504 defw [UNDEFINED]_cfa
8506 defw ?NEEDS_cfa
8508 defw ;S_cfa
; [DASMZ80] NEEDS_pfa: start 0x8504 end 0x850A type pointers

84EB  ?NEEDS_nfa: defb 0x06+0x80,"?NEED","S"+0x80
; [DASMZ80] ?NEEDS_nfa: start 0x84EB end 0x84F2 type bytedata
84F2  ?NEEDS_lfa: defw (NEEDS-TAPE)_nfa
; [DASMZ80] ?NEEDS_lfa: start 0x84F2 end 0x84F4 type pointers
84F4  ?NEEDS_cfa: defw 0x6306
; [DASMZ80] ?NEEDS_cfa: start 0x84F4 end 0x84F6 type pointers
84F6  ?NEEDS_pfa: 
84F6 defw (NEEDS-TAPE)_cfa
84F8 defw ;S_cfa
; [DASMZ80] ?NEEDS_pfa: start 0x84F6 end 0x84FA type pointers

84CE  (NEEDS-TAPE)_nfa: defb 0x0C+0x80,"(NEEDS-TAPE",")"+0x80
; [DASMZ80] (NEEDS-TAPE)_nfa: start 0x84CE end 0x84DB type bytedata
84DB  (NEEDS-TAPE)_lfa: defw DISC-SCR_nfa
; [DASMZ80] (NEEDS-TAPE)_lfa: start 0x84DB end 0x84DD type pointers
84DD  (NEEDS-TAPE)_cfa: defw 0x6306
; [DASMZ80] (NEEDS-TAPE)_cfa: start 0x84DD end 0x84DF type pointers
84DF  (NEEDS-TAPE)_pfa: 
84DF defw LIT_cfa,0x001B
84E3 defw ?ERROR_cfa
84E5 defw BL_cfa
84E7 defw WORD_cfa
84E9 defw ;S_cfa
; [DASMZ80] (NEEDS-TAPE)_pfa: start 0x84DF end 0x84EB type pointers

84A7  DISC-SCR_nfa: defb 0x08+0x80,"DISC-SC","R"+0x80
; [DASMZ80] DISC-SCR_nfa: start 0x84A7 end 0x84B0 type bytedata
84B0  DISC-SCR_lfa: defw SCR/DR_nfa
; [DASMZ80] DISC-SCR_lfa: start 0x84B0 end 0x84B2 type pointers
84B2  DISC-SCR_cfa: defw 0x6306
; [DASMZ80] DISC-SCR_cfa: start 0x84B2 end 0x84B4 type pointers
84B4  DISC-SCR_pfa: 
84B4 defw 1-_cfa
84B6 defw DUP_cfa
84B8 defw SCR/DR_cfa
84BA defw U<_cfa
84BC defw 0=_cfa
84BE defw LIT_cfa,0x0006
84C2 defw ?ERROR_cfa
84C4 defw /SCR_cfa
84C6 defw *_cfa
84C8 defw LO_cfa
84CA defw +_cfa
84CC defw ;S_cfa
; [DASMZ80] DISC-SCR_pfa: start 0x84B4 end 0x84CE type pointers

849A  SCR/DR_nfa: defb 0x06+0x80,"SCR/D","R"+0x80
; [DASMZ80] SCR/DR_nfa: start 0x849A end 0x84A1 type bytedata
84A1  SCR/DR_lfa: defw RUNT_nfa
; [DASMZ80] SCR/DR_lfa: start 0x84A1 end 0x84A3 type pointers
84A3  SCR/DR_cfa: defw 0x6348
; [DASMZ80] SCR/DR_cfa: start 0x84A3 end 0x84A5 type pointers
84A5  SCR/DR_pfa: 
84A5 defw 0x0010
; [DASMZ80] SCR/DR_pfa: start 0x84A5 end 0x84A7 type worddata

848B  RUNT_nfa: defb 0x04+0x80,"RUN","T"+0x80
; [DASMZ80] RUNT_nfa: start 0x848B end 0x8490 type bytedata
8490  RUNT_lfa: defw /RUNT_nfa
; [DASMZ80] RUNT_lfa: start 0x8490 end 0x8492 type pointers
8492  RUNT_cfa: defw 0x6306
; [DASMZ80] RUNT_cfa: start 0x8492 end 0x8494 type pointers
8494  RUNT_pfa: 
8494 defw 1_cfa
8496 defw /RUNT_cfa
8498 defw ;S_cfa
; [DASMZ80] RUNT_pfa: start 0x8494 end 0x849A type pointers

8477  /RUNT_nfa: defb 0x05+0x80,"/RUN","T"+0x80
; [DASMZ80] /RUNT_nfa: start 0x8477 end 0x847D type bytedata
847D  /RUNT_lfa: defw +THRU_nfa
; [DASMZ80] /RUNT_lfa: start 0x847D end 0x847F type pointers
847F  /RUNT_cfa: defw 0x6306
; [DASMZ80] /RUNT_cfa: start 0x847F end 0x8481 type pointers
8481  /RUNT_pfa: 
8481 defw EMPTY-BUFFERS_cfa
8483 defw INIT-DISC_cfa
8485 defw LOADT_cfa
8487 defw LOAD_cfa
8489 defw ;S_cfa
; [DASMZ80] /RUNT_pfa: start 0x8481 end 0x848B type pointers

845D  +THRU_nfa: defb 0x05+0x80,"+THR","U"+0x80
; [DASMZ80] +THRU_nfa: start 0x845D end 0x8463 type bytedata
8463  +THRU_lfa: defw +LOAD_nfa
; [DASMZ80] +THRU_lfa: start 0x8463 end 0x8465 type pointers
8465  +THRU_cfa: defw 0x6306
; [DASMZ80] +THRU_cfa: start 0x8465 end 0x8467 type pointers
8467  +THRU_pfa: 
8467 defw 1+_cfa
8469 defw SWAP_cfa
846B defw (DO)_cfa
846D defw I_cfa
846F defw +LOAD_cfa
8471 defw (LOOP)_cfa,0xFFFA; to 0x846D
8475 defw ;S_cfa
; [DASMZ80] +THRU_pfa: start 0x8467 end 0x8477 type pointers

8445  +LOAD_nfa: defb 0x05+0x80,"+LOA","D"+0x80
; [DASMZ80] +LOAD_nfa: start 0x8445 end 0x844B type bytedata
844B  +LOAD_lfa: defw THRU_nfa
; [DASMZ80] +LOAD_lfa: start 0x844B end 0x844D type pointers
844D  +LOAD_cfa: defw 0x6306
; [DASMZ80] +LOAD_cfa: start 0x844D end 0x844F type pointers
844F  +LOAD_pfa: 
844F defw BLK_cfa
8451 defw @_cfa
8453 defw B/SCR_cfa
8455 defw /_cfa
8457 defw +_cfa
8459 defw LOAD_cfa
845B defw ;S_cfa
; [DASMZ80] +LOAD_pfa: start 0x844F end 0x845D type pointers

842C  THRU_nfa: defb 0x04+0x80,"THR","U"+0x80
; [DASMZ80] THRU_nfa: start 0x842C end 0x8431 type bytedata
8431  THRU_lfa: defw 0<>_nfa
; [DASMZ80] THRU_lfa: start 0x8431 end 0x8433 type pointers
8433  THRU_cfa: defw 0x6306
; [DASMZ80] THRU_cfa: start 0x8433 end 0x8435 type pointers
8435  THRU_pfa: 
8435 defw 1+_cfa
8437 defw SWAP_cfa
8439 defw (DO)_cfa
843B defw I_cfa
843D defw LOAD_cfa
843F defw (LOOP)_cfa,0xFFFA; to 0x843B
8443 defw ;S_cfa
; [DASMZ80] THRU_pfa: start 0x8435 end 0x8445 type pointers

8417  0<>_nfa: defb 0x03+0x80,"0<",">"+0x80
; [DASMZ80] 0<>_nfa: start 0x8417 end 0x841B type bytedata
841B  0<>_lfa: defw 2*_nfa
; [DASMZ80] 0<>_lfa: start 0x841B end 0x841D type pointers
841D  0<>_cfa: defw 0<>_pfa
; [DASMZ80] 0<>_cfa: start 0x841D end 0x841F type pointers
841F  0<>_pfa: ; Word type not implemented.

840B  2*_nfa: defb 0x02+0x80,"2","*"+0x80
; [DASMZ80] 2*_nfa: start 0x840B end 0x840E type bytedata
840E  2*_lfa: defw 2-_nfa
; [DASMZ80] 2*_lfa: start 0x840E end 0x8410 type pointers
8410  2*_cfa: defw 2*_pfa
; [DASMZ80] 2*_cfa: start 0x8410 end 0x8412 type pointers
8412  2*_pfa: ; Word type not implemented.

83FE  2-_nfa: defb 0x02+0x80,"2","-"+0x80
; [DASMZ80] 2-_nfa: start 0x83FE end 0x8401 type bytedata
8401  2-_lfa: defw 1-_nfa
; [DASMZ80] 2-_lfa: start 0x8401 end 0x8403 type pointers
8403  2-_cfa: defw 2-_pfa
; [DASMZ80] 2-_cfa: start 0x8403 end 0x8405 type pointers
8405  2-_pfa: ; Word type not implemented.

83F2  1-_nfa: defb 0x02+0x80,"1","-"+0x80
; [DASMZ80] 1-_nfa: start 0x83F2 end 0x83F5 type bytedata
83F5  1-_lfa: defw BOUNDS_nfa
; [DASMZ80] 1-_lfa: start 0x83F5 end 0x83F7 type pointers
83F7  1-_cfa: defw 1-_pfa
; [DASMZ80] 1-_cfa: start 0x83F7 end 0x83F9 type pointers
83F9  1-_pfa: ; Word type not implemented.

83DF  BOUNDS_nfa: defb 0x06+0x80,"BOUND","S"+0x80
; [DASMZ80] BOUNDS_nfa: start 0x83DF end 0x83E6 type bytedata
83E6  BOUNDS_lfa: defw (R/W)_nfa
; [DASMZ80] BOUNDS_lfa: start 0x83E6 end 0x83E8 type pointers
83E8  BOUNDS_cfa: defw 0x6306
; [DASMZ80] BOUNDS_cfa: start 0x83E8 end 0x83EA type pointers
83EA  BOUNDS_pfa: 
83EA defw OVER_cfa
83EC defw +_cfa
83EE defw SWAP_cfa
83F0 defw ;S_cfa
; [DASMZ80] BOUNDS_pfa: start 0x83EA end 0x83F2 type pointers

83C1  (R/W)_nfa: defb 0x05+0x80,"(R/W",")"+0x80
; [DASMZ80] (R/W)_nfa: start 0x83C1 end 0x83C7 type bytedata
83C7  (R/W)_lfa: defw DISC-BLOCK_nfa
; [DASMZ80] (R/W)_lfa: start 0x83C7 end 0x83C9 type pointers
83C9  (R/W)_cfa: defw 0x6306
; [DASMZ80] (R/W)_cfa: start 0x83C9 end 0x83CB type pointers
83CB  (R/W)_pfa: 
83CB defw 0BRANCH_cfa,0x0004; to 0x83D1
83CF defw SWAP_cfa
83D1 defw B/BUF_cfa
83D3 defw DISC-BANK_cfa
83D5 defw BANK_cfa
83D7 defw CMOVE_cfa
83D9 defw 0_cfa
83DB defw BANK_cfa
83DD defw ;S_cfa
; [DASMZ80] (R/W)_pfa: start 0x83CB end 0x83DF type pointers

8386  DISC-BLOCK_nfa: defb 0x0A+0x80,"DISC-BLOC","K"+0x80
; [DASMZ80] DISC-BLOCK_nfa: start 0x8386 end 0x8391 type bytedata
8391  DISC-BLOCK_lfa: defw /SCR_nfa
; [DASMZ80] DISC-BLOCK_lfa: start 0x8391 end 0x8393 type pointers
8393  DISC-BLOCK_cfa: defw 0x6306
; [DASMZ80] DISC-BLOCK_cfa: start 0x8393 end 0x8395 type pointers
8395  DISC-BLOCK_pfa: 
8395 defw OFFSET_cfa
8397 defw @_cfa
8399 defw -_cfa
839B defw B/BUF_cfa
839D defw *_cfa
839F defw DUP_cfa
83A1 defw /SCR_cfa
83A3 defw U<_cfa
83A5 defw LIT_cfa,0x0006
83A9 defw ?ERROR_cfa
83AB defw LO_cfa
83AD defw +_cfa
83AF defw /SCR_cfa
83B1 defw -_cfa
83B3 defw DUP_cfa
83B5 defw HI_cfa
83B7 defw >_cfa
83B9 defw LIT_cfa,0x0006
83BD defw ?ERROR_cfa
83BF defw ;S_cfa
; [DASMZ80] DISC-BLOCK_pfa: start 0x8395 end 0x83C1 type pointers

837B  /SCR_nfa: defb 0x04+0x80,"/SC","R"+0x80
; [DASMZ80] /SCR_nfa: start 0x837B end 0x8380 type bytedata
8380  /SCR_lfa: defw BOOT_nfa
; [DASMZ80] /SCR_lfa: start 0x8380 end 0x8382 type pointers
8382  /SCR_cfa: defw 0x6348
; [DASMZ80] /SCR_cfa: start 0x8382 end 0x8384 type pointers
8384  /SCR_pfa: 
8384 defw 0x0400
; [DASMZ80] /SCR_pfa: start 0x8384 end 0x8386 type worddata

8370  BOOT_nfa: defb 0x04+0x80,"BOO","T"+0x80
; [DASMZ80] BOOT_nfa: start 0x8370 end 0x8375 type bytedata
8375  BOOT_lfa: defw CLS0_nfa
; [DASMZ80] BOOT_lfa: start 0x8375 end 0x8377 type pointers
8377  BOOT_cfa: defw 0x6348
; [DASMZ80] BOOT_cfa: start 0x8377 end 0x8379 type pointers
8379  BOOT_pfa: 
8379 defw 0x6D68
; [DASMZ80] BOOT_pfa: start 0x8379 end 0x837B type worddata

8361  CLS0_nfa: defb 0x04+0x80,"CLS","0"+0x80
; [DASMZ80] CLS0_nfa: start 0x8361 end 0x8366 type bytedata
8366  CLS0_lfa: defw COLORS0_nfa
; [DASMZ80] CLS0_lfa: start 0x8366 end 0x8368 type pointers
8368  CLS0_cfa: defw 0x6306
; [DASMZ80] CLS0_cfa: start 0x8368 end 0x836A type pointers
836A  CLS0_pfa: 
836A defw COLORS0_cfa
836C defw CLS_cfa
836E defw ;S_cfa
; [DASMZ80] CLS0_pfa: start 0x836A end 0x8370 type pointers

8339  COLORS0_nfa: defb 0x07+0x80,"COLORS","0"+0x80
; [DASMZ80] COLORS0_nfa: start 0x8339 end 0x8341 type bytedata
8341  COLORS0_lfa: defw GREETING_nfa
; [DASMZ80] COLORS0_lfa: start 0x8341 end 0x8343 type pointers
8343  COLORS0_cfa: defw 0x6306
; [DASMZ80] COLORS0_cfa: start 0x8343 end 0x8345 type pointers
8345  COLORS0_pfa: 
8345 defw 0_cfa
8347 defw PAPER_cfa
8349 defw LIT_cfa,0x0004
834D defw INK_cfa
834F defw 0_cfa
8351 defw BRIGHT_cfa
8353 defw 0_cfa
8355 defw FLASH_cfa
8357 defw 0_cfa
8359 defw INVERSE_cfa
835B defw 0_cfa
835D defw BORDER_cfa
835F defw ;S_cfa
; [DASMZ80] COLORS0_pfa: start 0x8345 end 0x8361 type pointers

8322  GREETING_nfa: defb 0x08+0x80,"GREETIN","G"+0x80
; [DASMZ80] GREETING_nfa: start 0x8322 end 0x832B type bytedata
832B  GREETING_lfa: defw .SYS-AUTHOR_nfa
; [DASMZ80] GREETING_lfa: start 0x832B end 0x832D type pointers
832D  GREETING_cfa: defw 0x6306
; [DASMZ80] GREETING_cfa: start 0x832D end 0x832F type pointers
832F  GREETING_pfa: 
832F defw .SYS_cfa
8331 defw CR_cfa
8333 defw .SYS-AUTHOR_cfa
8335 defw CR_cfa
8337 defw ;S_cfa
; [DASMZ80] GREETING_pfa: start 0x832F end 0x8339 type pointers

82BD  .SYS-AUTHOR_nfa: defb 0x0B+0x80,".SYS-AUTHO","R"+0x80
; [DASMZ80] .SYS-AUTHOR_nfa: start 0x82BD end 0x82C9 type bytedata
82C9  .SYS-AUTHOR_lfa: defw .SYS_nfa
; [DASMZ80] .SYS-AUTHOR_lfa: start 0x82C9 end 0x82CB type pointers
82CB  .SYS-AUTHOR_cfa: defw 0x6306
; [DASMZ80] .SYS-AUTHOR_cfa: start 0x82CB end 0x82CD type pointers
82CD  .SYS-AUTHOR_pfa: 
82CD defw (.")_cfa
82CF defb 0x15,"v1.1A ? 1983 Abersoft"
82E5 defw CR_cfa
82E7 defw (.")_cfa
82E9 defb 0x1E,"v1.1C+Afera ? 2015 Marcos Cruz"
8308 defw CR_cfa
830A defw (.")_cfa
830C defb 0x13,"(programandala.net)"
8320 defw ;S_cfa
; [DASMZ80] .SYS-AUTHOR_pfa: start 0x82CD end 0x8322 type pointers

829D  .SYS_nfa: defb 0x04+0x80,".SY","S"+0x80
; [DASMZ80] .SYS_nfa: start 0x829D end 0x82A2 type bytedata
82A2  .SYS_lfa: defw ?\_nfa
; [DASMZ80] .SYS_lfa: start 0x82A2 end 0x82A4 type pointers
82A4  .SYS_cfa: defw 0x6306
; [DASMZ80] .SYS_cfa: start 0x82A4 end 0x82A6 type pointers
82A6  .SYS_pfa: 
82A6 defw (.")_cfa
82A8 defb 0x12,"Spectrum fig-Forth"
82BB defw ;S_cfa
; [DASMZ80] .SYS_pfa: start 0x82A6 end 0x82BD type pointers

828E  ?\_nfa: defb 0x02+0x80+0x40,"?","\"+0x80
; [DASMZ80] ?\_nfa: start 0x828E end 0x8291 type bytedata
8291  ?\_lfa: defw ?-->_nfa
; [DASMZ80] ?\_lfa: start 0x8291 end 0x8293 type pointers
8293  ?\_cfa: defw 0x6306
; [DASMZ80] ?\_cfa: start 0x8293 end 0x8295 type pointers
8295  ?\_pfa: 
8295 defw 0BRANCH_cfa,0x0004; to 0x829B
8299 defw \_cfa
829B defw ;S_cfa
; [DASMZ80] ?\_pfa: start 0x8295 end 0x829D type pointers

827D  ?-->_nfa: defb 0x04+0x80+0x40,"?--",">"+0x80
; [DASMZ80] ?-->_nfa: start 0x827D end 0x8282 type bytedata
8282  ?-->_lfa: defw [UNDEFINED]_nfa
; [DASMZ80] ?-->_lfa: start 0x8282 end 0x8284 type pointers
8284  ?-->_cfa: defw 0x6306
; [DASMZ80] ?-->_cfa: start 0x8284 end 0x8286 type pointers
8286  ?-->_pfa: 
8286 defw 0BRANCH_cfa,0x0004; to 0x828C
828A defw -->_cfa
828C defw ;S_cfa
; [DASMZ80] ?-->_pfa: start 0x8286 end 0x828E type pointers

8267  [UNDEFINED]_nfa: defb 0x0B+0x80+0x40,"[UNDEFINED","]"+0x80
; [DASMZ80] [UNDEFINED]_nfa: start 0x8267 end 0x8273 type bytedata
8273  [UNDEFINED]_lfa: defw [DEFINED]_nfa
; [DASMZ80] [UNDEFINED]_lfa: start 0x8273 end 0x8275 type pointers
8275  [UNDEFINED]_cfa: defw 0x6306
; [DASMZ80] [UNDEFINED]_cfa: start 0x8275 end 0x8277 type pointers
8277  [UNDEFINED]_pfa: 
8277 defw [DEFINED]_cfa
8279 defw 0=_cfa
827B defw ;S_cfa
; [DASMZ80] [UNDEFINED]_pfa: start 0x8277 end 0x827D type pointers

824B  [DEFINED]_nfa: defb 0x09+0x80+0x40,"[DEFINED","]"+0x80
; [DASMZ80] [DEFINED]_nfa: start 0x824B end 0x8255 type bytedata
8255  [DEFINED]_lfa: defw DEPTH_nfa
; [DASMZ80] [DEFINED]_lfa: start 0x8255 end 0x8257 type pointers
8257  [DEFINED]_cfa: defw 0x6306
; [DASMZ80] [DEFINED]_cfa: start 0x8257 end 0x8259 type pointers
8259  [DEFINED]_pfa: 
8259 defw -FIND_cfa
825B defw DUP_cfa
825D defw 0BRANCH_cfa,0x0006; to 0x8265
8261 defw NIP_cfa
8263 defw NIP_cfa
8265 defw ;S_cfa
; [DASMZ80] [DEFINED]_pfa: start 0x8259 end 0x8267 type pointers

8231  DEPTH_nfa: defb 0x05+0x80,"DEPT","H"+0x80
; [DASMZ80] DEPTH_nfa: start 0x8231 end 0x8237 type bytedata
8237  DEPTH_lfa: defw TUCK_nfa
; [DASMZ80] DEPTH_lfa: start 0x8237 end 0x8239 type pointers
8239  DEPTH_cfa: defw 0x6306
; [DASMZ80] DEPTH_cfa: start 0x8239 end 0x823B type pointers
823B  DEPTH_pfa: 
823B defw SP@_cfa
823D defw S0_cfa
823F defw @_cfa
8241 defw -_cfa
8243 defw LIT_cfa,0xFFFE
8247 defw /_cfa
8249 defw ;S_cfa
; [DASMZ80] DEPTH_pfa: start 0x823B end 0x824B type pointers

8222  TUCK_nfa: defb 0x04+0x80,"TUC","K"+0x80
; [DASMZ80] TUCK_nfa: start 0x8222 end 0x8227 type bytedata
8227  TUCK_lfa: defw NIP_nfa
; [DASMZ80] TUCK_lfa: start 0x8227 end 0x8229 type pointers
8229  TUCK_cfa: defw TUCK_pfa
; [DASMZ80] TUCK_cfa: start 0x8229 end 0x822B type pointers
822B  TUCK_pfa: ; Word type not implemented.

8215  NIP_nfa: defb 0x03+0x80,"NI","P"+0x80
; [DASMZ80] NIP_nfa: start 0x8215 end 0x8219 type bytedata
8219  NIP_lfa: defw /DISC_nfa
; [DASMZ80] NIP_lfa: start 0x8219 end 0x821B type pointers
821B  NIP_cfa: defw NIP_pfa
; [DASMZ80] NIP_cfa: start 0x821B end 0x821D type pointers
821D  NIP_pfa: ; Word type not implemented.

8209  /DISC_nfa: defb 0x05+0x80,"/DIS","C"+0x80
; [DASMZ80] /DISC_nfa: start 0x8209 end 0x820F type bytedata
820F  /DISC_lfa: defw .(_nfa
; [DASMZ80] /DISC_lfa: start 0x820F end 0x8211 type pointers
8211  /DISC_cfa: defw 0x6348
; [DASMZ80] /DISC_cfa: start 0x8211 end 0x8213 type pointers
8213  /DISC_pfa: 
8213 defw 0x4000
; [DASMZ80] /DISC_pfa: start 0x8213 end 0x8215 type worddata

81F4  .(_nfa: defb 0x02+0x80+0x40,".","("+0x80
; [DASMZ80] .(_nfa: start 0x81F4 end 0x81F7 type bytedata
81F7  .(_lfa: defw \_nfa
; [DASMZ80] .(_lfa: start 0x81F7 end 0x81F9 type pointers
81F9  .(_cfa: defw 0x6306
; [DASMZ80] .(_cfa: start 0x81F9 end 0x81FB type pointers
81FB  .(_pfa: 
81FB defw LIT_cfa,0x0029
81FF defw TEXT_cfa
8201 defw PAD_cfa
8203 defw COUNT_cfa
8205 defw TYPE_cfa
8207 defw ;S_cfa
; [DASMZ80] .(_pfa: start 0x81FB end 0x8209 type pointers

81DA  \_nfa: defb 0x01+0x80+0x40,"\"+0x80
; [DASMZ80] \_nfa: start 0x81DA end 0x81DC type bytedata
81DC  \_lfa: defw [CHAR]_nfa
; [DASMZ80] \_lfa: start 0x81DC end 0x81DE type pointers
81DE  \_cfa: defw 0x6306
; [DASMZ80] \_cfa: start 0x81DE end 0x81E0 type pointers
81E0  \_pfa: 
81E0 defw IN_cfa
81E2 defw @_cfa
81E4 defw C/L_cfa
81E6 defw MOD_cfa
81E8 defw C/L_cfa
81EA defw SWAP_cfa
81EC defw -_cfa
81EE defw IN_cfa
81F0 defw +!_cfa
81F2 defw ;S_cfa
; [DASMZ80] \_pfa: start 0x81E0 end 0x81F4 type pointers

81C9  [CHAR]_nfa: defb 0x06+0x80+0x40,"[CHAR","]"+0x80
; [DASMZ80] [CHAR]_nfa: start 0x81C9 end 0x81D0 type bytedata
81D0  [CHAR]_lfa: defw CHAR_nfa
; [DASMZ80] [CHAR]_lfa: start 0x81D0 end 0x81D2 type pointers
81D2  [CHAR]_cfa: defw 0x6306
; [DASMZ80] [CHAR]_cfa: start 0x81D2 end 0x81D4 type pointers
81D4  [CHAR]_pfa: 
81D4 defw CHAR_cfa
81D6 defw LITERAL_cfa
81D8 defw ;S_cfa
; [DASMZ80] [CHAR]_pfa: start 0x81D4 end 0x81DA type pointers

81B4  CHAR_nfa: defb 0x04+0x80,"CHA","R"+0x80
; [DASMZ80] CHAR_nfa: start 0x81B4 end 0x81B9 type bytedata
81B9  CHAR_lfa: defw LOADER_nfa
; [DASMZ80] CHAR_lfa: start 0x81B9 end 0x81BB type pointers
81BB  CHAR_cfa: defw 0x6306
; [DASMZ80] CHAR_cfa: start 0x81BB end 0x81BD type pointers
81BD  CHAR_pfa: 
81BD defw BL_cfa
81BF defw WORD_cfa
81C1 defw HERE_cfa
81C3 defw 1+_cfa
81C5 defw C@_cfa
81C7 defw ;S_cfa
; [DASMZ80] CHAR_pfa: start 0x81BD end 0x81C9 type pointers

8167  LOADER_nfa: defb 0x06+0x80,"LOADE","R"+0x80
; [DASMZ80] LOADER_nfa: start 0x8167 end 0x816E type bytedata
816E  LOADER_lfa: defw LOADED?_nfa
; [DASMZ80] LOADER_lfa: start 0x816E end 0x8170 type pointers
8170  LOADER_cfa: defw 0x6306
; [DASMZ80] LOADER_cfa: start 0x8170 end 0x8172 type pointers
8172  LOADER_pfa: 
8172 defw 0_cfa
8174 defw LOADED?_cfa
8176 defw !_cfa
8178 defw LOADED?_cfa
817A defw @_cfa
817C defw 0=_cfa
817E defw 0BRANCH_cfa,0x001A; to 0x819A
8182 defw LIT_cfa,0x00FF
8186 defw LIT_cfa,0x5C8C
818A defw C!_cfa
818C defw EMPTY-BUFFERS_cfa
818E defw INIT-DISC_cfa
8190 defw LOADT_cfa
8192 defw 1_cfa
8194 defw LOAD_cfa
8196 defw BRANCH_cfa,0xFFE0; to 0x8178
819A defw LOADED?_cfa
819C defw @_cfa
819E defw LIT_cfa,0xFFFF
81A2 defw =_cfa
81A4 defw 0BRANCH_cfa,0x000C; to 0x81B2
81A8 defw RP!_cfa
81AA defw LATEST_cfa
81AC defw PFA_cfa
81AE defw CFA_cfa
81B0 defw EXECUTE_cfa
81B2 defw ;S_cfa
; [DASMZ80] LOADER_pfa: start 0x8172 end 0x81B4 type pointers

8159  LOADED?_nfa: defb 0x07+0x80,"LOADED","?"+0x80
; [DASMZ80] LOADED?_nfa: start 0x8159 end 0x8161 type bytedata
8161  LOADED?_lfa: defw UDG_nfa
; [DASMZ80] LOADED?_lfa: start 0x8161 end 0x8163 type pointers
8163  LOADED?_cfa: defw 0x6362
; [DASMZ80] LOADED?_cfa: start 0x8163 end 0x8165 type pointers
8165  LOADED?_pfa: 
8165 defw 0x0000
; [DASMZ80] LOADED?_pfa: start 0x8165 end 0x8167 type worddata

8149  UDG_nfa: defb 0x03+0x80,"UD","G"+0x80
; [DASMZ80] UDG_nfa: start 0x8149 end 0x814D type bytedata
814D  UDG_lfa: defw INIT-DISC_nfa
; [DASMZ80] UDG_lfa: start 0x814D end 0x814F type pointers
814F  UDG_cfa: defw 0x6306
; [DASMZ80] UDG_cfa: start 0x814F end 0x8151 type pointers
8151  UDG_pfa: 
8151 defw LIT_cfa,0x5C7B
8155 defw @_cfa
8157 defw ;S_cfa
; [DASMZ80] UDG_pfa: start 0x8151 end 0x8159 type pointers

812F  INIT-DISC_nfa: defb 0x09+0x80,"INIT-DIS","C"+0x80
; [DASMZ80] INIT-DISC_nfa: start 0x812F end 0x8139 type bytedata
8139  INIT-DISC_lfa: defw INKEY_nfa
; [DASMZ80] INIT-DISC_lfa: start 0x8139 end 0x813B type pointers
813B  INIT-DISC_cfa: defw 0x6306
; [DASMZ80] INIT-DISC_cfa: start 0x813B end 0x813D type pointers
813D  INIT-DISC_pfa: 
813D defw DISC-BANK_cfa
813F defw BANK_cfa
8141 defw (INIT-DISC)_cfa
8143 defw 0_cfa
8145 defw BANK_cfa
8147 defw ;S_cfa
; [DASMZ80] INIT-DISC_pfa: start 0x813D end 0x8149 type pointers

810C  INKEY_nfa: defb 0x05+0x80,"INKE","Y"+0x80
; [DASMZ80] INKEY_nfa: start 0x810C end 0x8112 type bytedata
8112  INKEY_lfa: defw ENDCASE_nfa
; [DASMZ80] INKEY_lfa: start 0x8112 end 0x8114 type pointers
8114  INKEY_cfa: defw INKEY_pfa
; [DASMZ80] INKEY_cfa: start 0x8114 end 0x8116 type pointers
8116  INKEY_pfa: ; Word type not implemented.

80DA  ENDCASE_nfa: defb 0x07+0x80+0x40,"ENDCAS","E"+0x80
; [DASMZ80] ENDCASE_nfa: start 0x80DA end 0x80E2 type bytedata
80E2  ENDCASE_lfa: defw ENDOF_nfa
; [DASMZ80] ENDCASE_lfa: start 0x80E2 end 0x80E4 type pointers
80E4  ENDCASE_cfa: defw 0x6306
; [DASMZ80] ENDCASE_cfa: start 0x80E4 end 0x80E6 type pointers
80E6  ENDCASE_pfa: 
80E6 defw LIT_cfa,0x0004
80EA defw ?PAIRS_cfa
80EC defw COMPILE_cfa,DROP_cfa
80F0 defw SP@_cfa
80F2 defw CSP_cfa
80F4 defw @_cfa
80F6 defw =_cfa
80F8 defw 0=_cfa
80FA defw 0BRANCH_cfa,0x000A; to 0x8106
80FE defw 2_cfa
8100 defw ENDIF_cfa
8102 defw BRANCH_cfa,0xFFEC; to 0x80F0
8106 defw CSP_cfa
8108 defw !_cfa
810A defw ;S_cfa
; [DASMZ80] ENDCASE_pfa: start 0x80E6 end 0x810C type pointers

80B4  ENDOF_nfa: defb 0x05+0x80+0x40,"ENDO","F"+0x80
; [DASMZ80] ENDOF_nfa: start 0x80B4 end 0x80BA type bytedata
80BA  ENDOF_lfa: defw OF_nfa
; [DASMZ80] ENDOF_lfa: start 0x80BA end 0x80BC type pointers
80BC  ENDOF_cfa: defw 0x6306
; [DASMZ80] ENDOF_cfa: start 0x80BC end 0x80BE type pointers
80BE  ENDOF_pfa: 
80BE defw LIT_cfa,0x0005
80C2 defw ?PAIRS_cfa
80C4 defw COMPILE_cfa,BRANCH_cfa
80C8 defw HERE_cfa
80CA defw 0_cfa
80CC defw ,_cfa
80CE defw SWAP_cfa
80D0 defw 2_cfa
80D2 defw ENDIF_cfa
80D4 defw LIT_cfa,0x0004
80D8 defw ;S_cfa
; [DASMZ80] ENDOF_pfa: start 0x80BE end 0x80DA type pointers

808B  OF_nfa: defb 0x02+0x80+0x40,"O","F"+0x80
; [DASMZ80] OF_nfa: start 0x808B end 0x808E type bytedata
808E  OF_lfa: defw CASE_nfa
; [DASMZ80] OF_lfa: start 0x808E end 0x8090 type pointers
8090  OF_cfa: defw 0x6306
; [DASMZ80] OF_cfa: start 0x8090 end 0x8092 type pointers
8092  OF_pfa: 
8092 defw LIT_cfa,0x0004
8096 defw ?PAIRS_cfa
8098 defw COMPILE_cfa,OVER_cfa
809C defw COMPILE_cfa,=_cfa
80A0 defw COMPILE_cfa,0BRANCH_cfa
80A4 defw HERE_cfa
80A6 defw 0_cfa
80A8 defw ,_cfa
80AA defw COMPILE_cfa,DROP_cfa
80AE defw LIT_cfa,0x0005
80B2 defw ;S_cfa
; [DASMZ80] OF_pfa: start 0x8092 end 0x80B4 type pointers

8074  CASE_nfa: defb 0x04+0x80+0x40,"CAS","E"+0x80
; [DASMZ80] CASE_nfa: start 0x8074 end 0x8079 type bytedata
8079  CASE_lfa: defw DRAW_nfa
; [DASMZ80] CASE_lfa: start 0x8079 end 0x807B type pointers
807B  CASE_cfa: defw 0x6306
; [DASMZ80] CASE_cfa: start 0x807B end 0x807D type pointers
807D  CASE_pfa: 
807D defw ?COMP_cfa
807F defw CSP_cfa
8081 defw @_cfa
8083 defw !CSP_cfa
8085 defw LIT_cfa,0x0004
8089 defw ;S_cfa
; [DASMZ80] CASE_pfa: start 0x807D end 0x808B type pointers

7FB7  DRAW_nfa: defb 0x04+0x80,"DRA","W"+0x80
; [DASMZ80] DRAW_nfa: start 0x7FB7 end 0x7FBC type bytedata
7FBC  DRAW_lfa: defw INCY_nfa
; [DASMZ80] DRAW_lfa: start 0x7FBC end 0x7FBE type pointers
7FBE  DRAW_cfa: defw 0x6306
; [DASMZ80] DRAW_cfa: start 0x7FBE end 0x7FC0 type pointers
7FC0  DRAW_pfa: 
7FC0 defw LIT_cfa,0x5C7E
7FC4 defw C@_cfa
7FC6 defw DUP_cfa
7FC8 defw 0_cfa
7FCA defw SWAP_cfa
7FCC defw Y1_cfa
7FCE defw 2!_cfa
7FD0 defw -_cfa
7FD2 defw DUP_cfa
7FD4 defw ABS_cfa
7FD6 defw ROT_cfa
7FD8 defw LIT_cfa,0x5C7D
7FDC defw C@_cfa
7FDE defw DUP_cfa
7FE0 defw 0_cfa
7FE2 defw SWAP_cfa
7FE4 defw X1_cfa
7FE6 defw 2!_cfa
7FE8 defw -_cfa
7FEA defw DUP_cfa
7FEC defw ABS_cfa
7FEE defw ROT_cfa
7FF0 defw MAX_cfa
7FF2 defw >R_cfa
7FF4 defw DUP_cfa
7FF6 defw 0<_cfa
7FF8 defw 0BRANCH_cfa,0x0012; to 0x800C
7FFC defw ABS_cfa
7FFE defw 0_cfa
8000 defw SWAP_cfa
8002 defw R_cfa
8004 defw M/MOD_cfa
8006 defw DMINUS_cfa
8008 defw BRANCH_cfa,0x000A; to 0x8014
800C defw 0_cfa
800E defw SWAP_cfa
8010 defw R_cfa
8012 defw M/MOD_cfa
8014 defw INCX_cfa
8016 defw 2!_cfa
8018 defw DROP_cfa
801A defw DUP_cfa
801C defw 0<_cfa
801E defw 0BRANCH_cfa,0x0012; to 0x8032
8022 defw ABS_cfa
8024 defw 0_cfa
8026 defw SWAP_cfa
8028 defw R_cfa
802A defw M/MOD_cfa
802C defw DMINUS_cfa
802E defw BRANCH_cfa,0x000A; to 0x803A
8032 defw 0_cfa
8034 defw SWAP_cfa
8036 defw R_cfa
8038 defw M/MOD_cfa
803A defw INCY_cfa
803C defw 2!_cfa
803E defw DROP_cfa
8040 defw R>_cfa
8042 defw 1+_cfa
8044 defw 0_cfa
8046 defw (DO)_cfa
8048 defw X1_cfa
804A defw @_cfa
804C defw Y1_cfa
804E defw @_cfa
8050 defw PLOT_cfa
8052 defw X1_cfa
8054 defw 2@_cfa
8056 defw INCX_cfa
8058 defw 2@_cfa
805A defw D+_cfa
805C defw X1_cfa
805E defw 2!_cfa
8060 defw Y1_cfa
8062 defw 2@_cfa
8064 defw INCY_cfa
8066 defw 2@_cfa
8068 defw D+_cfa
806A defw Y1_cfa
806C defw 2!_cfa
806E defw (LOOP)_cfa,0xFFD8; to 0x8048
8072 defw ;S_cfa
; [DASMZ80] DRAW_pfa: start 0x7FC0 end 0x8074 type pointers

7FAA  INCY_nfa: defb 0x04+0x80,"INC","Y"+0x80
; [DASMZ80] INCY_nfa: start 0x7FAA end 0x7FAF type bytedata
7FAF  INCY_lfa: defw INCX_nfa
; [DASMZ80] INCY_lfa: start 0x7FAF end 0x7FB1 type pointers
7FB1  INCY_cfa: defw 0x7F23
; [DASMZ80] INCY_cfa: start 0x7FB1 end 0x7FB3 type pointers
7FB3  INCY_pfa: 
7FB3 defw 0x0000,0x0000
; [DASMZ80] INCY_pfa: start 0x7FB3 end 0x7FB7 type worddata

7F9D  INCX_nfa: defb 0x04+0x80,"INC","X"+0x80
; [DASMZ80] INCX_nfa: start 0x7F9D end 0x7FA2 type bytedata
7FA2  INCX_lfa: defw Y1_nfa
; [DASMZ80] INCX_lfa: start 0x7FA2 end 0x7FA4 type pointers
7FA4  INCX_cfa: defw 0x7F23
; [DASMZ80] INCX_cfa: start 0x7FA4 end 0x7FA6 type pointers
7FA6  INCX_pfa: 
7FA6 defw 0x0000,0x0000
; [DASMZ80] INCX_pfa: start 0x7FA6 end 0x7FAA type worddata

7F92  Y1_nfa: defb 0x02+0x80,"Y","1"+0x80
; [DASMZ80] Y1_nfa: start 0x7F92 end 0x7F95 type bytedata
7F95  Y1_lfa: defw X1_nfa
; [DASMZ80] Y1_lfa: start 0x7F95 end 0x7F97 type pointers
7F97  Y1_cfa: defw 0x7F23
; [DASMZ80] Y1_cfa: start 0x7F97 end 0x7F99 type pointers
7F99  Y1_pfa: 
7F99 defw 0x0000,0x0000
; [DASMZ80] Y1_pfa: start 0x7F99 end 0x7F9D type worddata

7F87  X1_nfa: defb 0x02+0x80,"X","1"+0x80
; [DASMZ80] X1_nfa: start 0x7F87 end 0x7F8A type bytedata
7F8A  X1_lfa: defw PLOT_nfa
; [DASMZ80] X1_lfa: start 0x7F8A end 0x7F8C type pointers
7F8C  X1_cfa: defw 0x7F23
; [DASMZ80] X1_cfa: start 0x7F8C end 0x7F8E type pointers
7F8E  X1_pfa: 
7F8E defw 0x0000,0x0000
; [DASMZ80] X1_pfa: start 0x7F8E end 0x7F92 type worddata

7F65  PLOT_nfa: defb 0x04+0x80,"PLO","T"+0x80
; [DASMZ80] PLOT_nfa: start 0x7F65 end 0x7F6A type bytedata
7F6A  PLOT_lfa: defw EXIT_nfa
; [DASMZ80] PLOT_lfa: start 0x7F6A end 0x7F6C type pointers
7F6C  PLOT_cfa: defw PLOT_pfa
; [DASMZ80] PLOT_cfa: start 0x7F6C end 0x7F6E type pointers
7F6E  PLOT_pfa: ; Word type not implemented.

7F54  EXIT_nfa: defb 0x04+0x80,"EXI","T"+0x80
; [DASMZ80] EXIT_nfa: start 0x7F54 end 0x7F59 type bytedata
7F59  EXIT_lfa: defw 2OVER_nfa
; [DASMZ80] EXIT_lfa: start 0x7F59 end 0x7F5B type pointers
7F5B  EXIT_cfa: defw 0x6306
; [DASMZ80] EXIT_cfa: start 0x7F5B end 0x7F5D type pointers
7F5D  EXIT_pfa: 
7F5D defw R>_cfa
7F5F defw DROP_cfa
7F61 defw ;S_cfa
; [DASMZ80] EXIT_pfa: start 0x7F5D end 0x7F63 type pointers

7F3A  2OVER_nfa: defb 0x05+0x80,"2OVE","R"+0x80
; [DASMZ80] 2OVER_nfa: start 0x7F3A end 0x7F40 type bytedata
7F40  2OVER_lfa: defw U.R_nfa
; [DASMZ80] 2OVER_lfa: start 0x7F40 end 0x7F42 type pointers
7F42  2OVER_cfa: defw 0x6306
; [DASMZ80] 2OVER_cfa: start 0x7F42 end 0x7F44 type pointers
7F44  2OVER_pfa: 
7F44 defw 2SWAP_cfa
7F46 defw 2DUP_cfa
7F48 defw >R_cfa
7F4A defw >R_cfa
7F4C defw 2SWAP_cfa
7F4E defw R>_cfa
7F50 defw R>_cfa
7F52 defw ;S_cfa
; [DASMZ80] 2OVER_pfa: start 0x7F44 end 0x7F54 type pointers

7F28  U.R_nfa: defb 0x03+0x80,"U.","R"+0x80
; [DASMZ80] U.R_nfa: start 0x7F28 end 0x7F2C type bytedata
7F2C  U.R_lfa: defw 2VARIABLE_nfa
; [DASMZ80] U.R_lfa: start 0x7F2C end 0x7F2E type pointers
7F2E  U.R_cfa: defw 0x6306
; [DASMZ80] U.R_cfa: start 0x7F2E end 0x7F30 type pointers
7F30  U.R_pfa: 
7F30 defw >R_cfa
7F32 defw 0_cfa
7F34 defw R>_cfa
7F36 defw D.R_cfa
7F38 defw ;S_cfa
; [DASMZ80] U.R_pfa: start 0x7F30 end 0x7F3A type pointers

7F11  2VARIABLE_nfa: defb 0x09+0x80,"2VARIABL","E"+0x80
; [DASMZ80] 2VARIABLE_nfa: start 0x7F11 end 0x7F1B type bytedata
7F1B  2VARIABLE_lfa: defw 2CONSTANT_nfa
; [DASMZ80] 2VARIABLE_lfa: start 0x7F1B end 0x7F1D type pointers
7F1D  2VARIABLE_cfa: defw 0x6306
; [DASMZ80] 2VARIABLE_cfa: start 0x7F1D end 0x7F1F type pointers
7F1F  2VARIABLE_pfa: 
7F1F defw 2CONSTANT_cfa
7F21 defw (;CODE)_cfa
; [DASMZ80] 2VARIABLE_pfa: start 0x7F1F end 0x7F23 type pointers

7EE2  2CONSTANT_nfa: defb 0x09+0x80,"2CONSTAN","T"+0x80
; [DASMZ80] 2CONSTANT_nfa: start 0x7EE2 end 0x7EEC type bytedata
7EEC  2CONSTANT_lfa: defw J_nfa
; [DASMZ80] 2CONSTANT_lfa: start 0x7EEC end 0x7EEE type pointers
7EEE  2CONSTANT_cfa: defw 0x6306
; [DASMZ80] 2CONSTANT_cfa: start 0x7EEE end 0x7EF0 type pointers
7EF0  2CONSTANT_pfa: 
7EF0 defw CREATE_cfa
7EF2 defw SMUDGE_cfa
7EF4 defw HERE_cfa
7EF6 defw 2!_cfa
7EF8 defw LIT_cfa,0x0004
7EFC defw ALLOT_cfa
7EFE defw (;CODE)_cfa
; [DASMZ80] 2CONSTANT_pfa: start 0x7EF0 end 0x7F00 type pointers

7ECE  J_nfa: defb 0x01+0x80,"J"+0x80
; [DASMZ80] J_nfa: start 0x7ECE end 0x7ED0 type bytedata
7ED0  J_lfa: defw I'_nfa
; [DASMZ80] J_lfa: start 0x7ED0 end 0x7ED2 type pointers
7ED2  J_cfa: defw J_pfa
; [DASMZ80] J_cfa: start 0x7ED2 end 0x7ED4 type pointers
7ED4  J_pfa: ; Word type not implemented.

7EBB  I'_nfa: defb 0x02+0x80,"I","'"+0x80
; [DASMZ80] I'_nfa: start 0x7EBB end 0x7EBE type bytedata
7EBE  I'_lfa: defw NOT_nfa
; [DASMZ80] I'_lfa: start 0x7EBE end 0x7EC0 type pointers
7EC0  I'_cfa: defw I'_pfa
; [DASMZ80] I'_cfa: start 0x7EC0 end 0x7EC2 type pointers
7EC2  I'_pfa: ; Word type not implemented.

7EAF  NOT_nfa: defb 0x03+0x80,"NO","T"+0x80
; [DASMZ80] NOT_nfa: start 0x7EAF end 0x7EB3 type bytedata
7EB3  NOT_lfa: defw INVERSE_nfa
; [DASMZ80] NOT_lfa: start 0x7EB3 end 0x7EB5 type pointers
7EB5  NOT_cfa: defw 0x6306
; [DASMZ80] NOT_cfa: start 0x7EB5 end 0x7EB7 type pointers
7EB7  NOT_pfa: 
7EB7 defw 0=_cfa
7EB9 defw ;S_cfa
; [DASMZ80] NOT_pfa: start 0x7EB7 end 0x7EBB type pointers

7E75  INVERSE_nfa: defb 0x07+0x80,"INVERS","E"+0x80
; [DASMZ80] INVERSE_nfa: start 0x7E75 end 0x7E7D type bytedata
7E7D  INVERSE_lfa: defw GOVER_nfa
; [DASMZ80] INVERSE_lfa: start 0x7E7D end 0x7E7F type pointers
7E7F  INVERSE_cfa: defw 0x6306
; [DASMZ80] INVERSE_cfa: start 0x7E7F end 0x7E81 type pointers
7E81  INVERSE_pfa: 
7E81 defw 0BRANCH_cfa,0x0018; to 0x7E9B
7E85 defw LIT_cfa,0x5C91
7E89 defw C@_cfa
7E8B defw LIT_cfa,0x0008
7E8F defw OR_cfa
7E91 defw LIT_cfa,0x5C91
7E95 defw !_cfa
7E97 defw BRANCH_cfa,0x0014; to 0x7EAD
7E9B defw LIT_cfa,0x5C91
7E9F defw C@_cfa
7EA1 defw LIT_cfa,0x00F7
7EA5 defw AND_cfa
7EA7 defw LIT_cfa,0x5C91
7EAB defw !_cfa
7EAD defw ;S_cfa
; [DASMZ80] INVERSE_pfa: start 0x7E81 end 0x7EAF type pointers

7E3F  GOVER_nfa: defb 0x05+0x80,"GOVE","R"+0x80
; [DASMZ80] GOVER_nfa: start 0x7E3F end 0x7E45 type bytedata
7E45  GOVER_lfa: defw BRIGHT_nfa
; [DASMZ80] GOVER_lfa: start 0x7E45 end 0x7E47 type pointers
7E47  GOVER_cfa: defw 0x6306
; [DASMZ80] GOVER_cfa: start 0x7E47 end 0x7E49 type pointers
7E49  GOVER_pfa: 
7E49 defw 0BRANCH_cfa,0x0016; to 0x7E61
7E4D defw LIT_cfa,0x5C91
7E51 defw C@_cfa
7E53 defw 2_cfa
7E55 defw OR_cfa
7E57 defw LIT_cfa,0x5C91
7E5B defw !_cfa
7E5D defw BRANCH_cfa,0x0014; to 0x7E73
7E61 defw LIT_cfa,0x5C91
7E65 defw C@_cfa
7E67 defw LIT_cfa,0x00FD
7E6B defw AND_cfa
7E6D defw LIT_cfa,0x5C91
7E71 defw !_cfa
7E73 defw ;S_cfa
; [DASMZ80] GOVER_pfa: start 0x7E49 end 0x7E75 type pointers

7E06  BRIGHT_nfa: defb 0x06+0x80,"BRIGH","T"+0x80
; [DASMZ80] BRIGHT_nfa: start 0x7E06 end 0x7E0D type bytedata
7E0D  BRIGHT_lfa: defw FLASH_nfa
; [DASMZ80] BRIGHT_lfa: start 0x7E0D end 0x7E0F type pointers
7E0F  BRIGHT_cfa: defw 0x6306
; [DASMZ80] BRIGHT_cfa: start 0x7E0F end 0x7E11 type pointers
7E11  BRIGHT_pfa: 
7E11 defw 0BRANCH_cfa,0x0018; to 0x7E2B
7E15 defw LIT_cfa,0x5C8D
7E19 defw C@_cfa
7E1B defw LIT_cfa,0x0040
7E1F defw OR_cfa
7E21 defw LIT_cfa,0x5C8D
7E25 defw !_cfa
7E27 defw BRANCH_cfa,0x0014; to 0x7E3D
7E2B defw LIT_cfa,0x5C8D
7E2F defw C@_cfa
7E31 defw LIT_cfa,0x00BF
7E35 defw AND_cfa
7E37 defw LIT_cfa,0x5C8D
7E3B defw !_cfa
7E3D defw ;S_cfa
; [DASMZ80] BRIGHT_pfa: start 0x7E11 end 0x7E3F type pointers

7DCE  FLASH_nfa: defb 0x05+0x80,"FLAS","H"+0x80
; [DASMZ80] FLASH_nfa: start 0x7DCE end 0x7DD4 type bytedata
7DD4  FLASH_lfa: defw INK_nfa
; [DASMZ80] FLASH_lfa: start 0x7DD4 end 0x7DD6 type pointers
7DD6  FLASH_cfa: defw 0x6306
; [DASMZ80] FLASH_cfa: start 0x7DD6 end 0x7DD8 type pointers
7DD8  FLASH_pfa: 
7DD8 defw 0BRANCH_cfa,0x0018; to 0x7DF2
7DDC defw LIT_cfa,0x5C8D
7DE0 defw C@_cfa
7DE2 defw LIT_cfa,0x0080
7DE6 defw OR_cfa
7DE8 defw LIT_cfa,0x5C8D
7DEC defw !_cfa
7DEE defw BRANCH_cfa,0x0014; to 0x7E04
7DF2 defw LIT_cfa,0x5C8D
7DF6 defw C@_cfa
7DF8 defw LIT_cfa,0x007F
7DFC defw AND_cfa
7DFE defw LIT_cfa,0x5C8D
7E02 defw !_cfa
7E04 defw ;S_cfa
; [DASMZ80] FLASH_pfa: start 0x7DD8 end 0x7E06 type pointers

7D30  INK_nfa: defb 0x03+0x80,"IN","K"+0x80
; [DASMZ80] INK_nfa: start 0x7D30 end 0x7D34 type bytedata
7D34  INK_lfa: defw POINT_nfa
; [DASMZ80] INK_lfa: start 0x7D34 end 0x7D36 type pointers
7D36  INK_cfa: defw 0x6306
; [DASMZ80] INK_cfa: start 0x7D36 end 0x7D38 type pointers
7D38  INK_pfa: 
7D38 defw ABS_cfa
7D3A defw DUP_cfa
7D3C defw LIT_cfa,0x0009
7D40 defw >_cfa
7D42 defw 0BRANCH_cfa,0x0008; to 0x7D4C
7D46 defw DROP_cfa
7D48 defw BRANCH_cfa,0x0082; to 0x7DCC
7D4C defw DUP_cfa
7D4E defw LIT_cfa,0x0009
7D52 defw =_cfa
7D54 defw 0BRANCH_cfa,0x001A; to 0x7D70
7D58 defw LIT_cfa,0x5C91
7D5C defw C@_cfa
7D5E defw LIT_cfa,0x0020
7D62 defw OR_cfa
7D64 defw LIT_cfa,0x5C91
7D68 defw C!_cfa
7D6A defw DROP_cfa
7D6C defw BRANCH_cfa,0x005E; to 0x7DCC
7D70 defw DUP_cfa
7D72 defw LIT_cfa,0x0008
7D76 defw =_cfa
7D78 defw 0BRANCH_cfa,0x001A; to 0x7D94
7D7C defw LIT_cfa,0x5C8E
7D80 defw C@_cfa
7D82 defw LIT_cfa,0x0007
7D86 defw OR_cfa
7D88 defw LIT_cfa,0x5C8E
7D8C defw C!_cfa
7D8E defw DROP_cfa
7D90 defw BRANCH_cfa,0x003A; to 0x7DCC
7D94 defw LIT_cfa,0x5C8D
7D98 defw C@_cfa
7D9A defw LIT_cfa,0x00F8
7D9E defw AND_cfa
7DA0 defw OR_cfa
7DA2 defw LIT_cfa,0x5C8D
7DA6 defw C!_cfa
7DA8 defw LIT_cfa,0x5C91
7DAC defw C@_cfa
7DAE defw LIT_cfa,0x00DF
7DB2 defw AND_cfa
7DB4 defw LIT_cfa,0x5C91
7DB8 defw !_cfa
7DBA defw LIT_cfa,0x5C8E
7DBE defw C@_cfa
7DC0 defw LIT_cfa,0x00F8
7DC4 defw AND_cfa
7DC6 defw LIT_cfa,0x5C8E
7DCA defw !_cfa
7DCC defw ;S_cfa
; [DASMZ80] INK_pfa: start 0x7D38 end 0x7DCE type pointers

7D07  POINT_nfa: defb 0x05+0x80,"POIN","T"+0x80
; [DASMZ80] POINT_nfa: start 0x7D07 end 0x7D0D type bytedata
7D0D  POINT_lfa: defw ATTR_nfa
; [DASMZ80] POINT_lfa: start 0x7D0D end 0x7D0F type pointers
7D0F  POINT_cfa: defw POINT_pfa
; [DASMZ80] POINT_cfa: start 0x7D0F end 0x7D11 type pointers
7D11  POINT_pfa: ; Word type not implemented.

7CE7  ATTR_nfa: defb 0x04+0x80,"ATT","R"+0x80
; [DASMZ80] ATTR_nfa: start 0x7CE7 end 0x7CEC type bytedata
7CEC  ATTR_lfa: defw PAPER_nfa
; [DASMZ80] ATTR_lfa: start 0x7CEC end 0x7CEE type pointers
7CEE  ATTR_cfa: defw ATTR_pfa
; [DASMZ80] ATTR_cfa: start 0x7CEE end 0x7CF0 type pointers
7CF0  ATTR_pfa: ; Word type not implemented.

7C41  PAPER_nfa: defb 0x05+0x80,"PAPE","R"+0x80
; [DASMZ80] PAPER_nfa: start 0x7C41 end 0x7C47 type bytedata
7C47  PAPER_lfa: defw BLEEP_nfa
; [DASMZ80] PAPER_lfa: start 0x7C47 end 0x7C49 type pointers
7C49  PAPER_cfa: defw 0x6306
; [DASMZ80] PAPER_cfa: start 0x7C49 end 0x7C4B type pointers
7C4B  PAPER_pfa: 
7C4B defw ABS_cfa
7C4D defw DUP_cfa
7C4F defw LIT_cfa,0x0009
7C53 defw >_cfa
7C55 defw 0BRANCH_cfa,0x0008; to 0x7C5F
7C59 defw DROP_cfa
7C5B defw BRANCH_cfa,0x0088; to 0x7CE5
7C5F defw DUP_cfa
7C61 defw LIT_cfa,0x0009
7C65 defw =_cfa
7C67 defw 0BRANCH_cfa,0x001A; to 0x7C83
7C6B defw LIT_cfa,0x5C91
7C6F defw C@_cfa
7C71 defw LIT_cfa,0x0080
7C75 defw OR_cfa
7C77 defw LIT_cfa,0x5C91
7C7B defw C!_cfa
7C7D defw DROP_cfa
7C7F defw BRANCH_cfa,0x0064; to 0x7CE5
7C83 defw DUP_cfa
7C85 defw LIT_cfa,0x0008
7C89 defw =_cfa
7C8B defw 0BRANCH_cfa,0x001A; to 0x7CA7
7C8F defw LIT_cfa,0x5C8E
7C93 defw C@_cfa
7C95 defw LIT_cfa,0x0038
7C99 defw OR_cfa
7C9B defw LIT_cfa,0x5C8E
7C9F defw C!_cfa
7CA1 defw DROP_cfa
7CA3 defw BRANCH_cfa,0x0040; to 0x7CE5
7CA7 defw LIT_cfa,0x0008
7CAB defw *_cfa
7CAD defw LIT_cfa,0x5C8D
7CB1 defw C@_cfa
7CB3 defw LIT_cfa,0x00C7
7CB7 defw AND_cfa
7CB9 defw OR_cfa
7CBB defw LIT_cfa,0x5C8D
7CBF defw C!_cfa
7CC1 defw LIT_cfa,0x5C91
7CC5 defw C@_cfa
7CC7 defw LIT_cfa,0x007F
7CCB defw AND_cfa
7CCD defw LIT_cfa,0x5C91
7CD1 defw !_cfa
7CD3 defw LIT_cfa,0x5C8E
7CD7 defw C@_cfa
7CD9 defw LIT_cfa,0x00C7
7CDD defw AND_cfa
7CDF defw LIT_cfa,0x5C8E
7CE3 defw !_cfa
7CE5 defw ;S_cfa
; [DASMZ80] PAPER_pfa: start 0x7C4B end 0x7CE7 type pointers

7C29  BLEEP_nfa: defb 0x05+0x80,"BLEE","P"+0x80
; [DASMZ80] BLEEP_nfa: start 0x7C29 end 0x7C2F type bytedata
7C2F  BLEEP_lfa: defw BORDER_nfa
; [DASMZ80] BLEEP_lfa: start 0x7C2F end 0x7C31 type pointers
7C31  BLEEP_cfa: defw BLEEP_pfa
; [DASMZ80] BLEEP_cfa: start 0x7C31 end 0x7C33 type pointers
7C33  BLEEP_pfa: ; Word type not implemented.

7C14  BORDER_nfa: defb 0x06+0x80,"BORDE","R"+0x80
; [DASMZ80] BORDER_nfa: start 0x7C14 end 0x7C1B type bytedata
7C1B  BORDER_lfa: defw AT_nfa
; [DASMZ80] BORDER_lfa: start 0x7C1B end 0x7C1D type pointers
7C1D  BORDER_cfa: defw BORDER_pfa
; [DASMZ80] BORDER_cfa: start 0x7C1D end 0x7C1F type pointers
7C1F  BORDER_pfa: ; Word type not implemented.

7BD7  AT_nfa: defb 0x02+0x80,"A","T"+0x80
; [DASMZ80] AT_nfa: start 0x7BD7 end 0x7BDA type bytedata
7BDA  AT_lfa: defw SCREEN_nfa
; [DASMZ80] AT_lfa: start 0x7BDA end 0x7BDC type pointers
7BDC  AT_cfa: defw 0x6306
; [DASMZ80] AT_cfa: start 0x7BDC end 0x7BDE type pointers
7BDE  AT_pfa: 
7BDE defw ABS_cfa
7BE0 defw DUP_cfa
7BE2 defw LIT_cfa,0x001F
7BE6 defw >_cfa
7BE8 defw 0BRANCH_cfa,0x0008; to 0x7BF2
7BEC defw 2DROP_cfa
7BEE defw BRANCH_cfa,0x0022; to 0x7C12
7BF2 defw SWAP_cfa
7BF4 defw ABS_cfa
7BF6 defw DUP_cfa
7BF8 defw LIT_cfa,0x0015
7BFC defw >_cfa
7BFE defw 0BRANCH_cfa,0x0008; to 0x7C08
7C02 defw 2DROP_cfa
7C04 defw BRANCH_cfa,0x000C; to 0x7C12
7C08 defw LIT_cfa,0x0016
7C0C defw EMIT_cfa
7C0E defw EMIT_cfa
7C10 defw EMIT_cfa
7C12 defw ;S_cfa
; [DASMZ80] AT_pfa: start 0x7BDE end 0x7C14 type pointers

7BB4  SCREEN_nfa: defb 0x06+0x80,"SCREE","N"+0x80
; [DASMZ80] SCREEN_nfa: start 0x7BB4 end 0x7BBB type bytedata
7BBB  SCREEN_lfa: defw OUTP_nfa
; [DASMZ80] SCREEN_lfa: start 0x7BBB end 0x7BBD type pointers
7BBD  SCREEN_cfa: defw SCREEN_pfa
; [DASMZ80] SCREEN_cfa: start 0x7BBD end 0x7BBF type pointers
7BBF  SCREEN_pfa: ; Word type not implemented.

7B9F  OUTP_nfa: defb 0x04+0x80,"OUT","P"+0x80
; [DASMZ80] OUTP_nfa: start 0x7B9F end 0x7BA4 type bytedata
7BA4  OUTP_lfa: defw INP_nfa
; [DASMZ80] OUTP_lfa: start 0x7BA4 end 0x7BA6 type pointers
7BA6  OUTP_cfa: defw OUTP_pfa
; [DASMZ80] OUTP_cfa: start 0x7BA6 end 0x7BA8 type pointers
7BA8  OUTP_pfa: ; Word type not implemented.

7B89  INP_nfa: defb 0x03+0x80,"IN","P"+0x80
; [DASMZ80] INP_nfa: start 0x7B89 end 0x7B8D type bytedata
7B8D  INP_lfa: defw PUSHDE_nfa
; [DASMZ80] INP_lfa: start 0x7B8D end 0x7B8F type pointers
7B8F  INP_cfa: defw INP_pfa
; [DASMZ80] INP_cfa: start 0x7B8F end 0x7B91 type pointers
7B91  INP_pfa: ; Word type not implemented.

7B7C  PUSHDE_nfa: defb 0x06+0x80,"PUSHD","E"+0x80
; [DASMZ80] PUSHDE_nfa: start 0x7B7C end 0x7B83 type bytedata
7B83  PUSHDE_lfa: defw PUSHHL_nfa
; [DASMZ80] PUSHDE_lfa: start 0x7B83 end 0x7B85 type pointers
7B85  PUSHDE_cfa: defw 0x6348
; [DASMZ80] PUSHDE_cfa: start 0x7B85 end 0x7B87 type pointers
7B87  PUSHDE_pfa: 
7B87 defw 0x5E6A
; [DASMZ80] PUSHDE_pfa: start 0x7B87 end 0x7B89 type worddata

7B6F  PUSHHL_nfa: defb 0x06+0x80,"PUSHH","L"+0x80
; [DASMZ80] PUSHHL_nfa: start 0x7B6F end 0x7B76 type bytedata
7B76  PUSHHL_lfa: defw NEXT_nfa
; [DASMZ80] PUSHHL_lfa: start 0x7B76 end 0x7B78 type pointers
7B78  PUSHHL_cfa: defw 0x6348
; [DASMZ80] PUSHHL_cfa: start 0x7B78 end 0x7B7A type pointers
7B7A  PUSHHL_pfa: 
7B7A defw 0x5E6B
; [DASMZ80] PUSHHL_pfa: start 0x7B7A end 0x7B7C type worddata

7B64  NEXT_nfa: defb 0x04+0x80,"NEX","T"+0x80
; [DASMZ80] NEXT_nfa: start 0x7B64 end 0x7B69 type bytedata
7B69  NEXT_lfa: defw WHERE_nfa
; [DASMZ80] NEXT_lfa: start 0x7B69 end 0x7B6B type pointers
7B6B  NEXT_cfa: defw 0x6348
; [DASMZ80] NEXT_cfa: start 0x7B6B end 0x7B6D type pointers
7B6D  NEXT_pfa: 
7B6D defw 0x5E6C
; [DASMZ80] NEXT_pfa: start 0x7B6D end 0x7B6F type worddata

77AE  WHERE_nfa: defb 0x05+0x80,"WHER","E"+0x80
; [DASMZ80] WHERE_nfa: start 0x77AE end 0x77B4 type bytedata
77B4  WHERE_lfa: defw EDITOR_nfa
; [DASMZ80] WHERE_lfa: start 0x77B4 end 0x77B6 type pointers
77B6  WHERE_cfa: defw 0x6306
; [DASMZ80] WHERE_cfa: start 0x77B6 end 0x77B8 type pointers
77B8  WHERE_pfa: 
77B8 defw DUP_cfa
77BA defw B/SCR_cfa
77BC defw /_cfa
77BE defw DUP_cfa
77C0 defw SCR_cfa
77C2 defw !_cfa
77C4 defw (.")_cfa
77C6 defb 0x06,"SCR # "
77CD defw DECIMAL_cfa
77CF defw ._cfa
77D1 defw SWAP_cfa
77D3 defw C/L_cfa
77D5 defw /MOD_cfa
77D7 defw C/L_cfa
77D9 defw *_cfa
77DB defw ROT_cfa
77DD defw BLOCK_cfa
77DF defw +_cfa
77E1 defw CR_cfa
77E3 defw C/L_cfa
77E5 defw TYPE_cfa
77E7 defw CR_cfa
77E9 defw HERE_cfa
77EB defw C@_cfa
77ED defw -_cfa
77EF defw SPACES_cfa
77F1 defw LIT_cfa,0x005E
77F5 defw EMIT_cfa
77F7 defw EDITOR_cfa
77F9 defw QUIT_cfa
77FB defw ;S_cfa
; [DASMZ80] WHERE_pfa: start 0x77B8 end 0x77FD type pointers

779B  EDITOR_nfa: defb 0x06+0x80+0x40,"EDITO","R"+0x80
; [DASMZ80] EDITOR_nfa: start 0x779B end 0x77A2 type bytedata
77A2  EDITOR_lfa: defw TRIAD_nfa
; [DASMZ80] EDITOR_lfa: start 0x77A2 end 0x77A4 type pointers
77A4  EDITOR_cfa: defw 0x67B8
; [DASMZ80] EDITOR_cfa: start 0x77A4 end 0x77A6 type pointers
77A6  EDITOR_pfa: ; Word type not implemented.

7769  TRIAD_nfa: defb 0x05+0x80,"TRIA","D"+0x80
; [DASMZ80] TRIAD_nfa: start 0x7769 end 0x776F type bytedata
776F  TRIAD_lfa: defw INDEX_nfa
; [DASMZ80] TRIAD_lfa: start 0x776F end 0x7771 type pointers
7771  TRIAD_cfa: defw 0x6306
; [DASMZ80] TRIAD_cfa: start 0x7771 end 0x7773 type pointers
7773  TRIAD_pfa: 
7773 defw CLS_cfa
7775 defw 3_cfa
7777 defw /_cfa
7779 defw 3_cfa
777B defw *_cfa
777D defw 3_cfa
777F defw OVER_cfa
7781 defw +_cfa
7783 defw SWAP_cfa
7785 defw (DO)_cfa
7787 defw CR_cfa
7789 defw I_cfa
778B defw LIST_cfa
778D defw ?TERMINAL_cfa
778F defw 0BRANCH_cfa,0x0004; to 0x7795
7793 defw LEAVE_cfa
7795 defw (LOOP)_cfa,0xFFF0; to 0x7787
7799 defw ;S_cfa
; [DASMZ80] TRIAD_pfa: start 0x7773 end 0x779B type pointers

7739  INDEX_nfa: defb 0x05+0x80,"INDE","X"+0x80
; [DASMZ80] INDEX_nfa: start 0x7739 end 0x773F type bytedata
773F  INDEX_lfa: defw FORGET_nfa
; [DASMZ80] INDEX_lfa: start 0x773F end 0x7741 type pointers
7741  INDEX_cfa: defw 0x6306
; [DASMZ80] INDEX_cfa: start 0x7741 end 0x7743 type pointers
7743  INDEX_pfa: 
7743 defw NOOP_cfa
7745 defw 1+_cfa
7747 defw SWAP_cfa
7749 defw (DO)_cfa
774B defw CR_cfa
774D defw I_cfa
774F defw 3_cfa
7751 defw .R_cfa
7753 defw SPACE_cfa
7755 defw 0_cfa
7757 defw I_cfa
7759 defw .LINE_cfa
775B defw ?TERMINAL_cfa
775D defw 0BRANCH_cfa,0x0004; to 0x7763
7761 defw LEAVE_cfa
7763 defw (LOOP)_cfa,0xFFE6; to 0x774B
7767 defw ;S_cfa
; [DASMZ80] INDEX_pfa: start 0x7743 end 0x7769 type pointers

76FA  FORGET_nfa: defb 0x06+0x80,"FORGE","T"+0x80
; [DASMZ80] FORGET_nfa: start 0x76FA end 0x7701 type bytedata
7701  FORGET_lfa: defw FREE_nfa
; [DASMZ80] FORGET_lfa: start 0x7701 end 0x7703 type pointers
7703  FORGET_cfa: defw 0x6306
; [DASMZ80] FORGET_cfa: start 0x7703 end 0x7705 type pointers
7705  FORGET_pfa: 
7705 defw CURRENT_cfa
7707 defw @_cfa
7709 defw CONTEXT_cfa
770B defw @_cfa
770D defw -_cfa
770F defw LIT_cfa,0x0018
7713 defw ?ERROR_cfa
7715 defw '_cfa
7717 defw DUP_cfa
7719 defw FENCE_cfa
771B defw @_cfa
771D defw U<_cfa
771F defw LIT_cfa,0x0015
7723 defw ?ERROR_cfa
7725 defw DUP_cfa
7727 defw NFA_cfa
7729 defw DP_cfa
772B defw !_cfa
772D defw LFA_cfa
772F defw @_cfa
7731 defw CURRENT_cfa
7733 defw @_cfa
7735 defw !_cfa
7737 defw ;S_cfa
; [DASMZ80] FORGET_pfa: start 0x7705 end 0x7739 type pointers

76E9  FREE_nfa: defb 0x04+0x80,"FRE","E"+0x80
; [DASMZ80] FREE_nfa: start 0x76E9 end 0x76EE type bytedata
76EE  FREE_lfa: defw SIZE_nfa
; [DASMZ80] FREE_lfa: start 0x76EE end 0x76F0 type pointers
76F0  FREE_cfa: defw 0x6306
; [DASMZ80] FREE_cfa: start 0x76F0 end 0x76F2 type pointers
76F2  FREE_pfa: 
76F2 defw 0_cfa
76F4 defw HERE_cfa
76F6 defw -_cfa
76F8 defw ;S_cfa
; [DASMZ80] FREE_pfa: start 0x76F2 end 0x76FA type pointers

76D6  SIZE_nfa: defb 0x04+0x80,"SIZ","E"+0x80
; [DASMZ80] SIZE_nfa: start 0x76D6 end 0x76DB type bytedata
76DB  SIZE_lfa: defw 2SWAP_nfa
; [DASMZ80] SIZE_lfa: start 0x76DB end 0x76DD type pointers
76DD  SIZE_cfa: defw 0x6306
; [DASMZ80] SIZE_cfa: start 0x76DD end 0x76DF type pointers
76DF  SIZE_pfa: 
76DF defw HERE_cfa
76E1 defw 0_cfa
76E3 defw +ORIGIN_cfa
76E5 defw -_cfa
76E7 defw ;S_cfa
; [DASMZ80] SIZE_pfa: start 0x76DF end 0x76E9 type pointers

76C2  2SWAP_nfa: defb 0x05+0x80,"2SWA","P"+0x80
; [DASMZ80] 2SWAP_nfa: start 0x76C2 end 0x76C8 type bytedata
76C8  2SWAP_lfa: defw 2DROP_nfa
; [DASMZ80] 2SWAP_lfa: start 0x76C8 end 0x76CA type pointers
76CA  2SWAP_cfa: defw 0x6306
; [DASMZ80] 2SWAP_cfa: start 0x76CA end 0x76CC type pointers
76CC  2SWAP_pfa: 
76CC defw ROT_cfa
76CE defw >R_cfa
76D0 defw ROT_cfa
76D2 defw R>_cfa
76D4 defw ;S_cfa
; [DASMZ80] 2SWAP_pfa: start 0x76CC end 0x76D6 type pointers

76B2  2DROP_nfa: defb 0x05+0x80,"2DRO","P"+0x80
; [DASMZ80] 2DROP_nfa: start 0x76B2 end 0x76B8 type bytedata
76B8  2DROP_lfa: defw VERIFY_nfa
; [DASMZ80] 2DROP_lfa: start 0x76B8 end 0x76BA type pointers
76BA  2DROP_cfa: defw 0x6306
; [DASMZ80] 2DROP_cfa: start 0x76BA end 0x76BC type pointers
76BC  2DROP_pfa: 
76BC defw DROP_cfa
76BE defw DROP_cfa
76C0 defw ;S_cfa
; [DASMZ80] 2DROP_pfa: start 0x76BC end 0x76C2 type pointers

76A1  VERIFY_nfa: defb 0x06+0x80,"VERIF","Y"+0x80
; [DASMZ80] VERIFY_nfa: start 0x76A1 end 0x76A8 type bytedata
76A8  VERIFY_lfa: defw SAVET_nfa
; [DASMZ80] VERIFY_lfa: start 0x76A8 end 0x76AA type pointers
76AA  VERIFY_cfa: defw 0x6306
; [DASMZ80] VERIFY_cfa: start 0x76AA end 0x76AC type pointers
76AC  VERIFY_pfa: 
76AC defw 2_cfa
76AE defw (BANK-TAPE)_cfa
76B0 defw ;S_cfa
; [DASMZ80] VERIFY_pfa: start 0x76AC end 0x76B2 type pointers

768F  SAVET_nfa: defb 0x05+0x80,"SAVE","T"+0x80
; [DASMZ80] SAVET_nfa: start 0x768F end 0x7695 type bytedata
7695  SAVET_lfa: defw LOADT_nfa
; [DASMZ80] SAVET_lfa: start 0x7695 end 0x7697 type pointers
7697  SAVET_cfa: defw 0x6306
; [DASMZ80] SAVET_cfa: start 0x7697 end 0x7699 type pointers
7699  SAVET_pfa: 
7699 defw FLUSH_cfa
769B defw 0_cfa
769D defw (BANK-TAPE)_cfa
769F defw ;S_cfa
; [DASMZ80] SAVET_pfa: start 0x7699 end 0x76A1 type pointers

767F  LOADT_nfa: defb 0x05+0x80,"LOAD","T"+0x80
; [DASMZ80] LOADT_nfa: start 0x767F end 0x7685 type bytedata
7685  LOADT_lfa: defw LINE_nfa
; [DASMZ80] LOADT_lfa: start 0x7685 end 0x7687 type pointers
7687  LOADT_cfa: defw 0x6306
; [DASMZ80] LOADT_cfa: start 0x7687 end 0x7689 type pointers
7689  LOADT_pfa: 
7689 defw 1_cfa
768B defw (BANK-TAPE)_cfa
768D defw ;S_cfa
; [DASMZ80] LOADT_pfa: start 0x7689 end 0x768F type pointers

765E  LINE_nfa: defb 0x04+0x80,"LIN","E"+0x80
; [DASMZ80] LINE_nfa: start 0x765E end 0x7663 type bytedata
7663  LINE_lfa: defw TEXT_nfa
; [DASMZ80] LINE_lfa: start 0x7663 end 0x7665 type pointers
7665  LINE_cfa: defw 0x6306
; [DASMZ80] LINE_cfa: start 0x7665 end 0x7667 type pointers
7667  LINE_pfa: 
7667 defw DUP_cfa
7669 defw LIT_cfa,0xFFF0
766D defw AND_cfa
766F defw LIT_cfa,0x0017
7673 defw ?ERROR_cfa
7675 defw SCR_cfa
7677 defw @_cfa
7679 defw (LINE)_cfa
767B defw DROP_cfa
767D defw ;S_cfa
; [DASMZ80] LINE_pfa: start 0x7667 end 0x767F type pointers

763F  TEXT_nfa: defb 0x04+0x80,"TEX","T"+0x80
; [DASMZ80] TEXT_nfa: start 0x763F end 0x7644 type bytedata
7644  TEXT_lfa: defw MON_nfa
; [DASMZ80] TEXT_lfa: start 0x7644 end 0x7646 type pointers
7646  TEXT_cfa: defw 0x6306
; [DASMZ80] TEXT_cfa: start 0x7646 end 0x7648 type pointers
7648  TEXT_pfa: 
7648 defw HERE_cfa
764A defw C/L_cfa
764C defw 1+_cfa
764E defw BLANKS_cfa
7650 defw WORD_cfa
7652 defw HERE_cfa
7654 defw PAD_cfa
7656 defw C/L_cfa
7658 defw 1+_cfa
765A defw CMOVE_cfa
765C defw ;S_cfa
; [DASMZ80] TEXT_pfa: start 0x7648 end 0x765E type pointers

762B  MON_nfa: defb 0x03+0x80,"MO","N"+0x80
; [DASMZ80] MON_nfa: start 0x762B end 0x762F type bytedata
762F  MON_lfa: defw (TAPE)_nfa
; [DASMZ80] MON_lfa: start 0x762F end 0x7631 type pointers
7631  MON_cfa: defw 0x763D
; [DASMZ80] MON_cfa: start 0x7631 end 0x7633 type pointers
7633  MON_pfa: ; Word type not implemented.

7608  (TAPE)_nfa: defb 0x06+0x80,"(TAPE",")"+0x80
; [DASMZ80] (TAPE)_nfa: start 0x7608 end 0x760F type bytedata
760F  (TAPE)_lfa: defw .CPU_nfa
; [DASMZ80] (TAPE)_lfa: start 0x760F end 0x7611 type pointers
7611  (TAPE)_cfa: defw (TAPE)_pfa
; [DASMZ80] (TAPE)_cfa: start 0x7611 end 0x7613 type pointers
7613  (TAPE)_pfa: ; Word type not implemented.

75CB  .CPU_nfa: defb 0x04+0x80,".CP","U"+0x80
; [DASMZ80] .CPU_nfa: start 0x75CB end 0x75D0 type bytedata
75D0  .CPU_lfa: defw CLS_nfa
; [DASMZ80] .CPU_lfa: start 0x75D0 end 0x75D2 type pointers
75D2  .CPU_cfa: defw 0x6306
; [DASMZ80] .CPU_cfa: start 0x75D2 end 0x75D4 type pointers
75D4  .CPU_pfa: 
75D4 defw (.")_cfa
75D6 defb 0x0B,"ZX Spectrum"
75E2 defw NOOP_cfa
75E4 defw ;S_cfa
; [DASMZ80] .CPU_pfa: start 0x75D4 end 0x75E6 type pointers

75B1  CLS_nfa: defb 0x03+0x80,"CL","S"+0x80
; [DASMZ80] CLS_nfa: start 0x75B1 end 0x75B5 type bytedata
75B5  CLS_lfa: defw LINK_nfa
; [DASMZ80] CLS_lfa: start 0x75B5 end 0x75B7 type pointers
75B7  CLS_cfa: defw CLS_pfa
; [DASMZ80] CLS_cfa: start 0x75B7 end 0x75B9 type pointers
75B9  CLS_pfa: ; Word type not implemented.

759B  LINK_nfa: defb 0x04+0x80,"LIN","K"+0x80
; [DASMZ80] LINK_nfa: start 0x759B end 0x75A0 type bytedata
75A0  LINK_lfa: defw LIST_nfa
; [DASMZ80] LINK_lfa: start 0x75A0 end 0x75A2 type pointers
75A2  LINK_cfa: defw LINK_pfa
; [DASMZ80] LINK_cfa: start 0x75A2 end 0x75A4 type pointers
75A4  LINK_pfa: ; Word type not implemented.

7551  LIST_nfa: defb 0x04+0x80,"LIS","T"+0x80
; [DASMZ80] LIST_nfa: start 0x7551 end 0x7556 type bytedata
7556  LIST_lfa: defw VLIST_nfa
; [DASMZ80] LIST_lfa: start 0x7556 end 0x7558 type pointers
7558  LIST_cfa: defw 0x6306
; [DASMZ80] LIST_cfa: start 0x7558 end 0x755A type pointers
755A  LIST_pfa: 
755A defw NOOP_cfa
755C defw CR_cfa
755E defw DUP_cfa
7560 defw SCR_cfa
7562 defw !_cfa
7564 defw (.")_cfa
7566 defb 0x06,"SCR # "
756D defw ._cfa
756F defw LIT_cfa,0x0010
7573 defw 0_cfa
7575 defw (DO)_cfa
7577 defw CR_cfa
7579 defw I_cfa
757B defw LIT_cfa,0x0002
757F defw .R_cfa
7581 defw SPACE_cfa
7583 defw I_cfa
7585 defw SCR_cfa
7587 defw @_cfa
7589 defw .LINE_cfa
758B defw ?TERMINAL_cfa
758D defw 0BRANCH_cfa,0x0004; to 0x7593
7591 defw LEAVE_cfa
7593 defw (LOOP)_cfa,0xFFE2; to 0x7577
7597 defw CR_cfa
7599 defw ;S_cfa
; [DASMZ80] LIST_pfa: start 0x755A end 0x759B type pointers

7503  VLIST_nfa: defb 0x05+0x80,"VLIS","T"+0x80
; [DASMZ80] VLIST_nfa: start 0x7503 end 0x7509 type bytedata
7509  VLIST_lfa: defw U._nfa
; [DASMZ80] VLIST_lfa: start 0x7509 end 0x750B type pointers
750B  VLIST_cfa: defw 0x6306
; [DASMZ80] VLIST_cfa: start 0x750B end 0x750D type pointers
750D  VLIST_pfa: 
750D defw LIT_cfa,0x0080
7511 defw OUT_cfa
7513 defw !_cfa
7515 defw CONTEXT_cfa
7517 defw @_cfa
7519 defw @_cfa
751B defw OUT_cfa
751D defw @_cfa
751F defw LIT_cfa,0x001F
7523 defw LIT_cfa,0x0008
7527 defw -_cfa
7529 defw >_cfa
752B defw 0BRANCH_cfa,0x000A; to 0x7537
752F defw CR_cfa
7531 defw 0_cfa
7533 defw OUT_cfa
7535 defw !_cfa
7537 defw DUP_cfa
7539 defw ID._cfa
753B defw PFA_cfa
753D defw LFA_cfa
753F defw @_cfa
7541 defw DUP_cfa
7543 defw 0=_cfa
7545 defw ?TERMINAL_cfa
7547 defw OR_cfa
7549 defw 0BRANCH_cfa,0xFFD0; to 0x751B
754D defw DROP_cfa
754F defw ;S_cfa
; [DASMZ80] VLIST_pfa: start 0x750D end 0x7551 type pointers

74F6  U._nfa: defb 0x02+0x80,"U","."+0x80
; [DASMZ80] U._nfa: start 0x74F6 end 0x74F9 type bytedata
74F9  U._lfa: defw ?_nfa
; [DASMZ80] U._lfa: start 0x74F9 end 0x74FB type pointers
74FB  U._cfa: defw 0x6306
; [DASMZ80] U._cfa: start 0x74FB end 0x74FD type pointers
74FD  U._pfa: 
74FD defw 0_cfa
74FF defw D._cfa
7501 defw ;S_cfa
; [DASMZ80] U._pfa: start 0x74FD end 0x7503 type pointers

74EA  ?_nfa: defb 0x01+0x80,"?"+0x80
; [DASMZ80] ?_nfa: start 0x74EA end 0x74EC type bytedata
74EC  ?_lfa: defw ._nfa
; [DASMZ80] ?_lfa: start 0x74EC end 0x74EE type pointers
74EE  ?_cfa: defw 0x6306
; [DASMZ80] ?_cfa: start 0x74EE end 0x74F0 type pointers
74F0  ?_pfa: 
74F0 defw @_cfa
74F2 defw ._cfa
74F4 defw ;S_cfa
; [DASMZ80] ?_pfa: start 0x74F0 end 0x74F6 type pointers

74DE  ._nfa: defb 0x01+0x80,"."+0x80
; [DASMZ80] ._nfa: start 0x74DE end 0x74E0 type bytedata
74E0  ._lfa: defw D._nfa
; [DASMZ80] ._lfa: start 0x74E0 end 0x74E2 type pointers
74E2  ._cfa: defw 0x6306
; [DASMZ80] ._cfa: start 0x74E2 end 0x74E4 type pointers
74E4  ._pfa: 
74E4 defw S->D_cfa
74E6 defw D._cfa
74E8 defw ;S_cfa
; [DASMZ80] ._pfa: start 0x74E4 end 0x74EA type pointers

74CF  D._nfa: defb 0x02+0x80,"D","."+0x80
; [DASMZ80] D._nfa: start 0x74CF end 0x74D2 type bytedata
74D2  D._lfa: defw .R_nfa
; [DASMZ80] D._lfa: start 0x74D2 end 0x74D4 type pointers
74D4  D._cfa: defw 0x6306
; [DASMZ80] D._cfa: start 0x74D4 end 0x74D6 type pointers
74D6  D._pfa: 
74D6 defw 0_cfa
74D8 defw D.R_cfa
74DA defw SPACE_cfa
74DC defw ;S_cfa
; [DASMZ80] D._pfa: start 0x74D6 end 0x74DE type pointers

74BE  .R_nfa: defb 0x02+0x80,".","R"+0x80
; [DASMZ80] .R_nfa: start 0x74BE end 0x74C1 type bytedata
74C1  .R_lfa: defw D.R_nfa
; [DASMZ80] .R_lfa: start 0x74C1 end 0x74C3 type pointers
74C3  .R_cfa: defw 0x6306
; [DASMZ80] .R_cfa: start 0x74C3 end 0x74C5 type pointers
74C5  .R_pfa: 
74C5 defw >R_cfa
74C7 defw S->D_cfa
74C9 defw R>_cfa
74CB defw D.R_cfa
74CD defw ;S_cfa
; [DASMZ80] .R_pfa: start 0x74C5 end 0x74CF type pointers

749A  D.R_nfa: defb 0x03+0x80,"D.","R"+0x80
; [DASMZ80] D.R_nfa: start 0x749A end 0x749E type bytedata
749E  D.R_lfa: defw #S_nfa
; [DASMZ80] D.R_lfa: start 0x749E end 0x74A0 type pointers
74A0  D.R_cfa: defw 0x6306
; [DASMZ80] D.R_cfa: start 0x74A0 end 0x74A2 type pointers
74A2  D.R_pfa: 
74A2 defw >R_cfa
74A4 defw SWAP_cfa
74A6 defw OVER_cfa
74A8 defw DABS_cfa
74AA defw <#_cfa
74AC defw #S_cfa
74AE defw SIGN_cfa
74B0 defw #>_cfa
74B2 defw R>_cfa
74B4 defw OVER_cfa
74B6 defw -_cfa
74B8 defw SPACES_cfa
74BA defw TYPE_cfa
74BC defw ;S_cfa
; [DASMZ80] D.R_pfa: start 0x74A2 end 0x74BE type pointers

7483  #S_nfa: defb 0x02+0x80,"#","S"+0x80
; [DASMZ80] #S_nfa: start 0x7483 end 0x7486 type bytedata
7486  #S_lfa: defw #_nfa
; [DASMZ80] #S_lfa: start 0x7486 end 0x7488 type pointers
7488  #S_cfa: defw 0x6306
; [DASMZ80] #S_cfa: start 0x7488 end 0x748A type pointers
748A  #S_pfa: 
748A defw #_cfa
748C defw OVER_cfa
748E defw OVER_cfa
7490 defw OR_cfa
7492 defw 0=_cfa
7494 defw 0BRANCH_cfa,0xFFF4; to 0x748A
7498 defw ;S_cfa
; [DASMZ80] #S_pfa: start 0x748A end 0x749A type pointers

7459  #_nfa: defb 0x01+0x80,"#"+0x80
; [DASMZ80] #_nfa: start 0x7459 end 0x745B type bytedata
745B  #_lfa: defw SIGN_nfa
; [DASMZ80] #_lfa: start 0x745B end 0x745D type pointers
745D  #_cfa: defw 0x6306
; [DASMZ80] #_cfa: start 0x745D end 0x745F type pointers
745F  #_pfa: 
745F defw BASE_cfa
7461 defw @_cfa
7463 defw M/MOD_cfa
7465 defw ROT_cfa
7467 defw LIT_cfa,0x0009
746B defw OVER_cfa
746D defw <_cfa
746F defw 0BRANCH_cfa,0x0008; to 0x7479
7473 defw LIT_cfa,0x0007
7477 defw +_cfa
7479 defw LIT_cfa,0x0030
747D defw +_cfa
747F defw HOLD_cfa
7481 defw ;S_cfa
; [DASMZ80] #_pfa: start 0x745F end 0x7483 type pointers

7440  SIGN_nfa: defb 0x04+0x80,"SIG","N"+0x80
; [DASMZ80] SIGN_nfa: start 0x7440 end 0x7445 type bytedata
7445  SIGN_lfa: defw #>_nfa
; [DASMZ80] SIGN_lfa: start 0x7445 end 0x7447 type pointers
7447  SIGN_cfa: defw 0x6306
; [DASMZ80] SIGN_cfa: start 0x7447 end 0x7449 type pointers
7449  SIGN_pfa: 
7449 defw ROT_cfa
744B defw 0<_cfa
744D defw 0BRANCH_cfa,0x0008; to 0x7457
7451 defw LIT_cfa,0x002D
7455 defw HOLD_cfa
7457 defw ;S_cfa
; [DASMZ80] SIGN_pfa: start 0x7449 end 0x7459 type pointers

7429  #>_nfa: defb 0x02+0x80,"#",">"+0x80
; [DASMZ80] #>_nfa: start 0x7429 end 0x742C type bytedata
742C  #>_lfa: defw <#_nfa
; [DASMZ80] #>_lfa: start 0x742C end 0x742E type pointers
742E  #>_cfa: defw 0x6306
; [DASMZ80] #>_cfa: start 0x742E end 0x7430 type pointers
7430  #>_pfa: 
7430 defw DROP_cfa
7432 defw DROP_cfa
7434 defw HLD_cfa
7436 defw @_cfa
7438 defw PAD_cfa
743A defw OVER_cfa
743C defw -_cfa
743E defw ;S_cfa
; [DASMZ80] #>_pfa: start 0x7430 end 0x7440 type pointers

741A  <#_nfa: defb 0x02+0x80,"<","#"+0x80
; [DASMZ80] <#_nfa: start 0x741A end 0x741D type bytedata
741D  <#_lfa: defw SPACES_nfa
; [DASMZ80] <#_lfa: start 0x741D end 0x741F type pointers
741F  <#_cfa: defw 0x6306
; [DASMZ80] <#_cfa: start 0x741F end 0x7421 type pointers
7421  <#_pfa: 
7421 defw PAD_cfa
7423 defw HLD_cfa
7425 defw !_cfa
7427 defw ;S_cfa
; [DASMZ80] <#_pfa: start 0x7421 end 0x7429 type pointers

73F9  SPACES_nfa: defb 0x06+0x80,"SPACE","S"+0x80
; [DASMZ80] SPACES_nfa: start 0x73F9 end 0x7400 type bytedata
7400  SPACES_lfa: defw WHILE_nfa
; [DASMZ80] SPACES_lfa: start 0x7400 end 0x7402 type pointers
7402  SPACES_cfa: defw 0x6306
; [DASMZ80] SPACES_cfa: start 0x7402 end 0x7404 type pointers
7404  SPACES_pfa: 
7404 defw 0_cfa
7406 defw MAX_cfa
7408 defw -DUP_cfa
740A defw 0BRANCH_cfa,0x000C; to 0x7418
740E defw 0_cfa
7410 defw (DO)_cfa
7412 defw SPACE_cfa
7414 defw (LOOP)_cfa,0xFFFC; to 0x7412
7418 defw ;S_cfa
; [DASMZ80] SPACES_pfa: start 0x7404 end 0x741A type pointers

73E9  WHILE_nfa: defb 0x05+0x80+0x40,"WHIL","E"+0x80
; [DASMZ80] WHILE_nfa: start 0x73E9 end 0x73EF type bytedata
73EF  WHILE_lfa: defw ELSE_nfa
; [DASMZ80] WHILE_lfa: start 0x73EF end 0x73F1 type pointers
73F1  WHILE_cfa: defw 0x6306
; [DASMZ80] WHILE_cfa: start 0x73F1 end 0x73F3 type pointers
73F3  WHILE_pfa: 
73F3 defw IF_cfa
73F5 defw 2+_cfa
73F7 defw ;S_cfa
; [DASMZ80] WHILE_pfa: start 0x73F3 end 0x73F9 type pointers

73C8  ELSE_nfa: defb 0x04+0x80+0x40,"ELS","E"+0x80
; [DASMZ80] ELSE_nfa: start 0x73C8 end 0x73CD type bytedata
73CD  ELSE_lfa: defw IF_nfa
; [DASMZ80] ELSE_lfa: start 0x73CD end 0x73CF type pointers
73CF  ELSE_cfa: defw 0x6306
; [DASMZ80] ELSE_cfa: start 0x73CF end 0x73D1 type pointers
73D1  ELSE_pfa: 
73D1 defw 2_cfa
73D3 defw ?PAIRS_cfa
73D5 defw COMPILE_cfa,BRANCH_cfa
73D9 defw HERE_cfa
73DB defw 0_cfa
73DD defw ,_cfa
73DF defw SWAP_cfa
73E1 defw 2_cfa
73E3 defw ENDIF_cfa
73E5 defw 2_cfa
73E7 defw ;S_cfa
; [DASMZ80] ELSE_pfa: start 0x73D1 end 0x73E9 type pointers

73B3  IF_nfa: defb 0x02+0x80+0x40,"I","F"+0x80
; [DASMZ80] IF_nfa: start 0x73B3 end 0x73B6 type bytedata
73B6  IF_lfa: defw REPEAT_nfa
; [DASMZ80] IF_lfa: start 0x73B6 end 0x73B8 type pointers
73B8  IF_cfa: defw 0x6306
; [DASMZ80] IF_cfa: start 0x73B8 end 0x73BA type pointers
73BA  IF_pfa: 
73BA defw COMPILE_cfa,0BRANCH_cfa
73BE defw HERE_cfa
73C0 defw 0_cfa
73C2 defw ,_cfa
73C4 defw 2_cfa
73C6 defw ;S_cfa
; [DASMZ80] IF_pfa: start 0x73BA end 0x73C8 type pointers

7396  REPEAT_nfa: defb 0x06+0x80+0x40,"REPEA","T"+0x80
; [DASMZ80] REPEAT_nfa: start 0x7396 end 0x739D type bytedata
739D  REPEAT_lfa: defw AGAIN_nfa
; [DASMZ80] REPEAT_lfa: start 0x739D end 0x739F type pointers
739F  REPEAT_cfa: defw 0x6306
; [DASMZ80] REPEAT_cfa: start 0x739F end 0x73A1 type pointers
73A1  REPEAT_pfa: 
73A1 defw >R_cfa
73A3 defw >R_cfa
73A5 defw AGAIN_cfa
73A7 defw R>_cfa
73A9 defw R>_cfa
73AB defw 2_cfa
73AD defw -_cfa
73AF defw ENDIF_cfa
73B1 defw ;S_cfa
; [DASMZ80] REPEAT_pfa: start 0x73A1 end 0x73B3 type pointers

7380  AGAIN_nfa: defb 0x05+0x80+0x40,"AGAI","N"+0x80
; [DASMZ80] AGAIN_nfa: start 0x7380 end 0x7386 type bytedata
7386  AGAIN_lfa: defw END_nfa
; [DASMZ80] AGAIN_lfa: start 0x7386 end 0x7388 type pointers
7388  AGAIN_cfa: defw 0x6306
; [DASMZ80] AGAIN_cfa: start 0x7388 end 0x738A type pointers
738A  AGAIN_pfa: 
738A defw 1_cfa
738C defw ?PAIRS_cfa
738E defw COMPILE_cfa,BRANCH_cfa
7392 defw BACK_cfa
7394 defw ;S_cfa
; [DASMZ80] AGAIN_pfa: start 0x738A end 0x7396 type pointers

7374  END_nfa: defb 0x03+0x80+0x40,"EN","D"+0x80
; [DASMZ80] END_nfa: start 0x7374 end 0x7378 type bytedata
7378  END_lfa: defw UNTIL_nfa
; [DASMZ80] END_lfa: start 0x7378 end 0x737A type pointers
737A  END_cfa: defw 0x6306
; [DASMZ80] END_cfa: start 0x737A end 0x737C type pointers
737C  END_pfa: 
737C defw UNTIL_cfa
737E defw ;S_cfa
; [DASMZ80] END_pfa: start 0x737C end 0x7380 type pointers

735E  UNTIL_nfa: defb 0x05+0x80+0x40,"UNTI","L"+0x80
; [DASMZ80] UNTIL_nfa: start 0x735E end 0x7364 type bytedata
7364  UNTIL_lfa: defw +LOOP_nfa
; [DASMZ80] UNTIL_lfa: start 0x7364 end 0x7366 type pointers
7366  UNTIL_cfa: defw 0x6306
; [DASMZ80] UNTIL_cfa: start 0x7366 end 0x7368 type pointers
7368  UNTIL_pfa: 
7368 defw 1_cfa
736A defw ?PAIRS_cfa
736C defw COMPILE_cfa,0BRANCH_cfa
7370 defw BACK_cfa
7372 defw ;S_cfa
; [DASMZ80] UNTIL_pfa: start 0x7368 end 0x7374 type pointers

7348  +LOOP_nfa: defb 0x05+0x80+0x40,"+LOO","P"+0x80
; [DASMZ80] +LOOP_nfa: start 0x7348 end 0x734E type bytedata
734E  +LOOP_lfa: defw LOOP_nfa
; [DASMZ80] +LOOP_lfa: start 0x734E end 0x7350 type pointers
7350  +LOOP_cfa: defw 0x6306
; [DASMZ80] +LOOP_cfa: start 0x7350 end 0x7352 type pointers
7352  +LOOP_pfa: 
7352 defw 3_cfa
7354 defw ?PAIRS_cfa
7356 defw COMPILE_cfa,(+LOOP)_cfa
735A defw BACK_cfa
735C defw ;S_cfa
; [DASMZ80] +LOOP_pfa: start 0x7352 end 0x735E type pointers

7333  LOOP_nfa: defb 0x04+0x80+0x40,"LOO","P"+0x80
; [DASMZ80] LOOP_nfa: start 0x7333 end 0x7338 type bytedata
7338  LOOP_lfa: defw DO_nfa
; [DASMZ80] LOOP_lfa: start 0x7338 end 0x733A type pointers
733A  LOOP_cfa: defw 0x6306
; [DASMZ80] LOOP_cfa: start 0x733A end 0x733C type pointers
733C  LOOP_pfa: 
733C defw 3_cfa
733E defw ?PAIRS_cfa
7340 defw COMPILE_cfa,(LOOP)_cfa
7344 defw BACK_cfa
7346 defw ;S_cfa
; [DASMZ80] LOOP_pfa: start 0x733C end 0x7348 type pointers

7322  DO_nfa: defb 0x02+0x80+0x40,"D","O"+0x80
; [DASMZ80] DO_nfa: start 0x7322 end 0x7325 type bytedata
7325  DO_lfa: defw THEN_nfa
; [DASMZ80] DO_lfa: start 0x7325 end 0x7327 type pointers
7327  DO_cfa: defw 0x6306
; [DASMZ80] DO_cfa: start 0x7327 end 0x7329 type pointers
7329  DO_pfa: 
7329 defw COMPILE_cfa,(DO)_cfa
732D defw HERE_cfa
732F defw 3_cfa
7331 defw ;S_cfa
; [DASMZ80] DO_pfa: start 0x7329 end 0x7333 type pointers

7315  THEN_nfa: defb 0x04+0x80+0x40,"THE","N"+0x80
; [DASMZ80] THEN_nfa: start 0x7315 end 0x731A type bytedata
731A  THEN_lfa: defw ENDIF_nfa
; [DASMZ80] THEN_lfa: start 0x731A end 0x731C type pointers
731C  THEN_cfa: defw 0x6306
; [DASMZ80] THEN_cfa: start 0x731C end 0x731E type pointers
731E  THEN_pfa: 
731E defw ENDIF_cfa
7320 defw ;S_cfa
; [DASMZ80] THEN_pfa: start 0x731E end 0x7322 type pointers

72F9  ENDIF_nfa: defb 0x05+0x80+0x40,"ENDI","F"+0x80
; [DASMZ80] ENDIF_nfa: start 0x72F9 end 0x72FF type bytedata
72FF  ENDIF_lfa: defw BEGIN_nfa
; [DASMZ80] ENDIF_lfa: start 0x72FF end 0x7301 type pointers
7301  ENDIF_cfa: defw 0x6306
; [DASMZ80] ENDIF_cfa: start 0x7301 end 0x7303 type pointers
7303  ENDIF_pfa: 
7303 defw ?COMP_cfa
7305 defw 2_cfa
7307 defw ?PAIRS_cfa
7309 defw HERE_cfa
730B defw OVER_cfa
730D defw -_cfa
730F defw SWAP_cfa
7311 defw !_cfa
7313 defw ;S_cfa
; [DASMZ80] ENDIF_pfa: start 0x7303 end 0x7315 type pointers

72E7  BEGIN_nfa: defb 0x05+0x80+0x40,"BEGI","N"+0x80
; [DASMZ80] BEGIN_nfa: start 0x72E7 end 0x72ED type bytedata
72ED  BEGIN_lfa: defw BACK_nfa
; [DASMZ80] BEGIN_lfa: start 0x72ED end 0x72EF type pointers
72EF  BEGIN_cfa: defw 0x6306
; [DASMZ80] BEGIN_cfa: start 0x72EF end 0x72F1 type pointers
72F1  BEGIN_pfa: 
72F1 defw ?COMP_cfa
72F3 defw HERE_cfa
72F5 defw 1_cfa
72F7 defw ;S_cfa
; [DASMZ80] BEGIN_pfa: start 0x72F1 end 0x72F9 type pointers

72D6  BACK_nfa: defb 0x04+0x80,"BAC","K"+0x80
; [DASMZ80] BACK_nfa: start 0x72D6 end 0x72DB type bytedata
72DB  BACK_lfa: defw '_nfa
; [DASMZ80] BACK_lfa: start 0x72DB end 0x72DD type pointers
72DD  BACK_cfa: defw 0x6306
; [DASMZ80] BACK_cfa: start 0x72DD end 0x72DF type pointers
72DF  BACK_pfa: 
72DF defw HERE_cfa
72E1 defw -_cfa
72E3 defw ,_cfa
72E5 defw ;S_cfa
; [DASMZ80] BACK_pfa: start 0x72DF end 0x72E7 type pointers

72C2  '_nfa: defb 0x01+0x80+0x40,"'"+0x80
; [DASMZ80] '_nfa: start 0x72C2 end 0x72C4 type bytedata
72C4  '_lfa: defw -->_nfa
; [DASMZ80] '_lfa: start 0x72C4 end 0x72C6 type pointers
72C6  '_cfa: defw 0x6306
; [DASMZ80] '_cfa: start 0x72C6 end 0x72C8 type pointers
72C8  '_pfa: 
72C8 defw -FIND_cfa
72CA defw 0=_cfa
72CC defw 0_cfa
72CE defw ?ERROR_cfa
72D0 defw DROP_cfa
72D2 defw LITERAL_cfa
72D4 defw ;S_cfa
; [DASMZ80] '_pfa: start 0x72C8 end 0x72D6 type pointers

72A0  -->_nfa: defb 0x03+0x80+0x40,"--",">"+0x80
; [DASMZ80] -->_nfa: start 0x72A0 end 0x72A4 type bytedata
72A4  -->_lfa: defw LOAD_nfa
; [DASMZ80] -->_lfa: start 0x72A4 end 0x72A6 type pointers
72A6  -->_cfa: defw 0x6306
; [DASMZ80] -->_cfa: start 0x72A6 end 0x72A8 type pointers
72A8  -->_pfa: 
72A8 defw ?LOADING_cfa
72AA defw 0_cfa
72AC defw IN_cfa
72AE defw !_cfa
72B0 defw B/SCR_cfa
72B2 defw BLK_cfa
72B4 defw @_cfa
72B6 defw OVER_cfa
72B8 defw MOD_cfa
72BA defw -_cfa
72BC defw BLK_cfa
72BE defw +!_cfa
72C0 defw ;S_cfa
; [DASMZ80] -->_pfa: start 0x72A8 end 0x72C2 type pointers

7261  LOAD_nfa: defb 0x04+0x80,"LOA","D"+0x80
; [DASMZ80] LOAD_nfa: start 0x7261 end 0x7266 type bytedata
7266  LOAD_lfa: defw FLUSH_nfa
; [DASMZ80] LOAD_lfa: start 0x7266 end 0x7268 type pointers
7268  LOAD_cfa: defw 0x6306
; [DASMZ80] LOAD_cfa: start 0x7268 end 0x726A type pointers
726A  LOAD_pfa: 
726A defw DUP_cfa
726C defw 0_cfa
726E defw =_cfa
7270 defw LIT_cfa,0x0006
7274 defw ?ERROR_cfa
7276 defw BLK_cfa
7278 defw @_cfa
727A defw >R_cfa
727C defw IN_cfa
727E defw @_cfa
7280 defw >R_cfa
7282 defw 0_cfa
7284 defw IN_cfa
7286 defw !_cfa
7288 defw B/SCR_cfa
728A defw *_cfa
728C defw BLK_cfa
728E defw !_cfa
7290 defw INTERPRET_cfa
7292 defw R>_cfa
7294 defw IN_cfa
7296 defw !_cfa
7298 defw R>_cfa
729A defw BLK_cfa
729C defw !_cfa
729E defw ;S_cfa
; [DASMZ80] LOAD_pfa: start 0x726A end 0x72A0 type pointers

7243  FLUSH_nfa: defb 0x05+0x80,"FLUS","H"+0x80
; [DASMZ80] FLUSH_nfa: start 0x7243 end 0x7249 type bytedata
7249  FLUSH_lfa: defw R/W_nfa
; [DASMZ80] FLUSH_lfa: start 0x7249 end 0x724B type pointers
724B  FLUSH_cfa: defw 0x6306
; [DASMZ80] FLUSH_cfa: start 0x724B end 0x724D type pointers
724D  FLUSH_pfa: 
724D defw #BUFF_cfa
724F defw 1+_cfa
7251 defw 0_cfa
7253 defw (DO)_cfa
7255 defw 0_cfa
7257 defw BUFFER_cfa
7259 defw DROP_cfa
725B defw (LOOP)_cfa,0xFFF8; to 0x7255
725F defw ;S_cfa
; [DASMZ80] FLUSH_pfa: start 0x724D end 0x7261 type pointers

7217  R/W_nfa: defb 0x03+0x80,"R/","W"+0x80
; [DASMZ80] R/W_nfa: start 0x7217 end 0x721B type bytedata
721B  R/W_lfa: defw HI_nfa
; [DASMZ80] R/W_lfa: start 0x721B end 0x721D type pointers
721D  R/W_cfa: defw 0x6306
; [DASMZ80] R/W_cfa: start 0x721D end 0x721F type pointers
721F  R/W_pfa: 
721F defw >R_cfa
7221 defw DISC-BLOCK_cfa
7223 defw R>_cfa
7225 defw (R/W)_cfa
7227 defw ;S_cfa
; [DASMZ80] R/W_pfa: start 0x721F end 0x7229 type pointers

720E  HI_nfa: defb 0x02+0x80,"H","I"+0x80
; [DASMZ80] HI_nfa: start 0x720E end 0x7211 type bytedata
7211  HI_lfa: defw LO_nfa
; [DASMZ80] HI_lfa: start 0x7211 end 0x7213 type pointers
7213  HI_cfa: defw 0x6348
; [DASMZ80] HI_cfa: start 0x7213 end 0x7215 type pointers
7215  HI_pfa: 
7215 defw 0xFFFF
; [DASMZ80] HI_pfa: start 0x7215 end 0x7217 type worddata

7205  LO_nfa: defb 0x02+0x80,"L","O"+0x80
; [DASMZ80] LO_nfa: start 0x7205 end 0x7208 type bytedata
7208  LO_lfa: defw BLOCK_nfa
; [DASMZ80] LO_lfa: start 0x7208 end 0x720A type pointers
720A  LO_cfa: defw 0x6348
; [DASMZ80] LO_cfa: start 0x720A end 0x720C type pointers
720C  LO_pfa: 
720C defw 0xC000
; [DASMZ80] LO_pfa: start 0x720C end 0x720E type worddata

71A5  BLOCK_nfa: defb 0x05+0x80,"BLOC","K"+0x80
; [DASMZ80] BLOCK_nfa: start 0x71A5 end 0x71AB type bytedata
71AB  BLOCK_lfa: defw BUFFER_nfa
; [DASMZ80] BLOCK_lfa: start 0x71AB end 0x71AD type pointers
71AD  BLOCK_cfa: defw 0x6306
; [DASMZ80] BLOCK_cfa: start 0x71AD end 0x71AF type pointers
71AF  BLOCK_pfa: 
71AF defw OFFSET_cfa
71B1 defw @_cfa
71B3 defw +_cfa
71B5 defw >R_cfa
71B7 defw PREV_cfa
71B9 defw @_cfa
71BB defw DUP_cfa
71BD defw @_cfa
71BF defw R_cfa
71C1 defw -_cfa
71C3 defw DUP_cfa
71C5 defw +_cfa
71C7 defw 0BRANCH_cfa,0x0034; to 0x71FD
71CB defw +BUF_cfa
71CD defw 0=_cfa
71CF defw 0BRANCH_cfa,0x0014; to 0x71E5
71D3 defw DROP_cfa
71D5 defw R_cfa
71D7 defw BUFFER_cfa
71D9 defw DUP_cfa
71DB defw R_cfa
71DD defw 1_cfa
71DF defw R/W_cfa
71E1 defw 2_cfa
71E3 defw -_cfa
71E5 defw DUP_cfa
71E7 defw @_cfa
71E9 defw R_cfa
71EB defw -_cfa
71ED defw DUP_cfa
71EF defw +_cfa
71F1 defw 0=_cfa
71F3 defw 0BRANCH_cfa,0xFFD6; to 0x71CB
71F7 defw DUP_cfa
71F9 defw PREV_cfa
71FB defw !_cfa
71FD defw R>_cfa
71FF defw DROP_cfa
7201 defw 2+_cfa
7203 defw ;S_cfa
; [DASMZ80] BLOCK_pfa: start 0x71AF end 0x7205 type pointers

715C  BUFFER_nfa: defb 0x06+0x80,"BUFFE","R"+0x80
; [DASMZ80] BUFFER_nfa: start 0x715C end 0x7163 type bytedata
7163  BUFFER_lfa: defw DR0_nfa
; [DASMZ80] BUFFER_lfa: start 0x7163 end 0x7165 type pointers
7165  BUFFER_cfa: defw 0x6306
; [DASMZ80] BUFFER_cfa: start 0x7165 end 0x7167 type pointers
7167  BUFFER_pfa: 
7167 defw USE_cfa
7169 defw @_cfa
716B defw DUP_cfa
716D defw >R_cfa
716F defw +BUF_cfa
7171 defw 0BRANCH_cfa,0xFFFC; to 0x716F
7175 defw USE_cfa
7177 defw !_cfa
7179 defw R_cfa
717B defw @_cfa
717D defw 0<_cfa
717F defw 0BRANCH_cfa,0x0014; to 0x7195
7183 defw R_cfa
7185 defw 2+_cfa
7187 defw R_cfa
7189 defw @_cfa
718B defw LIT_cfa,0x7FFF
718F defw AND_cfa
7191 defw 0_cfa
7193 defw R/W_cfa
7195 defw R_cfa
7197 defw !_cfa
7199 defw R_cfa
719B defw PREV_cfa
719D defw !_cfa
719F defw R>_cfa
71A1 defw 2+_cfa
71A3 defw ;S_cfa
; [DASMZ80] BUFFER_pfa: start 0x7167 end 0x71A5 type pointers

714C  DR0_nfa: defb 0x03+0x80,"DR","0"+0x80
; [DASMZ80] DR0_nfa: start 0x714C end 0x7150 type bytedata
7150  DR0_lfa: defw EMPTY-BUFFERS_nfa
; [DASMZ80] DR0_lfa: start 0x7150 end 0x7152 type pointers
7152  DR0_cfa: defw 0x6306
; [DASMZ80] DR0_cfa: start 0x7152 end 0x7154 type pointers
7154  DR0_pfa: 
7154 defw 0_cfa
7156 defw OFFSET_cfa
7158 defw !_cfa
715A defw ;S_cfa
; [DASMZ80] DR0_pfa: start 0x7154 end 0x715C type pointers

7118  EMPTY-BUFFERS_nfa: defb 0x0D+0x80,"EMPTY-BUFFER","S"+0x80
; [DASMZ80] EMPTY-BUFFERS_nfa: start 0x7118 end 0x7126 type bytedata
7126  EMPTY-BUFFERS_lfa: defw UPDATE_nfa
; [DASMZ80] EMPTY-BUFFERS_lfa: start 0x7126 end 0x7128 type pointers
7128  EMPTY-BUFFERS_cfa: defw 0x6306
; [DASMZ80] EMPTY-BUFFERS_cfa: start 0x7128 end 0x712A type pointers
712A  EMPTY-BUFFERS_pfa: 
712A defw FIRST_cfa
712C defw LIMIT_cfa
712E defw OVER_cfa
7130 defw -_cfa
7132 defw ERASE_cfa
7134 defw LIMIT_cfa
7136 defw FIRST_cfa
7138 defw (DO)_cfa
713A defw LIT_cfa,0x7FFF
713E defw I_cfa
7140 defw !_cfa
7142 defw LIT_cfa,0x0084
7146 defw (+LOOP)_cfa,0xFFF2; to 0x713A
714A defw ;S_cfa
; [DASMZ80] EMPTY-BUFFERS_pfa: start 0x712A end 0x714C type pointers

70F9  UPDATE_nfa: defb 0x06+0x80,"UPDAT","E"+0x80
; [DASMZ80] UPDATE_nfa: start 0x70F9 end 0x7100 type bytedata
7100  UPDATE_lfa: defw +BUF_nfa
; [DASMZ80] UPDATE_lfa: start 0x7100 end 0x7102 type pointers
7102  UPDATE_cfa: defw 0x6306
; [DASMZ80] UPDATE_cfa: start 0x7102 end 0x7104 type pointers
7104  UPDATE_pfa: 
7104 defw PREV_cfa
7106 defw @_cfa
7108 defw @_cfa
710A defw LIT_cfa,0x8000
710E defw OR_cfa
7110 defw PREV_cfa
7112 defw @_cfa
7114 defw !_cfa
7116 defw ;S_cfa
; [DASMZ80] UPDATE_pfa: start 0x7104 end 0x7118 type pointers

70D2  +BUF_nfa: defb 0x04+0x80,"+BU","F"+0x80
; [DASMZ80] +BUF_nfa: start 0x70D2 end 0x70D7 type bytedata
70D7  +BUF_lfa: defw #BUFF_nfa
; [DASMZ80] +BUF_lfa: start 0x70D7 end 0x70D9 type pointers
70D9  +BUF_cfa: defw 0x6306
; [DASMZ80] +BUF_cfa: start 0x70D9 end 0x70DB type pointers
70DB  +BUF_pfa: 
70DB defw LIT_cfa,0x0084
70DF defw +_cfa
70E1 defw DUP_cfa
70E3 defw LIMIT_cfa
70E5 defw =_cfa
70E7 defw 0BRANCH_cfa,0x0006; to 0x70EF
70EB defw DROP_cfa
70ED defw FIRST_cfa
70EF defw DUP_cfa
70F1 defw PREV_cfa
70F3 defw @_cfa
70F5 defw -_cfa
70F7 defw ;S_cfa
; [DASMZ80] +BUF_pfa: start 0x70DB end 0x70F9 type pointers

70C6  #BUFF_nfa: defb 0x05+0x80,"#BUF","F"+0x80
; [DASMZ80] #BUFF_nfa: start 0x70C6 end 0x70CC type bytedata
70CC  #BUFF_lfa: defw PREV_nfa
; [DASMZ80] #BUFF_lfa: start 0x70CC end 0x70CE type pointers
70CE  #BUFF_cfa: defw 0x6348
; [DASMZ80] #BUFF_cfa: start 0x70CE end 0x70D0 type pointers
70D0  #BUFF_pfa: 
70D0 defw 0x0008
; [DASMZ80] #BUFF_pfa: start 0x70D0 end 0x70D2 type worddata

70BB  PREV_nfa: defb 0x04+0x80,"PRE","V"+0x80
; [DASMZ80] PREV_nfa: start 0x70BB end 0x70C0 type bytedata
70C0  PREV_lfa: defw USE_nfa
; [DASMZ80] PREV_lfa: start 0x70C0 end 0x70C2 type pointers
70C2  PREV_cfa: defw 0x6362
; [DASMZ80] PREV_cfa: start 0x70C2 end 0x70C4 type pointers
70C4  PREV_pfa: 
70C4 defw 0x8D30
; [DASMZ80] PREV_pfa: start 0x70C4 end 0x70C6 type worddata

70B1  USE_nfa: defb 0x03+0x80,"US","E"+0x80
; [DASMZ80] USE_nfa: start 0x70B1 end 0x70B5 type bytedata
70B5  USE_lfa: defw MESSAGE_nfa
; [DASMZ80] USE_lfa: start 0x70B5 end 0x70B7 type pointers
70B7  USE_cfa: defw 0x6362
; [DASMZ80] USE_cfa: start 0x70B7 end 0x70B9 type pointers
70B9  USE_pfa: 
70B9 defw 0x8DB4
; [DASMZ80] USE_pfa: start 0x70B9 end 0x70BB type worddata

6F83  MESSAGE_nfa: defb 0x07+0x80,"MESSAG","E"+0x80
; [DASMZ80] MESSAGE_nfa: start 0x6F83 end 0x6F8B type bytedata
6F8B  MESSAGE_lfa: defw .LINE_nfa
; [DASMZ80] MESSAGE_lfa: start 0x6F8B end 0x6F8D type pointers
6F8D  MESSAGE_cfa: defw 0x6306
; [DASMZ80] MESSAGE_cfa: start 0x6F8D end 0x6F8F type pointers
6F8F  MESSAGE_pfa: 
6F8F defw WARNING_cfa
6F91 defw @_cfa
6F93 defw 0BRANCH_cfa,0x001E; to 0x6FB3
6F97 defw -DUP_cfa
6F99 defw 0BRANCH_cfa,0x0014; to 0x6FAF
6F9D defw LIT_cfa,0x0004
6FA1 defw OFFSET_cfa
6FA3 defw @_cfa
6FA5 defw B/SCR_cfa
6FA7 defw /_cfa
6FA9 defw -_cfa
6FAB defw .LINE_cfa
6FAD defw SPACE_cfa
6FAF defw BRANCH_cfa,0x000D; to 0x6FBE
6FB3 defw (.")_cfa
6FB5 defb 0x06,"MSG # "
6FBC defw ._cfa
6FBE defw ;S_cfa
; [DASMZ80] MESSAGE_pfa: start 0x6F8F end 0x6FC0 type pointers

6F71  .LINE_nfa: defb 0x05+0x80,".LIN","E"+0x80
; [DASMZ80] .LINE_nfa: start 0x6F71 end 0x6F77 type bytedata
6F77  .LINE_lfa: defw (LINE)_nfa
; [DASMZ80] .LINE_lfa: start 0x6F77 end 0x6F79 type pointers
6F79  .LINE_cfa: defw 0x6306
; [DASMZ80] .LINE_cfa: start 0x6F79 end 0x6F7B type pointers
6F7B  .LINE_pfa: 
6F7B defw (LINE)_cfa
6F7D defw -TRAILING_cfa
6F7F defw TYPE_cfa
6F81 defw ;S_cfa
; [DASMZ80] .LINE_pfa: start 0x6F7B end 0x6F83 type pointers

6F4A  (LINE)_nfa: defb 0x06+0x80,"(LINE",")"+0x80
; [DASMZ80] (LINE)_nfa: start 0x6F4A end 0x6F51 type bytedata
6F51  (LINE)_lfa: defw M/MOD_nfa
; [DASMZ80] (LINE)_lfa: start 0x6F51 end 0x6F53 type pointers
6F53  (LINE)_cfa: defw 0x6306
; [DASMZ80] (LINE)_cfa: start 0x6F53 end 0x6F55 type pointers
6F55  (LINE)_pfa: 
6F55 defw >R_cfa
6F57 defw LIT_cfa,0x0040
6F5B defw B/BUF_cfa
6F5D defw */MOD_cfa
6F5F defw R>_cfa
6F61 defw B/SCR_cfa
6F63 defw *_cfa
6F65 defw +_cfa
6F67 defw BLOCK_cfa
6F69 defw +_cfa
6F6B defw LIT_cfa,0x0040
6F6F defw ;S_cfa
; [DASMZ80] (LINE)_pfa: start 0x6F55 end 0x6F71 type pointers

6F2C  M/MOD_nfa: defb 0x05+0x80,"M/MO","D"+0x80
; [DASMZ80] M/MOD_nfa: start 0x6F2C end 0x6F32 type bytedata
6F32  M/MOD_lfa: defw */_nfa
; [DASMZ80] M/MOD_lfa: start 0x6F32 end 0x6F34 type pointers
6F34  M/MOD_cfa: defw 0x6306
; [DASMZ80] M/MOD_cfa: start 0x6F34 end 0x6F36 type pointers
6F36  M/MOD_pfa: 
6F36 defw >R_cfa
6F38 defw 0_cfa
6F3A defw R_cfa
6F3C defw U/MOD_cfa
6F3E defw R>_cfa
6F40 defw SWAP_cfa
6F42 defw >R_cfa
6F44 defw U/MOD_cfa
6F46 defw R>_cfa
6F48 defw ;S_cfa
; [DASMZ80] M/MOD_pfa: start 0x6F36 end 0x6F4A type pointers

6F1D  */_nfa: defb 0x02+0x80,"*","/"+0x80
; [DASMZ80] */_nfa: start 0x6F1D end 0x6F20 type bytedata
6F20  */_lfa: defw */MOD_nfa
; [DASMZ80] */_lfa: start 0x6F20 end 0x6F22 type pointers
6F22  */_cfa: defw 0x6306
; [DASMZ80] */_cfa: start 0x6F22 end 0x6F24 type pointers
6F24  */_pfa: 
6F24 defw */MOD_cfa
6F26 defw SWAP_cfa
6F28 defw DROP_cfa
6F2A defw ;S_cfa
; [DASMZ80] */_pfa: start 0x6F24 end 0x6F2C type pointers

6F09  */MOD_nfa: defb 0x05+0x80,"*/MO","D"+0x80
; [DASMZ80] */MOD_nfa: start 0x6F09 end 0x6F0F type bytedata
6F0F  */MOD_lfa: defw MOD_nfa
; [DASMZ80] */MOD_lfa: start 0x6F0F end 0x6F11 type pointers
6F11  */MOD_cfa: defw 0x6306
; [DASMZ80] */MOD_cfa: start 0x6F11 end 0x6F13 type pointers
6F13  */MOD_pfa: 
6F13 defw >R_cfa
6F15 defw M*_cfa
6F17 defw R>_cfa
6F19 defw M/_cfa
6F1B defw ;S_cfa
; [DASMZ80] */MOD_pfa: start 0x6F13 end 0x6F1D type pointers

6EFB  MOD_nfa: defb 0x03+0x80,"MO","D"+0x80
; [DASMZ80] MOD_nfa: start 0x6EFB end 0x6EFF type bytedata
6EFF  MOD_lfa: defw /_nfa
; [DASMZ80] MOD_lfa: start 0x6EFF end 0x6F01 type pointers
6F01  MOD_cfa: defw 0x6306
; [DASMZ80] MOD_cfa: start 0x6F01 end 0x6F03 type pointers
6F03  MOD_pfa: 
6F03 defw /MOD_cfa
6F05 defw DROP_cfa
6F07 defw ;S_cfa
; [DASMZ80] MOD_pfa: start 0x6F03 end 0x6F09 type pointers

6EED  /_nfa: defb 0x01+0x80,"/"+0x80
; [DASMZ80] /_nfa: start 0x6EED end 0x6EEF type bytedata
6EEF  /_lfa: defw /MOD_nfa
; [DASMZ80] /_lfa: start 0x6EEF end 0x6EF1 type pointers
6EF1  /_cfa: defw 0x6306
; [DASMZ80] /_cfa: start 0x6EF1 end 0x6EF3 type pointers
6EF3  /_pfa: 
6EF3 defw /MOD_cfa
6EF5 defw SWAP_cfa
6EF7 defw DROP_cfa
6EF9 defw ;S_cfa
; [DASMZ80] /_pfa: start 0x6EF3 end 0x6EFB type pointers

6EDA  /MOD_nfa: defb 0x04+0x80,"/MO","D"+0x80
; [DASMZ80] /MOD_nfa: start 0x6EDA end 0x6EDF type bytedata
6EDF  /MOD_lfa: defw *_nfa
; [DASMZ80] /MOD_lfa: start 0x6EDF end 0x6EE1 type pointers
6EE1  /MOD_cfa: defw 0x6306
; [DASMZ80] /MOD_cfa: start 0x6EE1 end 0x6EE3 type pointers
6EE3  /MOD_pfa: 
6EE3 defw >R_cfa
6EE5 defw S->D_cfa
6EE7 defw R>_cfa
6EE9 defw M/_cfa
6EEB defw ;S_cfa
; [DASMZ80] /MOD_pfa: start 0x6EE3 end 0x6EED type pointers

6ECE  *_nfa: defb 0x01+0x80,"*"+0x80
; [DASMZ80] *_nfa: start 0x6ECE end 0x6ED0 type bytedata
6ED0  *_lfa: defw M/_nfa
; [DASMZ80] *_lfa: start 0x6ED0 end 0x6ED2 type pointers
6ED2  *_cfa: defw 0x6306
; [DASMZ80] *_cfa: start 0x6ED2 end 0x6ED4 type pointers
6ED4  *_pfa: 
6ED4 defw M*_cfa
6ED6 defw DROP_cfa
6ED8 defw ;S_cfa
; [DASMZ80] *_pfa: start 0x6ED4 end 0x6EDA type pointers

6EA7  M/_nfa: defb 0x02+0x80,"M","/"+0x80
; [DASMZ80] M/_nfa: start 0x6EA7 end 0x6EAA type bytedata
6EAA  M/_lfa: defw M*_nfa
; [DASMZ80] M/_lfa: start 0x6EAA end 0x6EAC type pointers
6EAC  M/_cfa: defw 0x6306
; [DASMZ80] M/_cfa: start 0x6EAC end 0x6EAE type pointers
6EAE  M/_pfa: 
6EAE defw OVER_cfa
6EB0 defw >R_cfa
6EB2 defw >R_cfa
6EB4 defw DABS_cfa
6EB6 defw R_cfa
6EB8 defw ABS_cfa
6EBA defw U/MOD_cfa
6EBC defw R>_cfa
6EBE defw R_cfa
6EC0 defw XOR_cfa
6EC2 defw +-_cfa
6EC4 defw SWAP_cfa
6EC6 defw R>_cfa
6EC8 defw +-_cfa
6ECA defw SWAP_cfa
6ECC defw ;S_cfa
; [DASMZ80] M/_pfa: start 0x6EAE end 0x6ECE type pointers

6E8C  M*_nfa: defb 0x02+0x80,"M","*"+0x80
; [DASMZ80] M*_nfa: start 0x6E8C end 0x6E8F type bytedata
6E8F  M*_lfa: defw MAX_nfa
; [DASMZ80] M*_lfa: start 0x6E8F end 0x6E91 type pointers
6E91  M*_cfa: defw 0x6306
; [DASMZ80] M*_cfa: start 0x6E91 end 0x6E93 type pointers
6E93  M*_pfa: 
6E93 defw 2DUP_cfa
6E95 defw XOR_cfa
6E97 defw >R_cfa
6E99 defw ABS_cfa
6E9B defw SWAP_cfa
6E9D defw ABS_cfa
6E9F defw U*_cfa
6EA1 defw R>_cfa
6EA3 defw D+-_cfa
6EA5 defw ;S_cfa
; [DASMZ80] M*_pfa: start 0x6E93 end 0x6EA7 type pointers

6E76  MAX_nfa: defb 0x03+0x80,"MA","X"+0x80
; [DASMZ80] MAX_nfa: start 0x6E76 end 0x6E7A type bytedata
6E7A  MAX_lfa: defw MIN_nfa
; [DASMZ80] MAX_lfa: start 0x6E7A end 0x6E7C type pointers
6E7C  MAX_cfa: defw 0x6306
; [DASMZ80] MAX_cfa: start 0x6E7C end 0x6E7E type pointers
6E7E  MAX_pfa: 
6E7E defw 2DUP_cfa
6E80 defw <_cfa
6E82 defw 0BRANCH_cfa,0x0004; to 0x6E88
6E86 defw SWAP_cfa
6E88 defw DROP_cfa
6E8A defw ;S_cfa
; [DASMZ80] MAX_pfa: start 0x6E7E end 0x6E8C type pointers

6E60  MIN_nfa: defb 0x03+0x80,"MI","N"+0x80
; [DASMZ80] MIN_nfa: start 0x6E60 end 0x6E64 type bytedata
6E64  MIN_lfa: defw DABS_nfa
; [DASMZ80] MIN_lfa: start 0x6E64 end 0x6E66 type pointers
6E66  MIN_cfa: defw 0x6306
; [DASMZ80] MIN_cfa: start 0x6E66 end 0x6E68 type pointers
6E68  MIN_pfa: 
6E68 defw 2DUP_cfa
6E6A defw >_cfa
6E6C defw 0BRANCH_cfa,0x0004; to 0x6E72
6E70 defw SWAP_cfa
6E72 defw DROP_cfa
6E74 defw ;S_cfa
; [DASMZ80] MIN_pfa: start 0x6E68 end 0x6E76 type pointers

6E51  DABS_nfa: defb 0x04+0x80,"DAB","S"+0x80
; [DASMZ80] DABS_nfa: start 0x6E51 end 0x6E56 type bytedata
6E56  DABS_lfa: defw ABS_nfa
; [DASMZ80] DABS_lfa: start 0x6E56 end 0x6E58 type pointers
6E58  DABS_cfa: defw 0x6306
; [DASMZ80] DABS_cfa: start 0x6E58 end 0x6E5A type pointers
6E5A  DABS_pfa: 
6E5A defw DUP_cfa
6E5C defw D+-_cfa
6E5E defw ;S_cfa
; [DASMZ80] DABS_pfa: start 0x6E5A end 0x6E60 type pointers

6E43  ABS_nfa: defb 0x03+0x80,"AB","S"+0x80
; [DASMZ80] ABS_nfa: start 0x6E43 end 0x6E47 type bytedata
6E47  ABS_lfa: defw D+-_nfa
; [DASMZ80] ABS_lfa: start 0x6E47 end 0x6E49 type pointers
6E49  ABS_cfa: defw 0x6306
; [DASMZ80] ABS_cfa: start 0x6E49 end 0x6E4B type pointers
6E4B  ABS_pfa: 
6E4B defw DUP_cfa
6E4D defw +-_cfa
6E4F defw ;S_cfa
; [DASMZ80] ABS_pfa: start 0x6E4B end 0x6E51 type pointers

6E31  D+-_nfa: defb 0x03+0x80,"D+","-"+0x80
; [DASMZ80] D+-_nfa: start 0x6E31 end 0x6E35 type bytedata
6E35  D+-_lfa: defw +-_nfa
; [DASMZ80] D+-_lfa: start 0x6E35 end 0x6E37 type pointers
6E37  D+-_cfa: defw 0x6306
; [DASMZ80] D+-_cfa: start 0x6E37 end 0x6E39 type pointers
6E39  D+-_pfa: 
6E39 defw 0<_cfa
6E3B defw 0BRANCH_cfa,0x0004; to 0x6E41
6E3F defw DMINUS_cfa
6E41 defw ;S_cfa
; [DASMZ80] D+-_pfa: start 0x6E39 end 0x6E43 type pointers

6E20  +-_nfa: defb 0x02+0x80,"+","-"+0x80
; [DASMZ80] +-_nfa: start 0x6E20 end 0x6E23 type bytedata
6E23  +-_lfa: defw S->D_nfa
; [DASMZ80] +-_lfa: start 0x6E23 end 0x6E25 type pointers
6E25  +-_cfa: defw 0x6306
; [DASMZ80] +-_cfa: start 0x6E25 end 0x6E27 type pointers
6E27  +-_pfa: 
6E27 defw 0<_cfa
6E29 defw 0BRANCH_cfa,0x0004; to 0x6E2F
6E2D defw MINUS_cfa
6E2F defw ;S_cfa
; [DASMZ80] +-_pfa: start 0x6E27 end 0x6E31 type pointers

6E0A  S->D_nfa: defb 0x04+0x80,"S->","D"+0x80
; [DASMZ80] S->D_nfa: start 0x6E0A end 0x6E0F type bytedata
6E0F  S->D_lfa: defw COLD_nfa
; [DASMZ80] S->D_lfa: start 0x6E0F end 0x6E11 type pointers
6E11  S->D_cfa: defw S->D_pfa
; [DASMZ80] S->D_cfa: start 0x6E11 end 0x6E13 type pointers
6E13  S->D_pfa: ; Word type not implemented.

6DC9  COLD_nfa: defb 0x04+0x80,"COL","D"+0x80
; [DASMZ80] COLD_nfa: start 0x6DC9 end 0x6DCE type bytedata
6DCE  COLD_lfa: defw WARM_nfa
; [DASMZ80] COLD_lfa: start 0x6DCE end 0x6DD0 type pointers
6DD0  COLD_cfa: defw 0x6306
; [DASMZ80] COLD_cfa: start 0x6DD0 end 0x6DD2 type pointers
6DD2  COLD_pfa: 
6DD2 defw EMPTY-BUFFERS_cfa
6DD4 defw FIRST_cfa
6DD6 defw USE_cfa
6DD8 defw !_cfa
6DDA defw FIRST_cfa
6DDC defw PREV_cfa
6DDE defw !_cfa
6DE0 defw DR0_cfa
6DE2 defw LIT_cfa,0x5E52
6DE6 defw LIT_cfa,0x5E66
6DEA defw @_cfa
6DEC defw LIT_cfa,0x0006
6DF0 defw +_cfa
6DF2 defw LIT_cfa,0x0010
6DF6 defw CMOVE_cfa
6DF8 defw LIT_cfa,0x5E4C
6DFC defw @_cfa
6DFE defw LIT_cfa,0x6CF8
6E02 defw !_cfa
6E04 defw ABORT_cfa
; [DASMZ80] COLD_pfa: start 0x6DD2 end 0x6E06 type pointers

6DA3  WARM_nfa: defb 0x04+0x80,"WAR","M"+0x80
; [DASMZ80] WARM_nfa: start 0x6DA3 end 0x6DA8 type bytedata
6DA8  WARM_lfa: defw ABORT_nfa
; [DASMZ80] WARM_lfa: start 0x6DA8 end 0x6DAA type pointers
6DAA  WARM_cfa: defw 0x6306
; [DASMZ80] WARM_cfa: start 0x6DAA end 0x6DAC type pointers
6DAC  WARM_pfa: 
6DAC defw EMPTY-BUFFERS_cfa
6DAE defw ABORT_cfa
; [DASMZ80] WARM_pfa: start 0x6DAC end 0x6DB0 type pointers

6D50  ABORT_nfa: defb 0x05+0x80,"ABOR","T"+0x80
; [DASMZ80] ABORT_nfa: start 0x6D50 end 0x6D56 type bytedata
6D56  ABORT_lfa: defw QUIT_nfa
; [DASMZ80] ABORT_lfa: start 0x6D56 end 0x6D58 type pointers
6D58  ABORT_cfa: defw 0x6306
; [DASMZ80] ABORT_cfa: start 0x6D58 end 0x6D5A type pointers
6D5A  ABORT_pfa: 
6D5A defw SP!_cfa
6D5C defw DECIMAL_cfa
6D5E defw ?STACK_cfa
6D60 defw CLS0_cfa
6D62 defw GREETING_cfa
6D64 defw FORTH_cfa
6D66 defw DEFINITIONS_cfa
6D68 defw NOOP_cfa
6D6A defw QUIT_cfa
; [DASMZ80] ABORT_pfa: start 0x6D5A end 0x6D6C type pointers

6D24  QUIT_nfa: defb 0x04+0x80,"QUI","T"+0x80
; [DASMZ80] QUIT_nfa: start 0x6D24 end 0x6D29 type bytedata
6D29  QUIT_lfa: defw (_nfa
; [DASMZ80] QUIT_lfa: start 0x6D29 end 0x6D2B type pointers
6D2B  QUIT_cfa: defw 0x6306
; [DASMZ80] QUIT_cfa: start 0x6D2B end 0x6D2D type pointers
6D2D  QUIT_pfa: 
6D2D defw 0_cfa
6D2F defw BLK_cfa
6D31 defw !_cfa
6D33 defw [_cfa
6D35 defw RP!_cfa
6D37 defw CR_cfa
6D39 defw QUERY_cfa
6D3B defw INTERPRET_cfa
6D3D defw STATE_cfa
6D3F defw @_cfa
6D41 defw 0=_cfa
6D43 defw 0BRANCH_cfa,0x0007; to 0x6D4C
6D47 defw (.")_cfa
6D49 defb 0x02,"ok"
6D4C defw BRANCH_cfa
; [DASMZ80] QUIT_pfa: start 0x6D2D end 0x6D4E type pointers

6D16  (_nfa: defb 0x01+0x80+0x40,"("+0x80
; [DASMZ80] (_nfa: start 0x6D16 end 0x6D18 type bytedata
6D18  (_lfa: defw DEFINITIONS_nfa
; [DASMZ80] (_lfa: start 0x6D18 end 0x6D1A type pointers
6D1A  (_cfa: defw 0x6306
; [DASMZ80] (_cfa: start 0x6D1A end 0x6D1C type pointers
6D1C  (_pfa: 
6D1C defw LIT_cfa,0x0029
6D20 defw WORD_cfa
6D22 defw ;S_cfa
; [DASMZ80] (_pfa: start 0x6D1C end 0x6D24 type pointers

6CFC  DEFINITIONS_nfa: defb 0x0B+0x80,"DEFINITION","S"+0x80
; [DASMZ80] DEFINITIONS_nfa: start 0x6CFC end 0x6D08 type bytedata
6D08  DEFINITIONS_lfa: defw FORTH_nfa
; [DASMZ80] DEFINITIONS_lfa: start 0x6D08 end 0x6D0A type pointers
6D0A  DEFINITIONS_cfa: defw 0x6306
; [DASMZ80] DEFINITIONS_cfa: start 0x6D0A end 0x6D0C type pointers
6D0C  DEFINITIONS_pfa: 
6D0C defw CONTEXT_cfa
6D0E defw @_cfa
6D10 defw CURRENT_cfa
6D12 defw !_cfa
6D14 defw ;S_cfa
; [DASMZ80] DEFINITIONS_pfa: start 0x6D0C end 0x6D16 type pointers

6CEA  FORTH_nfa: defb 0x05+0x80+0x40,"FORT","H"+0x80
; [DASMZ80] FORTH_nfa: start 0x6CEA end 0x6CF0 type bytedata
6CF0  FORTH_lfa: defw VOCABULARY_nfa
; [DASMZ80] FORTH_lfa: start 0x6CF0 end 0x6CF2 type pointers
6CF2  FORTH_cfa: defw 0x67B8
; [DASMZ80] FORTH_cfa: start 0x6CF2 end 0x6CF4 type pointers
6CF4  FORTH_pfa: ; Word type not implemented.

6CB5  VOCABULARY_nfa: defb 0x0A+0x80,"VOCABULAR","Y"+0x80
; [DASMZ80] VOCABULARY_nfa: start 0x6CB5 end 0x6CC0 type bytedata
6CC0  VOCABULARY_lfa: defw IMMEDIATE_nfa
; [DASMZ80] VOCABULARY_lfa: start 0x6CC0 end 0x6CC2 type pointers
6CC2  VOCABULARY_cfa: defw 0x6306
; [DASMZ80] VOCABULARY_cfa: start 0x6CC2 end 0x6CC4 type pointers
6CC4  VOCABULARY_pfa: 
6CC4 defw <BUILDS_cfa
6CC6 defw LIT_cfa,0xA081
6CCA defw ,_cfa
6CCC defw CURRENT_cfa
6CCE defw @_cfa
6CD0 defw CFA_cfa
6CD2 defw ,_cfa
6CD4 defw HERE_cfa
6CD6 defw VOC-LINK_cfa
6CD8 defw @_cfa
6CDA defw ,_cfa
6CDC defw VOC-LINK_cfa
6CDE defw !_cfa
6CE0 defw DOES>_cfa
6CE2 defw 2+_cfa
6CE4 defw CONTEXT_cfa
6CE6 defw !_cfa
6CE8 defw ;S_cfa
; [DASMZ80] VOCABULARY_pfa: start 0x6CC4 end 0x6CEA type pointers

6C9D  IMMEDIATE_nfa: defb 0x09+0x80,"IMMEDIAT","E"+0x80
; [DASMZ80] IMMEDIATE_nfa: start 0x6C9D end 0x6CA7 type bytedata
6CA7  IMMEDIATE_lfa: defw INTERPRET_nfa
; [DASMZ80] IMMEDIATE_lfa: start 0x6CA7 end 0x6CA9 type pointers
6CA9  IMMEDIATE_cfa: defw 0x6306
; [DASMZ80] IMMEDIATE_cfa: start 0x6CA9 end 0x6CAB type pointers
6CAB  IMMEDIATE_pfa: 
6CAB defw LATEST_cfa
6CAD defw LIT_cfa,0x0040
6CB1 defw TOGGLE_cfa
6CB3 defw ;S_cfa
; [DASMZ80] IMMEDIATE_pfa: start 0x6CAB end 0x6CB5 type pointers

6C4F  INTERPRET_nfa: defb 0x09+0x80,"INTERPRE","T"+0x80
; [DASMZ80] INTERPRET_nfa: start 0x6C4F end 0x6C59 type bytedata
6C59  INTERPRET_lfa: defw ?STACK_nfa
; [DASMZ80] INTERPRET_lfa: start 0x6C59 end 0x6C5B type pointers
6C5B  INTERPRET_cfa: defw 0x6306
; [DASMZ80] INTERPRET_cfa: start 0x6C5B end 0x6C5D type pointers
6C5D  INTERPRET_pfa: 
6C5D defw -FIND_cfa
6C5F defw 0BRANCH_cfa,0x001E; to 0x6C7F
6C63 defw STATE_cfa
6C65 defw @_cfa
6C67 defw <_cfa
6C69 defw 0BRANCH_cfa,0x000A; to 0x6C75
6C6D defw CFA_cfa
6C6F defw ,_cfa
6C71 defw BRANCH_cfa,0x0006; to 0x6C79
6C75 defw CFA_cfa
6C77 defw EXECUTE_cfa
6C79 defw ?STACK_cfa
6C7B defw BRANCH_cfa,0x001C; to 0x6C99
6C7F defw HERE_cfa
6C81 defw NUMBER_cfa
6C83 defw DPL_cfa
6C85 defw @_cfa
6C87 defw 1+_cfa
6C89 defw 0BRANCH_cfa,0x0008; to 0x6C93
6C8D defw DLITERAL_cfa
6C8F defw BRANCH_cfa,0x0006; to 0x6C97
6C93 defw DROP_cfa
6C95 defw LITERAL_cfa
6C97 defw ?STACK_cfa
6C99 defw BRANCH_cfa
; [DASMZ80] INTERPRET_pfa: start 0x6C5D end 0x6C9B type pointers

6C22  ?STACK_nfa: defb 0x06+0x80,"?STAC","K"+0x80
; [DASMZ80] ?STACK_nfa: start 0x6C22 end 0x6C29 type bytedata
6C29  ?STACK_lfa: defw DLITERAL_nfa
; [DASMZ80] ?STACK_lfa: start 0x6C29 end 0x6C2B type pointers
6C2B  ?STACK_cfa: defw 0x6306
; [DASMZ80] ?STACK_cfa: start 0x6C2B end 0x6C2D type pointers
6C2D  ?STACK_pfa: 
6C2D defw SP@_cfa
6C2F defw S0_cfa
6C31 defw @_cfa
6C33 defw SWAP_cfa
6C35 defw U<_cfa
6C37 defw 1_cfa
6C39 defw ?ERROR_cfa
6C3B defw SP@_cfa
6C3D defw LIT_cfa,0x89CE
6C41 defw <_cfa
6C43 defw LIT_cfa,0x0007
6C47 defw ?ERROR_cfa
6C49 defw ;S_cfa
; [DASMZ80] ?STACK_pfa: start 0x6C2D end 0x6C4B type pointers

6C05  DLITERAL_nfa: defb 0x08+0x80+0x40,"DLITERA","L"+0x80
; [DASMZ80] DLITERAL_nfa: start 0x6C05 end 0x6C0E type bytedata
6C0E  DLITERAL_lfa: defw LITERAL_nfa
; [DASMZ80] DLITERAL_lfa: start 0x6C0E end 0x6C10 type pointers
6C10  DLITERAL_cfa: defw 0x6306
; [DASMZ80] DLITERAL_cfa: start 0x6C10 end 0x6C12 type pointers
6C12  DLITERAL_pfa: 
6C12 defw STATE_cfa
6C14 defw @_cfa
6C16 defw 0BRANCH_cfa,0x0008; to 0x6C20
6C1A defw SWAP_cfa
6C1C defw LITERAL_cfa
6C1E defw LITERAL_cfa
6C20 defw ;S_cfa
; [DASMZ80] DLITERAL_pfa: start 0x6C12 end 0x6C22 type pointers

6BE9  LITERAL_nfa: defb 0x07+0x80+0x40,"LITERA","L"+0x80
; [DASMZ80] LITERAL_nfa: start 0x6BE9 end 0x6BF1 type bytedata
6BF1  LITERAL_lfa: defw [COMPILE]_nfa
; [DASMZ80] LITERAL_lfa: start 0x6BF1 end 0x6BF3 type pointers
6BF3  LITERAL_cfa: defw 0x6306
; [DASMZ80] LITERAL_cfa: start 0x6BF3 end 0x6BF5 type pointers
6BF5  LITERAL_pfa: 
6BF5 defw STATE_cfa
6BF7 defw @_cfa
6BF9 defw 0BRANCH_cfa,0x0008; to 0x6C03
6BFD defw COMPILE_cfa,LIT_cfa
6C01 defw ,_cfa
6C03 defw ;S_cfa
; [DASMZ80] LITERAL_pfa: start 0x6BF5 end 0x6C05 type pointers

6BCB  [COMPILE]_nfa: defb 0x09+0x80+0x40,"[COMPILE","]"+0x80
; [DASMZ80] [COMPILE]_nfa: start 0x6BCB end 0x6BD5 type bytedata
6BD5  [COMPILE]_lfa: defw CREATE_nfa
; [DASMZ80] [COMPILE]_lfa: start 0x6BD5 end 0x6BD7 type pointers
6BD7  [COMPILE]_cfa: defw 0x6306
; [DASMZ80] [COMPILE]_cfa: start 0x6BD7 end 0x6BD9 type pointers
6BD9  [COMPILE]_pfa: 
6BD9 defw -FIND_cfa
6BDB defw 0=_cfa
6BDD defw 0_cfa
6BDF defw ?ERROR_cfa
6BE1 defw DROP_cfa
6BE3 defw CFA_cfa
6BE5 defw ,_cfa
6BE7 defw ;S_cfa
; [DASMZ80] [COMPILE]_pfa: start 0x6BD9 end 0x6BE9 type pointers

6B76  CREATE_nfa: defb 0x06+0x80,"CREAT","E"+0x80
; [DASMZ80] CREATE_nfa: start 0x6B76 end 0x6B7D type bytedata
6B7D  CREATE_lfa: defw ID._nfa
; [DASMZ80] CREATE_lfa: start 0x6B7D end 0x6B7F type pointers
6B7F  CREATE_cfa: defw 0x6306
; [DASMZ80] CREATE_cfa: start 0x6B7F end 0x6B81 type pointers
6B81  CREATE_pfa: 
6B81 defw -FIND_cfa
6B83 defw 0BRANCH_cfa,0x0010; to 0x6B95
6B87 defw DROP_cfa
6B89 defw NFA_cfa
6B8B defw ID._cfa
6B8D defw LIT_cfa,0x0004
6B91 defw MESSAGE_cfa
6B93 defw SPACE_cfa
6B95 defw HERE_cfa
6B97 defw DUP_cfa
6B99 defw C@_cfa
6B9B defw WIDTH_cfa
6B9D defw @_cfa
6B9F defw MIN_cfa
6BA1 defw 1+_cfa
6BA3 defw ALLOT_cfa
6BA5 defw DUP_cfa
6BA7 defw LIT_cfa,0x00A0
6BAB defw TOGGLE_cfa
6BAD defw HERE_cfa
6BAF defw 1_cfa
6BB1 defw -_cfa
6BB3 defw LIT_cfa,0x0080
6BB7 defw TOGGLE_cfa
6BB9 defw LATEST_cfa
6BBB defw ,_cfa
6BBD defw CURRENT_cfa
6BBF defw @_cfa
6BC1 defw !_cfa
6BC3 defw HERE_cfa
6BC5 defw 2+_cfa
6BC7 defw ,_cfa
6BC9 defw ;S_cfa
; [DASMZ80] CREATE_pfa: start 0x6B81 end 0x6BCB type pointers

6B2C  ID._nfa: defb 0x03+0x80,"ID","."+0x80
; [DASMZ80] ID._nfa: start 0x6B2C end 0x6B30 type bytedata
6B30  ID._lfa: defw ERROR_nfa
; [DASMZ80] ID._lfa: start 0x6B30 end 0x6B32 type pointers
6B32  ID._cfa: defw 0x6306
; [DASMZ80] ID._cfa: start 0x6B32 end 0x6B34 type pointers
6B34  ID._pfa: 
6B34 defw PAD_cfa
6B36 defw LIT_cfa,0x0020
6B3A defw LIT_cfa,0x005F
6B3E defw FILL_cfa
6B40 defw DUP_cfa
6B42 defw PFA_cfa
6B44 defw LFA_cfa
6B46 defw OVER_cfa
6B48 defw -_cfa
6B4A defw PAD_cfa
6B4C defw SWAP_cfa
6B4E defw CMOVE_cfa
6B50 defw PAD_cfa
6B52 defw COUNT_cfa
6B54 defw LIT_cfa,0x001F
6B58 defw AND_cfa
6B5A defw 2DUP_cfa
6B5C defw +_cfa
6B5E defw 1_cfa
6B60 defw -_cfa
6B62 defw DUP_cfa
6B64 defw @_cfa
6B66 defw LIT_cfa,0xFF7F
6B6A defw AND_cfa
6B6C defw SWAP_cfa
6B6E defw !_cfa
6B70 defw TYPE_cfa
6B72 defw SPACE_cfa
6B74 defw ;S_cfa
; [DASMZ80] ID._pfa: start 0x6B34 end 0x6B76 type pointers

6AF5  ERROR_nfa: defb 0x05+0x80,"ERRO","R"+0x80
; [DASMZ80] ERROR_nfa: start 0x6AF5 end 0x6AFB type bytedata
6AFB  ERROR_lfa: defw (ABORT)_nfa
; [DASMZ80] ERROR_lfa: start 0x6AFB end 0x6AFD type pointers
6AFD  ERROR_cfa: defw 0x6306
; [DASMZ80] ERROR_cfa: start 0x6AFD end 0x6AFF type pointers
6AFF  ERROR_pfa: 
6AFF defw WARNING_cfa
6B01 defw @_cfa
6B03 defw 0<_cfa
6B05 defw 0BRANCH_cfa,0x0004; to 0x6B0B
6B09 defw (ABORT)_cfa
6B0B defw HERE_cfa
6B0D defw COUNT_cfa
6B0F defw TYPE_cfa
6B11 defw (.")_cfa
6B13 defb 0x02,"? "
6B16 defw MESSAGE_cfa
6B18 defw SP!_cfa
6B1A defw BLK_cfa
6B1C defw @_cfa
6B1E defw -DUP_cfa
6B20 defw 0BRANCH_cfa,0x0008; to 0x6B2A
6B24 defw IN_cfa
6B26 defw @_cfa
6B28 defw SWAP_cfa
6B2A defw QUIT_cfa
; [DASMZ80] ERROR_pfa: start 0x6AFF end 0x6B2C type pointers

6AE5  (ABORT)_nfa: defb 0x07+0x80,"(ABORT",")"+0x80
; [DASMZ80] (ABORT)_nfa: start 0x6AE5 end 0x6AED type bytedata
6AED  (ABORT)_lfa: defw -FIND_nfa
; [DASMZ80] (ABORT)_lfa: start 0x6AED end 0x6AEF type pointers
6AEF  (ABORT)_cfa: defw 0x6306
; [DASMZ80] (ABORT)_cfa: start 0x6AEF end 0x6AF1 type pointers
6AF1  (ABORT)_pfa: 
6AF1 defw ABORT_cfa
6AF3 defw ;S_cfa
; [DASMZ80] (ABORT)_pfa: start 0x6AF1 end 0x6AF5 type pointers

6ABB  -FIND_nfa: defb 0x05+0x80,"-FIN","D"+0x80
; [DASMZ80] -FIND_nfa: start 0x6ABB end 0x6AC1 type bytedata
6AC1  -FIND_lfa: defw NUMBER_nfa
; [DASMZ80] -FIND_lfa: start 0x6AC1 end 0x6AC3 type pointers
6AC3  -FIND_cfa: defw 0x6306
; [DASMZ80] -FIND_cfa: start 0x6AC3 end 0x6AC5 type pointers
6AC5  -FIND_pfa: 
6AC5 defw BL_cfa
6AC7 defw UPPER-WORD_cfa
6AC9 defw HERE_cfa
6ACB defw CONTEXT_cfa
6ACD defw @_cfa
6ACF defw @_cfa
6AD1 defw (FIND)_cfa
6AD3 defw DUP_cfa
6AD5 defw 0=_cfa
6AD7 defw 0BRANCH_cfa,0x000A; to 0x6AE3
6ADB defw DROP_cfa
6ADD defw HERE_cfa
6ADF defw LATEST_cfa
6AE1 defw (FIND)_cfa
6AE3 defw ;S_cfa
; [DASMZ80] -FIND_pfa: start 0x6AC5 end 0x6AE5 type pointers

6A62  NUMBER_nfa: defb 0x06+0x80,"NUMBE","R"+0x80
; [DASMZ80] NUMBER_nfa: start 0x6A62 end 0x6A69 type bytedata
6A69  NUMBER_lfa: defw (NUMBER)_nfa
; [DASMZ80] NUMBER_lfa: start 0x6A69 end 0x6A6B type pointers
6A6B  NUMBER_cfa: defw 0x6306
; [DASMZ80] NUMBER_cfa: start 0x6A6B end 0x6A6D type pointers
6A6D  NUMBER_pfa: 
6A6D defw 0_cfa
6A6F defw 0_cfa
6A71 defw ROT_cfa
6A73 defw DUP_cfa
6A75 defw 1+_cfa
6A77 defw C@_cfa
6A79 defw LIT_cfa,0x002D
6A7D defw =_cfa
6A7F defw DUP_cfa
6A81 defw >R_cfa
6A83 defw +_cfa
6A85 defw LIT_cfa,0xFFFF
6A89 defw DPL_cfa
6A8B defw !_cfa
6A8D defw (NUMBER)_cfa
6A8F defw DUP_cfa
6A91 defw C@_cfa
6A93 defw BL_cfa
6A95 defw -_cfa
6A97 defw 0BRANCH_cfa,0x0016; to 0x6AAF
6A9B defw DUP_cfa
6A9D defw C@_cfa
6A9F defw LIT_cfa,0x002E
6AA3 defw -_cfa
6AA5 defw 0_cfa
6AA7 defw ?ERROR_cfa
6AA9 defw 0_cfa
6AAB defw BRANCH_cfa,0xFFDC; to 0x6A89
6AAF defw DROP_cfa
6AB1 defw R>_cfa
6AB3 defw 0BRANCH_cfa,0x0004; to 0x6AB9
6AB7 defw DMINUS_cfa
6AB9 defw ;S_cfa
; [DASMZ80] NUMBER_pfa: start 0x6A6D end 0x6ABB type pointers

6A15  (NUMBER)_nfa: defb 0x08+0x80,"(NUMBER",")"+0x80
; [DASMZ80] (NUMBER)_nfa: start 0x6A15 end 0x6A1E type bytedata
6A1E  (NUMBER)_lfa: defw WORD_nfa
; [DASMZ80] (NUMBER)_lfa: start 0x6A1E end 0x6A20 type pointers
6A20  (NUMBER)_cfa: defw 0x6306
; [DASMZ80] (NUMBER)_cfa: start 0x6A20 end 0x6A22 type pointers
6A22  (NUMBER)_pfa: 
6A22 defw 1+_cfa
6A24 defw DUP_cfa
6A26 defw >R_cfa
6A28 defw C@_cfa
6A2A defw BASE_cfa
6A2C defw @_cfa
6A2E defw DIGIT_cfa
6A30 defw 0BRANCH_cfa,0x002C; to 0x6A5E
6A34 defw SWAP_cfa
6A36 defw BASE_cfa
6A38 defw @_cfa
6A3A defw U*_cfa
6A3C defw DROP_cfa
6A3E defw ROT_cfa
6A40 defw BASE_cfa
6A42 defw @_cfa
6A44 defw U*_cfa
6A46 defw D+_cfa
6A48 defw DPL_cfa
6A4A defw @_cfa
6A4C defw 1+_cfa
6A4E defw 0BRANCH_cfa,0x0008; to 0x6A58
6A52 defw 1_cfa
6A54 defw DPL_cfa
6A56 defw +!_cfa
6A58 defw R>_cfa
6A5A defw BRANCH_cfa,0xFFC6; to 0x6A22
6A5E defw R>_cfa
6A60 defw ;S_cfa
; [DASMZ80] (NUMBER)_pfa: start 0x6A22 end 0x6A62 type pointers

69C8  WORD_nfa: defb 0x04+0x80,"WOR","D"+0x80
; [DASMZ80] WORD_nfa: start 0x69C8 end 0x69CD type bytedata
69CD  WORD_lfa: defw PAD_nfa
; [DASMZ80] WORD_lfa: start 0x69CD end 0x69CF type pointers
69CF  WORD_cfa: defw 0x6306
; [DASMZ80] WORD_cfa: start 0x69CF end 0x69D1 type pointers
69D1  WORD_pfa: 
69D1 defw BLK_cfa
69D3 defw @_cfa
69D5 defw 0BRANCH_cfa,0x000C; to 0x69E3
69D9 defw BLK_cfa
69DB defw @_cfa
69DD defw BLOCK_cfa
69DF defw BRANCH_cfa,0x0006; to 0x69E7
69E3 defw TIB_cfa
69E5 defw @_cfa
69E7 defw IN_cfa
69E9 defw @_cfa
69EB defw +_cfa
69ED defw SWAP_cfa
69EF defw ENCLOSE_cfa
69F1 defw HERE_cfa
69F3 defw LIT_cfa,0x0022
69F7 defw BLANKS_cfa
69F9 defw IN_cfa
69FB defw +!_cfa
69FD defw OVER_cfa
69FF defw -_cfa
6A01 defw >R_cfa
6A03 defw R_cfa
6A05 defw HERE_cfa
6A07 defw C!_cfa
6A09 defw +_cfa
6A0B defw HERE_cfa
6A0D defw 1+_cfa
6A0F defw R>_cfa
6A11 defw CMOVE_cfa
6A13 defw ;S_cfa
; [DASMZ80] WORD_pfa: start 0x69D1 end 0x6A15 type pointers

69B6  PAD_nfa: defb 0x03+0x80,"PA","D"+0x80
; [DASMZ80] PAD_nfa: start 0x69B6 end 0x69BA type bytedata
69BA  PAD_lfa: defw HOLD_nfa
; [DASMZ80] PAD_lfa: start 0x69BA end 0x69BC type pointers
69BC  PAD_cfa: defw 0x6306
; [DASMZ80] PAD_cfa: start 0x69BC end 0x69BE type pointers
69BE  PAD_pfa: 
69BE defw HERE_cfa
69C0 defw LIT_cfa,0x0044
69C4 defw +_cfa
69C6 defw ;S_cfa
; [DASMZ80] PAD_pfa: start 0x69BE end 0x69C8 type pointers

699D  HOLD_nfa: defb 0x04+0x80,"HOL","D"+0x80
; [DASMZ80] HOLD_nfa: start 0x699D end 0x69A2 type bytedata
69A2  HOLD_lfa: defw BLANKS_nfa
; [DASMZ80] HOLD_lfa: start 0x69A2 end 0x69A4 type pointers
69A4  HOLD_cfa: defw 0x6306
; [DASMZ80] HOLD_cfa: start 0x69A4 end 0x69A6 type pointers
69A6  HOLD_pfa: 
69A6 defw LIT_cfa,0xFFFF
69AA defw HLD_cfa
69AC defw +!_cfa
69AE defw HLD_cfa
69B0 defw @_cfa
69B2 defw C!_cfa
69B4 defw ;S_cfa
; [DASMZ80] HOLD_pfa: start 0x69A6 end 0x69B6 type pointers

698C  BLANKS_nfa: defb 0x06+0x80,"BLANK","S"+0x80
; [DASMZ80] BLANKS_nfa: start 0x698C end 0x6993 type bytedata
6993  BLANKS_lfa: defw ERASE_nfa
; [DASMZ80] BLANKS_lfa: start 0x6993 end 0x6995 type pointers
6995  BLANKS_cfa: defw 0x6306
; [DASMZ80] BLANKS_cfa: start 0x6995 end 0x6997 type pointers
6997  BLANKS_pfa: 
6997 defw BL_cfa
6999 defw FILL_cfa
699B defw ;S_cfa
; [DASMZ80] BLANKS_pfa: start 0x6997 end 0x699D type pointers

697C  ERASE_nfa: defb 0x05+0x80,"ERAS","E"+0x80
; [DASMZ80] ERASE_nfa: start 0x697C end 0x6982 type bytedata
6982  ERASE_lfa: defw FILL_nfa
; [DASMZ80] ERASE_lfa: start 0x6982 end 0x6984 type pointers
6984  ERASE_cfa: defw 0x6306
; [DASMZ80] ERASE_cfa: start 0x6984 end 0x6986 type pointers
6986  ERASE_pfa: 
6986 defw 0_cfa
6988 defw FILL_cfa
698A defw ;S_cfa
; [DASMZ80] ERASE_pfa: start 0x6986 end 0x698C type pointers

695F  FILL_nfa: defb 0x04+0x80,"FIL","L"+0x80
; [DASMZ80] FILL_nfa: start 0x695F end 0x6964 type bytedata
6964  FILL_lfa: defw _nfa
; [DASMZ80] FILL_lfa: start 0x6964 end 0x6966 type pointers
6966  FILL_cfa: defw FILL_pfa
; [DASMZ80] FILL_cfa: start 0x6966 end 0x6968 type pointers
6968  FILL_pfa: ; Word type not implemented.

6923  _nfa: defb 0x01+0x80+0x40,""+0x80
; [DASMZ80] _nfa: start 0x6923 end 0x6925 type bytedata
6925  _lfa: defw QUERY_nfa
; [DASMZ80] _lfa: start 0x6925 end 0x6927 type pointers
6927  _cfa: defw 0x6306
; [DASMZ80] _cfa: start 0x6927 end 0x6929 type pointers
6929  _pfa: 
6929 defw BLK_cfa
692B defw @_cfa
692D defw 0BRANCH_cfa,0x002A; to 0x6959
6931 defw 1_cfa
6933 defw BLK_cfa
6935 defw +!_cfa
6937 defw 0_cfa
6939 defw IN_cfa
693B defw !_cfa
693D defw BLK_cfa
693F defw @_cfa
6941 defw B/SCR_cfa
6943 defw 1_cfa
6945 defw -_cfa
6947 defw AND_cfa
6949 defw 0=_cfa
694B defw 0BRANCH_cfa,0x0008; to 0x6955
694F defw ?EXEC_cfa
6951 defw R>_cfa
6953 defw DROP_cfa
6955 defw BRANCH_cfa,0x0006; to 0x695D
6959 defw R>_cfa
695B defw DROP_cfa
695D defw ;S_cfa
; [DASMZ80] _pfa: start 0x6929 end 0x695F type pointers

6907  QUERY_nfa: defb 0x05+0x80,"QUER","Y"+0x80
; [DASMZ80] QUERY_nfa: start 0x6907 end 0x690D type bytedata
690D  QUERY_lfa: defw EXPECT_nfa
; [DASMZ80] QUERY_lfa: start 0x690D end 0x690F type pointers
690F  QUERY_cfa: defw 0x6306
; [DASMZ80] QUERY_cfa: start 0x690F end 0x6911 type pointers
6911  QUERY_pfa: 
6911 defw TIB_cfa
6913 defw @_cfa
6915 defw LIT_cfa,0x0050
6919 defw EXPECT_cfa
691B defw 0_cfa
691D defw IN_cfa
691F defw !_cfa
6921 defw ;S_cfa
; [DASMZ80] QUERY_pfa: start 0x6911 end 0x6923 type pointers

688A  EXPECT_nfa: defb 0x06+0x80,"EXPEC","T"+0x80
; [DASMZ80] EXPECT_nfa: start 0x688A end 0x6891 type bytedata
6891  EXPECT_lfa: defw ."_nfa
; [DASMZ80] EXPECT_lfa: start 0x6891 end 0x6893 type pointers
6893  EXPECT_cfa: defw 0x6306
; [DASMZ80] EXPECT_cfa: start 0x6893 end 0x6895 type pointers
6895  EXPECT_pfa: 
6895 defw OVER_cfa
6897 defw +_cfa
6899 defw OVER_cfa
689B defw (DO)_cfa
689D defw KEY_cfa
689F defw DUP_cfa
68A1 defw LIT_cfa,0x000E
68A5 defw +ORIGIN_cfa
68A7 defw @_cfa
68A9 defw =_cfa
68AB defw 0BRANCH_cfa,0x002A; to 0x68D7
68AF defw DROP_cfa
68B1 defw DUP_cfa
68B3 defw I_cfa
68B5 defw =_cfa
68B7 defw DUP_cfa
68B9 defw R>_cfa
68BB defw 2_cfa
68BD defw -_cfa
68BF defw +_cfa
68C1 defw >R_cfa
68C3 defw 0BRANCH_cfa,0x000A; to 0x68CF
68C7 defw NOOP_cfa
68C9 defw NOOP_cfa
68CB defw BRANCH_cfa,0x0032; to 0x68FF
68CF defw LIT_cfa,0x0008
68D3 defw BRANCH_cfa,0x0028; to 0x68FD
68D7 defw DUP_cfa
68D9 defw LIT_cfa,0x000D
68DD defw =_cfa
68DF defw 0BRANCH_cfa,0x000E; to 0x68EF
68E3 defw LEAVE_cfa
68E5 defw DROP_cfa
68E7 defw BL_cfa
68E9 defw 0_cfa
68EB defw BRANCH_cfa,0x0004; to 0x68F1
68EF defw DUP_cfa
68F1 defw I_cfa
68F3 defw C!_cfa
68F5 defw 0_cfa
68F7 defw I_cfa
68F9 defw 1+_cfa
68FB defw !_cfa
68FD defw EMIT_cfa
68FF defw (LOOP)_cfa,0xFF9C; to 0x689D
6903 defw DROP_cfa
6905 defw ;S_cfa
; [DASMZ80] EXPECT_pfa: start 0x6895 end 0x6907 type pointers

685B  ."_nfa: defb 0x02+0x80+0x40,".","""+0x80
; [DASMZ80] ."_nfa: start 0x685B end 0x685E type bytedata
685E  ."_lfa: defw (.")_nfa
; [DASMZ80] ."_lfa: start 0x685E end 0x6860 type pointers
6860  ."_cfa: defw 0x6306
; [DASMZ80] ."_cfa: start 0x6860 end 0x6862 type pointers
6862  ."_pfa: 
6862 defw LIT_cfa,0x0022
6866 defw STATE_cfa
6868 defw @_cfa
686A defw 0BRANCH_cfa,0x0014; to 0x6880
686E defw COMPILE_cfa,(.")_cfa
6872 defw WORD_cfa
6874 defw HERE_cfa
6876 defw C@_cfa
6878 defw 1+_cfa
687A defw ALLOT_cfa
687C defw BRANCH_cfa,0x000A; to 0x6888
6880 defw WORD_cfa
6882 defw HERE_cfa
6884 defw COUNT_cfa
6886 defw TYPE_cfa
6888 defw ;S_cfa
; [DASMZ80] ."_pfa: start 0x6862 end 0x688A type pointers

6840  (.")_nfa: defb 0x04+0x80,"(."",")"+0x80
; [DASMZ80] (.")_nfa: start 0x6840 end 0x6845 type bytedata
6845  (.")_lfa: defw -TRAILING_nfa
; [DASMZ80] (.")_lfa: start 0x6845 end 0x6847 type pointers
6847  (.")_cfa: defw 0x6306
; [DASMZ80] (.")_cfa: start 0x6847 end 0x6849 type pointers
6849  (.")_pfa: 
6849 defw R_cfa
684B defw COUNT_cfa
684D defw DUP_cfa
684F defw 1+_cfa
6851 defw R>_cfa
6853 defw +_cfa
6855 defw >R_cfa
6857 defw TYPE_cfa
6859 defw ;S_cfa
; [DASMZ80] (.")_pfa: start 0x6849 end 0x685B type pointers

6808  -TRAILING_nfa: defb 0x09+0x80,"-TRAILIN","G"+0x80
; [DASMZ80] -TRAILING_nfa: start 0x6808 end 0x6812 type bytedata
6812  -TRAILING_lfa: defw TYPE_nfa
; [DASMZ80] -TRAILING_lfa: start 0x6812 end 0x6814 type pointers
6814  -TRAILING_cfa: defw 0x6306
; [DASMZ80] -TRAILING_cfa: start 0x6814 end 0x6816 type pointers
6816  -TRAILING_pfa: 
6816 defw DUP_cfa
6818 defw 0_cfa
681A defw (DO)_cfa
681C defw OVER_cfa
681E defw OVER_cfa
6820 defw +_cfa
6822 defw 1_cfa
6824 defw -_cfa
6826 defw C@_cfa
6828 defw BL_cfa
682A defw -_cfa
682C defw 0BRANCH_cfa,0x0008; to 0x6836
6830 defw LEAVE_cfa
6832 defw BRANCH_cfa,0x0006; to 0x683A
6836 defw 1_cfa
6838 defw -_cfa
683A defw (LOOP)_cfa,0xFFE0; to 0x681C
683E defw ;S_cfa
; [DASMZ80] -TRAILING_pfa: start 0x6816 end 0x6840 type pointers

67DF  TYPE_nfa: defb 0x04+0x80,"TYP","E"+0x80
; [DASMZ80] TYPE_nfa: start 0x67DF end 0x67E4 type bytedata
67E4  TYPE_lfa: defw COUNT_nfa
; [DASMZ80] TYPE_lfa: start 0x67E4 end 0x67E6 type pointers
67E6  TYPE_cfa: defw 0x6306
; [DASMZ80] TYPE_cfa: start 0x67E6 end 0x67E8 type pointers
67E8  TYPE_pfa: 
67E8 defw -DUP_cfa
67EA defw 0BRANCH_cfa,0x0018; to 0x6804
67EE defw OVER_cfa
67F0 defw +_cfa
67F2 defw SWAP_cfa
67F4 defw (DO)_cfa
67F6 defw I_cfa
67F8 defw C@_cfa
67FA defw EMIT_cfa
67FC defw (LOOP)_cfa,0xFFF8; to 0x67F6
6800 defw BRANCH_cfa,0x0004; to 0x6806
6804 defw DROP_cfa
6806 defw ;S_cfa
; [DASMZ80] TYPE_pfa: start 0x67E8 end 0x6808 type pointers

67CB  COUNT_nfa: defb 0x05+0x80,"COUN","T"+0x80
; [DASMZ80] COUNT_nfa: start 0x67CB end 0x67D1 type bytedata
67D1  COUNT_lfa: defw DOES>_nfa
; [DASMZ80] COUNT_lfa: start 0x67D1 end 0x67D3 type pointers
67D3  COUNT_cfa: defw 0x6306
; [DASMZ80] COUNT_cfa: start 0x67D3 end 0x67D5 type pointers
67D5  COUNT_pfa: 
67D5 defw DUP_cfa
67D7 defw 1+_cfa
67D9 defw SWAP_cfa
67DB defw C@_cfa
67DD defw ;S_cfa
; [DASMZ80] COUNT_pfa: start 0x67D5 end 0x67DF type pointers

67A4  DOES>_nfa: defb 0x05+0x80,"DOES",">"+0x80
; [DASMZ80] DOES>_nfa: start 0x67A4 end 0x67AA type bytedata
67AA  DOES>_lfa: defw <BUILDS_nfa
; [DASMZ80] DOES>_lfa: start 0x67AA end 0x67AC type pointers
67AC  DOES>_cfa: defw 0x6306
; [DASMZ80] DOES>_cfa: start 0x67AC end 0x67AE type pointers
67AE  DOES>_pfa: 
67AE defw R>_cfa
67B0 defw LATEST_cfa
67B2 defw PFA_cfa
67B4 defw !_cfa
67B6 defw (;CODE)_cfa
; [DASMZ80] DOES>_pfa: start 0x67AE end 0x67B8 type pointers

6792  <BUILDS_nfa: defb 0x07+0x80,"<BUILD","S"+0x80
; [DASMZ80] <BUILDS_nfa: start 0x6792 end 0x679A type bytedata
679A  <BUILDS_lfa: defw ;CODE_nfa
; [DASMZ80] <BUILDS_lfa: start 0x679A end 0x679C type pointers
679C  <BUILDS_cfa: defw 0x6306
; [DASMZ80] <BUILDS_cfa: start 0x679C end 0x679E type pointers
679E  <BUILDS_pfa: 
679E defw 0_cfa
67A0 defw CONSTANT_cfa
67A2 defw ;S_cfa
; [DASMZ80] <BUILDS_pfa: start 0x679E end 0x67A4 type pointers

677C  ;CODE_nfa: defb 0x05+0x80+0x40,";COD","E"+0x80
; [DASMZ80] ;CODE_nfa: start 0x677C end 0x6782 type bytedata
6782  ;CODE_lfa: defw (;CODE)_nfa
; [DASMZ80] ;CODE_lfa: start 0x6782 end 0x6784 type pointers
6784  ;CODE_cfa: defw 0x6306
; [DASMZ80] ;CODE_cfa: start 0x6784 end 0x6786 type pointers
6786  ;CODE_pfa: 
6786 defw ?CSP_cfa
6788 defw COMPILE_cfa,(;CODE)_cfa
678C defw [_cfa
678E defw SMUDGE_cfa
6790 defw ;S_cfa
; [DASMZ80] ;CODE_pfa: start 0x6786 end 0x6792 type pointers

6764  (;CODE)_nfa: defb 0x07+0x80,"(;CODE",")"+0x80
; [DASMZ80] (;CODE)_nfa: start 0x6764 end 0x676C type bytedata
676C  (;CODE)_lfa: defw DECIMAL_nfa
; [DASMZ80] (;CODE)_lfa: start 0x676C end 0x676E type pointers
676E  (;CODE)_cfa: defw 0x6306
; [DASMZ80] (;CODE)_cfa: start 0x676E end 0x6770 type pointers
6770  (;CODE)_pfa: 
6770 defw R>_cfa
6772 defw LATEST_cfa
6774 defw PFA_cfa
6776 defw CFA_cfa
6778 defw !_cfa
677A defw ;S_cfa
; [DASMZ80] (;CODE)_pfa: start 0x6770 end 0x677C type pointers

674E  DECIMAL_nfa: defb 0x07+0x80,"DECIMA","L"+0x80
; [DASMZ80] DECIMAL_nfa: start 0x674E end 0x6756 type bytedata
6756  DECIMAL_lfa: defw HEX_nfa
; [DASMZ80] DECIMAL_lfa: start 0x6756 end 0x6758 type pointers
6758  DECIMAL_cfa: defw 0x6306
; [DASMZ80] DECIMAL_cfa: start 0x6758 end 0x675A type pointers
675A  DECIMAL_pfa: 
675A defw LIT_cfa,0x000A
675E defw BASE_cfa
6760 defw !_cfa
6762 defw ;S_cfa
; [DASMZ80] DECIMAL_pfa: start 0x675A end 0x6764 type pointers

673C  HEX_nfa: defb 0x03+0x80,"HE","X"+0x80
; [DASMZ80] HEX_nfa: start 0x673C end 0x6740 type bytedata
6740  HEX_lfa: defw SMUDGE_nfa
; [DASMZ80] HEX_lfa: start 0x6740 end 0x6742 type pointers
6742  HEX_cfa: defw 0x6306
; [DASMZ80] HEX_cfa: start 0x6742 end 0x6744 type pointers
6744  HEX_pfa: 
6744 defw LIT_cfa,0x0010
6748 defw BASE_cfa
674A defw !_cfa
674C defw ;S_cfa
; [DASMZ80] HEX_pfa: start 0x6744 end 0x674E type pointers

6727  SMUDGE_nfa: defb 0x06+0x80,"SMUDG","E"+0x80
; [DASMZ80] SMUDGE_nfa: start 0x6727 end 0x672E type bytedata
672E  SMUDGE_lfa: defw ]_nfa
; [DASMZ80] SMUDGE_lfa: start 0x672E end 0x6730 type pointers
6730  SMUDGE_cfa: defw 0x6306
; [DASMZ80] SMUDGE_cfa: start 0x6730 end 0x6732 type pointers
6732  SMUDGE_pfa: 
6732 defw LATEST_cfa
6734 defw LIT_cfa,0x0020
6738 defw TOGGLE_cfa
673A defw ;S_cfa
; [DASMZ80] SMUDGE_pfa: start 0x6732 end 0x673C type pointers

6717  ]_nfa: defb 0x01+0x80,"]"+0x80
; [DASMZ80] ]_nfa: start 0x6717 end 0x6719 type bytedata
6719  ]_lfa: defw [_nfa
; [DASMZ80] ]_lfa: start 0x6719 end 0x671B type pointers
671B  ]_cfa: defw 0x6306
; [DASMZ80] ]_cfa: start 0x671B end 0x671D type pointers
671D  ]_pfa: 
671D defw LIT_cfa,0x00C0
6721 defw STATE_cfa
6723 defw !_cfa
6725 defw ;S_cfa
; [DASMZ80] ]_pfa: start 0x671D end 0x6727 type pointers

6709  [_nfa: defb 0x01+0x80+0x40,"["+0x80
; [DASMZ80] [_nfa: start 0x6709 end 0x670B type bytedata
670B  [_lfa: defw COMPILE_nfa
; [DASMZ80] [_lfa: start 0x670B end 0x670D type pointers
670D  [_cfa: defw 0x6306
; [DASMZ80] [_cfa: start 0x670D end 0x670F type pointers
670F  [_pfa: 
670F defw 0_cfa
6711 defw STATE_cfa
6713 defw !_cfa
6715 defw ;S_cfa
; [DASMZ80] [_pfa: start 0x670F end 0x6717 type pointers

66ED  COMPILE_nfa: defb 0x07+0x80,"COMPIL","E"+0x80
; [DASMZ80] COMPILE_nfa: start 0x66ED end 0x66F5 type bytedata
66F5  COMPILE_lfa: defw ?LOADING_nfa
; [DASMZ80] COMPILE_lfa: start 0x66F5 end 0x66F7 type pointers
66F7  COMPILE_cfa: defw 0x6306
; [DASMZ80] COMPILE_cfa: start 0x66F7 end 0x66F9 type pointers
66F9  COMPILE_pfa: 
66F9 defw ?COMP_cfa
66FB defw R>_cfa
66FD defw DUP_cfa
66FF defw 2+_cfa
6701 defw >R_cfa
6703 defw @_cfa
6705 defw ,_cfa
6707 defw ;S_cfa
; [DASMZ80] COMPILE_pfa: start 0x66F9 end 0x6709 type pointers

66D2  ?LOADING_nfa: defb 0x08+0x80,"?LOADIN","G"+0x80
; [DASMZ80] ?LOADING_nfa: start 0x66D2 end 0x66DB type bytedata
66DB  ?LOADING_lfa: defw ?CSP_nfa
; [DASMZ80] ?LOADING_lfa: start 0x66DB end 0x66DD type pointers
66DD  ?LOADING_cfa: defw 0x6306
; [DASMZ80] ?LOADING_cfa: start 0x66DD end 0x66DF type pointers
66DF  ?LOADING_pfa: 
66DF defw BLK_cfa
66E1 defw @_cfa
66E3 defw 0=_cfa
66E5 defw LIT_cfa,0x0016
66E9 defw ?ERROR_cfa
66EB defw ;S_cfa
; [DASMZ80] ?LOADING_pfa: start 0x66DF end 0x66ED type pointers

66B9  ?CSP_nfa: defb 0x04+0x80,"?CS","P"+0x80
; [DASMZ80] ?CSP_nfa: start 0x66B9 end 0x66BE type bytedata
66BE  ?CSP_lfa: defw ?PAIRS_nfa
; [DASMZ80] ?CSP_lfa: start 0x66BE end 0x66C0 type pointers
66C0  ?CSP_cfa: defw 0x6306
; [DASMZ80] ?CSP_cfa: start 0x66C0 end 0x66C2 type pointers
66C2  ?CSP_pfa: 
66C2 defw SP@_cfa
66C4 defw CSP_cfa
66C6 defw @_cfa
66C8 defw -_cfa
66CA defw LIT_cfa,0x0014
66CE defw ?ERROR_cfa
66D0 defw ;S_cfa
; [DASMZ80] ?CSP_pfa: start 0x66C2 end 0x66D2 type pointers

66A4  ?PAIRS_nfa: defb 0x06+0x80,"?PAIR","S"+0x80
; [DASMZ80] ?PAIRS_nfa: start 0x66A4 end 0x66AB type bytedata
66AB  ?PAIRS_lfa: defw ?EXEC_nfa
; [DASMZ80] ?PAIRS_lfa: start 0x66AB end 0x66AD type pointers
66AD  ?PAIRS_cfa: defw 0x6306
; [DASMZ80] ?PAIRS_cfa: start 0x66AD end 0x66AF type pointers
66AF  ?PAIRS_pfa: 
66AF defw -_cfa
66B1 defw LIT_cfa,0x0013
66B5 defw ?ERROR_cfa
66B7 defw ;S_cfa
; [DASMZ80] ?PAIRS_pfa: start 0x66AF end 0x66B9 type pointers

668E  ?EXEC_nfa: defb 0x05+0x80,"?EXE","C"+0x80
; [DASMZ80] ?EXEC_nfa: start 0x668E end 0x6694 type bytedata
6694  ?EXEC_lfa: defw ?COMP_nfa
; [DASMZ80] ?EXEC_lfa: start 0x6694 end 0x6696 type pointers
6696  ?EXEC_cfa: defw 0x6306
; [DASMZ80] ?EXEC_cfa: start 0x6696 end 0x6698 type pointers
6698  ?EXEC_pfa: 
6698 defw STATE_cfa
669A defw @_cfa
669C defw LIT_cfa,0x0012
66A0 defw ?ERROR_cfa
66A2 defw ;S_cfa
; [DASMZ80] ?EXEC_pfa: start 0x6698 end 0x66A4 type pointers

6676  ?COMP_nfa: defb 0x05+0x80,"?COM","P"+0x80
; [DASMZ80] ?COMP_nfa: start 0x6676 end 0x667C type bytedata
667C  ?COMP_lfa: defw ?ERROR_nfa
; [DASMZ80] ?COMP_lfa: start 0x667C end 0x667E type pointers
667E  ?COMP_cfa: defw 0x6306
; [DASMZ80] ?COMP_cfa: start 0x667E end 0x6680 type pointers
6680  ?COMP_pfa: 
6680 defw STATE_cfa
6682 defw @_cfa
6684 defw 0=_cfa
6686 defw LIT_cfa,0x0011
668A defw ?ERROR_cfa
668C defw ;S_cfa
; [DASMZ80] ?COMP_pfa: start 0x6680 end 0x668E type pointers

665B  ?ERROR_nfa: defb 0x06+0x80,"?ERRO","R"+0x80
; [DASMZ80] ?ERROR_nfa: start 0x665B end 0x6662 type bytedata
6662  ?ERROR_lfa: defw !CSP_nfa
; [DASMZ80] ?ERROR_lfa: start 0x6662 end 0x6664 type pointers
6664  ?ERROR_cfa: defw 0x6306
; [DASMZ80] ?ERROR_cfa: start 0x6664 end 0x6666 type pointers
6666  ?ERROR_pfa: 
6666 defw SWAP_cfa
6668 defw 0BRANCH_cfa,0x0008; to 0x6672
666C defw ERROR_cfa
666E defw BRANCH_cfa,0x0004; to 0x6674
6672 defw DROP_cfa
6674 defw ;S_cfa
; [DASMZ80] ?ERROR_pfa: start 0x6666 end 0x6676 type pointers

664A  !CSP_nfa: defb 0x04+0x80,"!CS","P"+0x80
; [DASMZ80] !CSP_nfa: start 0x664A end 0x664F type bytedata
664F  !CSP_lfa: defw PFA_nfa
; [DASMZ80] !CSP_lfa: start 0x664F end 0x6651 type pointers
6651  !CSP_cfa: defw 0x6306
; [DASMZ80] !CSP_cfa: start 0x6651 end 0x6653 type pointers
6653  !CSP_pfa: 
6653 defw SP@_cfa
6655 defw CSP_cfa
6657 defw !_cfa
6659 defw ;S_cfa
; [DASMZ80] !CSP_pfa: start 0x6653 end 0x665B type pointers

6636  PFA_nfa: defb 0x03+0x80,"PF","A"+0x80
; [DASMZ80] PFA_nfa: start 0x6636 end 0x663A type bytedata
663A  PFA_lfa: defw NFA_nfa
; [DASMZ80] PFA_lfa: start 0x663A end 0x663C type pointers
663C  PFA_cfa: defw 0x6306
; [DASMZ80] PFA_cfa: start 0x663C end 0x663E type pointers
663E  PFA_pfa: 
663E defw 1_cfa
6640 defw TRAVERSE_cfa
6642 defw LIT_cfa,0x0005
6646 defw +_cfa
6648 defw ;S_cfa
; [DASMZ80] PFA_pfa: start 0x663E end 0x664A type pointers

6620  NFA_nfa: defb 0x03+0x80,"NF","A"+0x80
; [DASMZ80] NFA_nfa: start 0x6620 end 0x6624 type bytedata
6624  NFA_lfa: defw CFA_nfa
; [DASMZ80] NFA_lfa: start 0x6624 end 0x6626 type pointers
6626  NFA_cfa: defw 0x6306
; [DASMZ80] NFA_cfa: start 0x6626 end 0x6628 type pointers
6628  NFA_pfa: 
6628 defw LIT_cfa,0x0005
662C defw -_cfa
662E defw LIT_cfa,0xFFFF
6632 defw TRAVERSE_cfa
6634 defw ;S_cfa
; [DASMZ80] NFA_pfa: start 0x6628 end 0x6636 type pointers

6612  CFA_nfa: defb 0x03+0x80,"CF","A"+0x80
; [DASMZ80] CFA_nfa: start 0x6612 end 0x6616 type bytedata
6616  CFA_lfa: defw LFA_nfa
; [DASMZ80] CFA_lfa: start 0x6616 end 0x6618 type pointers
6618  CFA_cfa: defw 0x8405
; [DASMZ80] CFA_cfa: start 0x6618 end 0x661A type pointers
661A  CFA_pfa: ; Word type not implemented.

6602  LFA_nfa: defb 0x03+0x80,"LF","A"+0x80
; [DASMZ80] LFA_nfa: start 0x6602 end 0x6606 type bytedata
6606  LFA_lfa: defw LATEST_nfa
; [DASMZ80] LFA_lfa: start 0x6606 end 0x6608 type pointers
6608  LFA_cfa: defw 0x6306
; [DASMZ80] LFA_cfa: start 0x6608 end 0x660A type pointers
660A  LFA_pfa: 
660A defw LIT_cfa,0x0004
660E defw -_cfa
6610 defw ;S_cfa
; [DASMZ80] LFA_pfa: start 0x660A end 0x6612 type pointers

65EF  LATEST_nfa: defb 0x06+0x80,"LATES","T"+0x80
; [DASMZ80] LATEST_nfa: start 0x65EF end 0x65F6 type bytedata
65F6  LATEST_lfa: defw TRAVERSE_nfa
; [DASMZ80] LATEST_lfa: start 0x65F6 end 0x65F8 type pointers
65F8  LATEST_cfa: defw 0x6306
; [DASMZ80] LATEST_cfa: start 0x65F8 end 0x65FA type pointers
65FA  LATEST_pfa: 
65FA defw CURRENT_cfa
65FC defw @_cfa
65FE defw @_cfa
6600 defw ;S_cfa
; [DASMZ80] LATEST_pfa: start 0x65FA end 0x6602 type pointers

65C8  TRAVERSE_nfa: defb 0x08+0x80,"TRAVERS","E"+0x80
; [DASMZ80] TRAVERSE_nfa: start 0x65C8 end 0x65D1 type bytedata
65D1  TRAVERSE_lfa: defw -DUP_nfa
; [DASMZ80] TRAVERSE_lfa: start 0x65D1 end 0x65D3 type pointers
65D3  TRAVERSE_cfa: defw 0x6306
; [DASMZ80] TRAVERSE_cfa: start 0x65D3 end 0x65D5 type pointers
65D5  TRAVERSE_pfa: 
65D5 defw SWAP_cfa
65D7 defw OVER_cfa
65D9 defw +_cfa
65DB defw LIT_cfa,0x007F
65DF defw OVER_cfa
65E1 defw C@_cfa
65E3 defw <_cfa
65E5 defw 0BRANCH_cfa,0xFFF0; to 0x65D7
65E9 defw SWAP_cfa
65EB defw DROP_cfa
65ED defw ;S_cfa
; [DASMZ80] TRAVERSE_pfa: start 0x65D5 end 0x65EF type pointers

65B5  -DUP_nfa: defb 0x04+0x80,"-DU","P"+0x80
; [DASMZ80] -DUP_nfa: start 0x65B5 end 0x65BA type bytedata
65BA  -DUP_lfa: defw SPACE_nfa
; [DASMZ80] -DUP_lfa: start 0x65BA end 0x65BC type pointers
65BC  -DUP_cfa: defw 0x6306
; [DASMZ80] -DUP_cfa: start 0x65BC end 0x65BE type pointers
65BE  -DUP_pfa: 
65BE defw DUP_cfa
65C0 defw 0BRANCH_cfa,0x0004; to 0x65C6
65C4 defw DUP_cfa
65C6 defw ;S_cfa
; [DASMZ80] -DUP_pfa: start 0x65BE end 0x65C8 type pointers

65A5  SPACE_nfa: defb 0x05+0x80,"SPAC","E"+0x80
; [DASMZ80] SPACE_nfa: start 0x65A5 end 0x65AB type bytedata
65AB  SPACE_lfa: defw ROT_nfa
; [DASMZ80] SPACE_lfa: start 0x65AB end 0x65AD type pointers
65AD  SPACE_cfa: defw 0x6306
; [DASMZ80] SPACE_cfa: start 0x65AD end 0x65AF type pointers
65AF  SPACE_pfa: 
65AF defw BL_cfa
65B1 defw EMIT_cfa
65B3 defw ;S_cfa
; [DASMZ80] SPACE_pfa: start 0x65AF end 0x65B5 type pointers

6597  ROT_nfa: defb 0x03+0x80,"RO","T"+0x80
; [DASMZ80] ROT_nfa: start 0x6597 end 0x659B type bytedata
659B  ROT_lfa: defw >_nfa
; [DASMZ80] ROT_lfa: start 0x659B end 0x659D type pointers
659D  ROT_cfa: defw ROT_pfa
; [DASMZ80] ROT_cfa: start 0x659D end 0x659F type pointers
659F  ROT_pfa: ; Word type not implemented.

658B  >_nfa: defb 0x01+0x80,">"+0x80
; [DASMZ80] >_nfa: start 0x658B end 0x658D type bytedata
658D  >_lfa: defw U<_nfa
; [DASMZ80] >_lfa: start 0x658D end 0x658F type pointers
658F  >_cfa: defw 0x6306
; [DASMZ80] >_cfa: start 0x658F end 0x6591 type pointers
6591  >_pfa: 
6591 defw SWAP_cfa
6593 defw <_cfa
6595 defw ;S_cfa
; [DASMZ80] >_pfa: start 0x6591 end 0x6597 type pointers

656A  U<_nfa: defb 0x02+0x80,"U","<"+0x80
; [DASMZ80] U<_nfa: start 0x656A end 0x656D type bytedata
656D  U<_lfa: defw <_nfa
; [DASMZ80] U<_lfa: start 0x656D end 0x656F type pointers
656F  U<_cfa: defw 0x6306
; [DASMZ80] U<_cfa: start 0x656F end 0x6571 type pointers
6571  U<_pfa: 
6571 defw 2DUP_cfa
6573 defw XOR_cfa
6575 defw 0<_cfa
6577 defw 0BRANCH_cfa,0x000C; to 0x6585
657B defw DROP_cfa
657D defw 0<_cfa
657F defw 0=_cfa
6581 defw BRANCH_cfa,0x0006; to 0x6589
6585 defw -_cfa
6587 defw 0<_cfa
6589 defw ;S_cfa
; [DASMZ80] U<_pfa: start 0x6571 end 0x658B type pointers

6549  <_nfa: defb 0x01+0x80,"<"+0x80
; [DASMZ80] <_nfa: start 0x6549 end 0x654B type bytedata
654B  <_lfa: defw =_nfa
; [DASMZ80] <_lfa: start 0x654B end 0x654D type pointers
654D  <_cfa: defw <_pfa
; [DASMZ80] <_cfa: start 0x654D end 0x654F type pointers
654F  <_pfa: ; Word type not implemented.

653D  =_nfa: defb 0x01+0x80,"="+0x80
; [DASMZ80] =_nfa: start 0x653D end 0x653F type bytedata
653F  =_lfa: defw -_nfa
; [DASMZ80] =_lfa: start 0x653F end 0x6541 type pointers
6541  =_cfa: defw 0x6306
; [DASMZ80] =_cfa: start 0x6541 end 0x6543 type pointers
6543  =_pfa: 
6543 defw -_cfa
6545 defw 0=_cfa
6547 defw ;S_cfa
; [DASMZ80] =_pfa: start 0x6543 end 0x6549 type pointers

652F  -_nfa: defb 0x01+0x80,"-"+0x80
; [DASMZ80] -_nfa: start 0x652F end 0x6531 type bytedata
6531  -_lfa: defw C,_nfa
; [DASMZ80] -_lfa: start 0x6531 end 0x6533 type pointers
6533  -_cfa: defw -_pfa
; [DASMZ80] -_cfa: start 0x6533 end 0x6535 type pointers
6535  -_pfa: ; Word type not implemented.

651E  C,_nfa: defb 0x02+0x80,"C",","+0x80
; [DASMZ80] C,_nfa: start 0x651E end 0x6521 type bytedata
6521  C,_lfa: defw ,_nfa
; [DASMZ80] C,_lfa: start 0x6521 end 0x6523 type pointers
6523  C,_cfa: defw 0x6306
; [DASMZ80] C,_cfa: start 0x6523 end 0x6525 type pointers
6525  C,_pfa: 
6525 defw HERE_cfa
6527 defw C!_cfa
6529 defw 1_cfa
652B defw ALLOT_cfa
652D defw ;S_cfa
; [DASMZ80] C,_pfa: start 0x6525 end 0x652F type pointers

650E  ,_nfa: defb 0x01+0x80,","+0x80
; [DASMZ80] ,_nfa: start 0x650E end 0x6510 type bytedata
6510  ,_lfa: defw ALLOT_nfa
; [DASMZ80] ,_lfa: start 0x6510 end 0x6512 type pointers
6512  ,_cfa: defw 0x6306
; [DASMZ80] ,_cfa: start 0x6512 end 0x6514 type pointers
6514  ,_pfa: 
6514 defw HERE_cfa
6516 defw !_cfa
6518 defw 2_cfa
651A defw ALLOT_cfa
651C defw ;S_cfa
; [DASMZ80] ,_pfa: start 0x6514 end 0x651E type pointers

64FE  ALLOT_nfa: defb 0x05+0x80,"ALLO","T"+0x80
; [DASMZ80] ALLOT_nfa: start 0x64FE end 0x6504 type bytedata
6504  ALLOT_lfa: defw HERE_nfa
; [DASMZ80] ALLOT_lfa: start 0x6504 end 0x6506 type pointers
6506  ALLOT_cfa: defw 0x6306
; [DASMZ80] ALLOT_cfa: start 0x6506 end 0x6508 type pointers
6508  ALLOT_pfa: 
6508 defw DP_cfa
650A defw +!_cfa
650C defw ;S_cfa
; [DASMZ80] ALLOT_pfa: start 0x6508 end 0x650E type pointers

64EF  HERE_nfa: defb 0x04+0x80,"HER","E"+0x80
; [DASMZ80] HERE_nfa: start 0x64EF end 0x64F4 type bytedata
64F4  HERE_lfa: defw 2+_nfa
; [DASMZ80] HERE_lfa: start 0x64F4 end 0x64F6 type pointers
64F6  HERE_cfa: defw 0x6306
; [DASMZ80] HERE_cfa: start 0x64F6 end 0x64F8 type pointers
64F8  HERE_pfa: 
64F8 defw DP_cfa
64FA defw @_cfa
64FC defw ;S_cfa
; [DASMZ80] HERE_pfa: start 0x64F8 end 0x64FE type pointers

64E2  2+_nfa: defb 0x02+0x80,"2","+"+0x80
; [DASMZ80] 2+_nfa: start 0x64E2 end 0x64E5 type bytedata
64E5  2+_lfa: defw 1+_nfa
; [DASMZ80] 2+_lfa: start 0x64E5 end 0x64E7 type pointers
64E7  2+_cfa: defw 2+_pfa
; [DASMZ80] 2+_cfa: start 0x64E7 end 0x64E9 type pointers
64E9  2+_pfa: ; Word type not implemented.

64D5  1+_nfa: defb 0x02+0x80,"1","+"+0x80
; [DASMZ80] 1+_nfa: start 0x64D5 end 0x64D8 type bytedata
64D8  1+_lfa: defw HLD_nfa
; [DASMZ80] 1+_lfa: start 0x64D8 end 0x64DA type pointers
64DA  1+_cfa: defw 1+_pfa
; [DASMZ80] 1+_cfa: start 0x64DA end 0x64DC type pointers
64DC  1+_pfa: ; Word type not implemented.

64CC  HLD_nfa: defb 0x03+0x80,"HL","D"+0x80
; [DASMZ80] HLD_nfa: start 0x64CC end 0x64D0 type bytedata
64D0  HLD_lfa: defw R#_nfa
; [DASMZ80] HLD_lfa: start 0x64D0 end 0x64D2 type pointers
64D2  HLD_cfa: defw 0x6374
; [DASMZ80] HLD_cfa: start 0x64D2 end 0x64D4 type pointers
64D4  HLD_pfa: 
64D4 defw 0x8230
; [DASMZ80] HLD_pfa: start 0x64D4 end 0x64D6 type worddata

64C4  R#_nfa: defb 0x02+0x80,"R","#"+0x80
; [DASMZ80] R#_nfa: start 0x64C4 end 0x64C7 type bytedata
64C7  R#_lfa: defw CSP_nfa
; [DASMZ80] R#_lfa: start 0x64C7 end 0x64C9 type pointers
64C9  R#_cfa: defw 0x6374
; [DASMZ80] R#_cfa: start 0x64C9 end 0x64CB type pointers
64CB  R#_pfa: 
64CB defw 0x832E
; [DASMZ80] R#_pfa: start 0x64CB end 0x64CD type worddata

64BB  CSP_nfa: defb 0x03+0x80,"CS","P"+0x80
; [DASMZ80] CSP_nfa: start 0x64BB end 0x64BF type bytedata
64BF  CSP_lfa: defw FLD_nfa
; [DASMZ80] CSP_lfa: start 0x64BF end 0x64C1 type pointers
64C1  CSP_cfa: defw 0x6374
; [DASMZ80] CSP_cfa: start 0x64C1 end 0x64C3 type pointers
64C3  CSP_pfa: 
64C3 defw 0x822C
; [DASMZ80] CSP_pfa: start 0x64C3 end 0x64C5 type worddata

64B2  FLD_nfa: defb 0x03+0x80,"FL","D"+0x80
; [DASMZ80] FLD_nfa: start 0x64B2 end 0x64B6 type bytedata
64B6  FLD_lfa: defw DPL_nfa
; [DASMZ80] FLD_lfa: start 0x64B6 end 0x64B8 type pointers
64B8  FLD_cfa: defw 0x6374
; [DASMZ80] FLD_cfa: start 0x64B8 end 0x64BA type pointers
64BA  FLD_pfa: 
64BA defw 0x832A
; [DASMZ80] FLD_pfa: start 0x64BA end 0x64BC type worddata

64A9  DPL_nfa: defb 0x03+0x80,"DP","L"+0x80
; [DASMZ80] DPL_nfa: start 0x64A9 end 0x64AD type bytedata
64AD  DPL_lfa: defw BASE_nfa
; [DASMZ80] DPL_lfa: start 0x64AD end 0x64AF type pointers
64AF  DPL_cfa: defw 0x6374
; [DASMZ80] DPL_cfa: start 0x64AF end 0x64B1 type pointers
64B1  DPL_pfa: 
64B1 defw 0x8328
; [DASMZ80] DPL_pfa: start 0x64B1 end 0x64B3 type worddata

649F  BASE_nfa: defb 0x04+0x80,"BAS","E"+0x80
; [DASMZ80] BASE_nfa: start 0x649F end 0x64A4 type bytedata
64A4  BASE_lfa: defw STATE_nfa
; [DASMZ80] BASE_lfa: start 0x64A4 end 0x64A6 type pointers
64A6  BASE_cfa: defw 0x6374
; [DASMZ80] BASE_cfa: start 0x64A6 end 0x64A8 type pointers
64A8  BASE_pfa: 
64A8 defw 0x8326
; [DASMZ80] BASE_pfa: start 0x64A8 end 0x64AA type worddata

6494  STATE_nfa: defb 0x05+0x80,"STAT","E"+0x80
; [DASMZ80] STATE_nfa: start 0x6494 end 0x649A type bytedata
649A  STATE_lfa: defw CURRENT_nfa
; [DASMZ80] STATE_lfa: start 0x649A end 0x649C type pointers
649C  STATE_cfa: defw 0x6374
; [DASMZ80] STATE_cfa: start 0x649C end 0x649E type pointers
649E  STATE_pfa: 
649E defw 0x8424
; [DASMZ80] STATE_pfa: start 0x649E end 0x64A0 type worddata

6487  CURRENT_nfa: defb 0x07+0x80,"CURREN","T"+0x80
; [DASMZ80] CURRENT_nfa: start 0x6487 end 0x648F type bytedata
648F  CURRENT_lfa: defw CONTEXT_nfa
; [DASMZ80] CURRENT_lfa: start 0x648F end 0x6491 type pointers
6491  CURRENT_cfa: defw 0x6374
; [DASMZ80] CURRENT_cfa: start 0x6491 end 0x6493 type pointers
6493  CURRENT_pfa: 
6493 defw 0x8522
; [DASMZ80] CURRENT_pfa: start 0x6493 end 0x6495 type worddata

647A  CONTEXT_nfa: defb 0x07+0x80,"CONTEX","T"+0x80
; [DASMZ80] CONTEXT_nfa: start 0x647A end 0x6482 type bytedata
6482  CONTEXT_lfa: defw OFFSET_nfa
; [DASMZ80] CONTEXT_lfa: start 0x6482 end 0x6484 type pointers
6484  CONTEXT_cfa: defw 0x6374
; [DASMZ80] CONTEXT_cfa: start 0x6484 end 0x6486 type pointers
6486  CONTEXT_pfa: 
6486 defw 0x8720
; [DASMZ80] CONTEXT_pfa: start 0x6486 end 0x6488 type worddata

646E  OFFSET_nfa: defb 0x06+0x80,"OFFSE","T"+0x80
; [DASMZ80] OFFSET_nfa: start 0x646E end 0x6475 type bytedata
6475  OFFSET_lfa: defw SCR_nfa
; [DASMZ80] OFFSET_lfa: start 0x6475 end 0x6477 type pointers
6477  OFFSET_cfa: defw 0x6374
; [DASMZ80] OFFSET_cfa: start 0x6477 end 0x6479 type pointers
6479  OFFSET_pfa: 
6479 defw 0x871E
; [DASMZ80] OFFSET_pfa: start 0x6479 end 0x647B type worddata

6465  SCR_nfa: defb 0x03+0x80,"SC","R"+0x80
; [DASMZ80] SCR_nfa: start 0x6465 end 0x6469 type bytedata
6469  SCR_lfa: defw OUT_nfa
; [DASMZ80] SCR_lfa: start 0x6469 end 0x646B type pointers
646B  SCR_cfa: defw 0x6374
; [DASMZ80] SCR_cfa: start 0x646B end 0x646D type pointers
646D  SCR_pfa: 
646D defw 0x861C
; [DASMZ80] SCR_pfa: start 0x646D end 0x646F type worddata

645C  OUT_nfa: defb 0x03+0x80,"OU","T"+0x80
; [DASMZ80] OUT_nfa: start 0x645C end 0x6460 type bytedata
6460  OUT_lfa: defw IN_nfa
; [DASMZ80] OUT_lfa: start 0x6460 end 0x6462 type pointers
6462  OUT_cfa: defw 0x6374
; [DASMZ80] OUT_cfa: start 0x6462 end 0x6464 type pointers
6464  OUT_pfa: 
6464 defw 0x831A
; [DASMZ80] OUT_pfa: start 0x6464 end 0x6466 type worddata

6454  IN_nfa: defb 0x02+0x80,"I","N"+0x80
; [DASMZ80] IN_nfa: start 0x6454 end 0x6457 type bytedata
6457  IN_lfa: defw BLK_nfa
; [DASMZ80] IN_lfa: start 0x6457 end 0x6459 type pointers
6459  IN_cfa: defw 0x6374
; [DASMZ80] IN_cfa: start 0x6459 end 0x645B type pointers
645B  IN_pfa: 
645B defw 0x8318
; [DASMZ80] IN_pfa: start 0x645B end 0x645D type worddata

644B  BLK_nfa: defb 0x03+0x80,"BL","K"+0x80
; [DASMZ80] BLK_nfa: start 0x644B end 0x644F type bytedata
644F  BLK_lfa: defw VOC-LINK_nfa
; [DASMZ80] BLK_lfa: start 0x644F end 0x6451 type pointers
6451  BLK_cfa: defw 0x6374
; [DASMZ80] BLK_cfa: start 0x6451 end 0x6453 type pointers
6453  BLK_pfa: 
6453 defw 0x8216
; [DASMZ80] BLK_pfa: start 0x6453 end 0x6455 type worddata

643D  VOC-LINK_nfa: defb 0x08+0x80,"VOC-LIN","K"+0x80
; [DASMZ80] VOC-LINK_nfa: start 0x643D end 0x6446 type bytedata
6446  VOC-LINK_lfa: defw DP_nfa
; [DASMZ80] VOC-LINK_lfa: start 0x6446 end 0x6448 type pointers
6448  VOC-LINK_cfa: defw 0x6374
; [DASMZ80] VOC-LINK_cfa: start 0x6448 end 0x644A type pointers
644A  VOC-LINK_pfa: 
644A defw 0x8314
; [DASMZ80] VOC-LINK_pfa: start 0x644A end 0x644C type worddata

6435  DP_nfa: defb 0x02+0x80,"D","P"+0x80
; [DASMZ80] DP_nfa: start 0x6435 end 0x6438 type bytedata
6438  DP_lfa: defw FENCE_nfa
; [DASMZ80] DP_lfa: start 0x6438 end 0x643A type pointers
643A  DP_cfa: defw 0x6374
; [DASMZ80] DP_cfa: start 0x643A end 0x643C type pointers
643C  DP_pfa: 
643C defw 0x8812
; [DASMZ80] DP_pfa: start 0x643C end 0x643E type worddata

642A  FENCE_nfa: defb 0x05+0x80,"FENC","E"+0x80
; [DASMZ80] FENCE_nfa: start 0x642A end 0x6430 type bytedata
6430  FENCE_lfa: defw WARNING_nfa
; [DASMZ80] FENCE_lfa: start 0x6430 end 0x6432 type pointers
6432  FENCE_cfa: defw 0x6374
; [DASMZ80] FENCE_cfa: start 0x6432 end 0x6434 type pointers
6434  FENCE_pfa: 
6434 defw 0x8210
; [DASMZ80] FENCE_pfa: start 0x6434 end 0x6436 type worddata

641D  WARNING_nfa: defb 0x07+0x80,"WARNIN","G"+0x80
; [DASMZ80] WARNING_nfa: start 0x641D end 0x6425 type bytedata
6425  WARNING_lfa: defw WIDTH_nfa
; [DASMZ80] WARNING_lfa: start 0x6425 end 0x6427 type pointers
6427  WARNING_cfa: defw 0x6374
; [DASMZ80] WARNING_cfa: start 0x6427 end 0x6429 type pointers
6429  WARNING_pfa: 
6429 defw 0x850E
; [DASMZ80] WARNING_pfa: start 0x6429 end 0x642B type worddata

6412  WIDTH_nfa: defb 0x05+0x80,"WIDT","H"+0x80
; [DASMZ80] WIDTH_nfa: start 0x6412 end 0x6418 type bytedata
6418  WIDTH_lfa: defw TIB_nfa
; [DASMZ80] WIDTH_lfa: start 0x6418 end 0x641A type pointers
641A  WIDTH_cfa: defw 0x6374
; [DASMZ80] WIDTH_cfa: start 0x641A end 0x641C type pointers
641C  WIDTH_pfa: 
641C defw 0x870C
; [DASMZ80] WIDTH_pfa: start 0x641C end 0x641E type worddata

6409  TIB_nfa: defb 0x03+0x80,"TI","B"+0x80
; [DASMZ80] TIB_nfa: start 0x6409 end 0x640D type bytedata
640D  TIB_lfa: defw R0_nfa
; [DASMZ80] TIB_lfa: start 0x640D end 0x640F type pointers
640F  TIB_cfa: defw 0x6374
; [DASMZ80] TIB_cfa: start 0x640F end 0x6411 type pointers
6411  TIB_pfa: 
6411 defw 0x850A
; [DASMZ80] TIB_pfa: start 0x6411 end 0x6413 type worddata

6400  R0_nfa: defb 0x02+0x80,"R","0"+0x80
; [DASMZ80] R0_nfa: start 0x6400 end 0x6403 type bytedata
6403  R0_lfa: defw S0_nfa
; [DASMZ80] R0_lfa: start 0x6403 end 0x6405 type pointers
6405  R0_cfa: defw 0x6374
; [DASMZ80] R0_cfa: start 0x6405 end 0x6407 type pointers
6407  R0_pfa: 
6407 defw 0x0008
; [DASMZ80] R0_pfa: start 0x6407 end 0x6409 type worddata

63F7  S0_nfa: defb 0x02+0x80,"S","0"+0x80
; [DASMZ80] S0_nfa: start 0x63F7 end 0x63FA type bytedata
63FA  S0_lfa: defw +ORIGIN_nfa
; [DASMZ80] S0_lfa: start 0x63FA end 0x63FC type pointers
63FC  S0_cfa: defw 0x6374
; [DASMZ80] S0_cfa: start 0x63FC end 0x63FE type pointers
63FE  S0_pfa: 
63FE defw 0x0006
; [DASMZ80] S0_pfa: start 0x63FE end 0x6400 type worddata

63E3  +ORIGIN_nfa: defb 0x07+0x80,"+ORIGI","N"+0x80
; [DASMZ80] +ORIGIN_nfa: start 0x63E3 end 0x63EB type bytedata
63EB  +ORIGIN_lfa: defw B/SCR_nfa
; [DASMZ80] +ORIGIN_lfa: start 0x63EB end 0x63ED type pointers
63ED  +ORIGIN_cfa: defw 0x6306
; [DASMZ80] +ORIGIN_cfa: start 0x63ED end 0x63EF type pointers
63EF  +ORIGIN_pfa: 
63EF defw LIT_cfa,0x5E40
63F3 defw +_cfa
63F5 defw ;S_cfa
; [DASMZ80] +ORIGIN_pfa: start 0x63EF end 0x63F7 type pointers

63D7  B/SCR_nfa: defb 0x05+0x80,"B/SC","R"+0x80
; [DASMZ80] B/SCR_nfa: start 0x63D7 end 0x63DD type bytedata
63DD  B/SCR_lfa: defw B/BUF_nfa
; [DASMZ80] B/SCR_lfa: start 0x63DD end 0x63DF type pointers
63DF  B/SCR_cfa: defw 0x6348
; [DASMZ80] B/SCR_cfa: start 0x63DF end 0x63E1 type pointers
63E1  B/SCR_pfa: 
63E1 defw 0x0008
; [DASMZ80] B/SCR_pfa: start 0x63E1 end 0x63E3 type worddata

63CB  B/BUF_nfa: defb 0x05+0x80,"B/BU","F"+0x80
; [DASMZ80] B/BUF_nfa: start 0x63CB end 0x63D1 type bytedata
63D1  B/BUF_lfa: defw LIMIT_nfa
; [DASMZ80] B/BUF_lfa: start 0x63D1 end 0x63D3 type pointers
63D3  B/BUF_cfa: defw 0x6348
; [DASMZ80] B/BUF_cfa: start 0x63D3 end 0x63D5 type pointers
63D5  B/BUF_pfa: 
63D5 defw 0x0080
; [DASMZ80] B/BUF_pfa: start 0x63D5 end 0x63D7 type worddata

63BF  LIMIT_nfa: defb 0x05+0x80,"LIMI","T"+0x80
; [DASMZ80] LIMIT_nfa: start 0x63BF end 0x63C5 type bytedata
63C5  LIMIT_lfa: defw FIRST_nfa
; [DASMZ80] LIMIT_lfa: start 0x63C5 end 0x63C7 type pointers
63C7  LIMIT_cfa: defw 0x6348
; [DASMZ80] LIMIT_cfa: start 0x63C7 end 0x63C9 type pointers
63C9  LIMIT_pfa: 
63C9 defw 0x8F40
; [DASMZ80] LIMIT_pfa: start 0x63C9 end 0x63CB type worddata

63B3  FIRST_nfa: defb 0x05+0x80,"FIRS","T"+0x80
; [DASMZ80] FIRST_nfa: start 0x63B3 end 0x63B9 type bytedata
63B9  FIRST_lfa: defw C/L_nfa
; [DASMZ80] FIRST_lfa: start 0x63B9 end 0x63BB type pointers
63BB  FIRST_cfa: defw 0x6348
; [DASMZ80] FIRST_cfa: start 0x63BB end 0x63BD type pointers
63BD  FIRST_pfa: 
63BD defw 0x8B20
; [DASMZ80] FIRST_pfa: start 0x63BD end 0x63BF type worddata

63A9  C/L_nfa: defb 0x03+0x80,"C/","L"+0x80
; [DASMZ80] C/L_nfa: start 0x63A9 end 0x63AD type bytedata
63AD  C/L_lfa: defw BL_nfa
; [DASMZ80] C/L_lfa: start 0x63AD end 0x63AF type pointers
63AF  C/L_cfa: defw 0x6348
; [DASMZ80] C/L_cfa: start 0x63AF end 0x63B1 type pointers
63B1  C/L_pfa: 
63B1 defw 0x0040
; [DASMZ80] C/L_pfa: start 0x63B1 end 0x63B3 type worddata

63A0  BL_nfa: defb 0x02+0x80,"B","L"+0x80
; [DASMZ80] BL_nfa: start 0x63A0 end 0x63A3 type bytedata
63A3  BL_lfa: defw 3_nfa
; [DASMZ80] BL_lfa: start 0x63A3 end 0x63A5 type pointers
63A5  BL_cfa: defw 0x6348
; [DASMZ80] BL_cfa: start 0x63A5 end 0x63A7 type pointers
63A7  BL_pfa: 
63A7 defw 0x0020
; [DASMZ80] BL_pfa: start 0x63A7 end 0x63A9 type worddata

6398  3_nfa: defb 0x01+0x80,"3"+0x80
; [DASMZ80] 3_nfa: start 0x6398 end 0x639A type bytedata
639A  3_lfa: defw 2_nfa
; [DASMZ80] 3_lfa: start 0x639A end 0x639C type pointers
639C  3_cfa: defw 0x6348
; [DASMZ80] 3_cfa: start 0x639C end 0x639E type pointers
639E  3_pfa: 
639E defw 0x0003
; [DASMZ80] 3_pfa: start 0x639E end 0x63A0 type worddata

6390  2_nfa: defb 0x01+0x80,"2"+0x80
; [DASMZ80] 2_nfa: start 0x6390 end 0x6392 type bytedata
6392  2_lfa: defw 1_nfa
; [DASMZ80] 2_lfa: start 0x6392 end 0x6394 type pointers
6394  2_cfa: defw 0x6348
; [DASMZ80] 2_cfa: start 0x6394 end 0x6396 type pointers
6396  2_pfa: 
6396 defw 0x0002
; [DASMZ80] 2_pfa: start 0x6396 end 0x6398 type worddata

6388  1_nfa: defb 0x01+0x80,"1"+0x80
; [DASMZ80] 1_nfa: start 0x6388 end 0x638A type bytedata
638A  1_lfa: defw 0_nfa
; [DASMZ80] 1_lfa: start 0x638A end 0x638C type pointers
638C  1_cfa: defw 0x6348
; [DASMZ80] 1_cfa: start 0x638C end 0x638E type pointers
638E  1_pfa: 
638E defw 0x0001
; [DASMZ80] 1_pfa: start 0x638E end 0x6390 type worddata

6380  0_nfa: defb 0x01+0x80,"0"+0x80
; [DASMZ80] 0_nfa: start 0x6380 end 0x6382 type bytedata
6382  0_lfa: defw USER_nfa
; [DASMZ80] 0_lfa: start 0x6382 end 0x6384 type pointers
6384  0_cfa: defw 0x6348
; [DASMZ80] 0_cfa: start 0x6384 end 0x6386 type pointers
6386  0_pfa: 
6386 defw 0x0000
; [DASMZ80] 0_pfa: start 0x6386 end 0x6388 type worddata

6367  USER_nfa: defb 0x04+0x80,"USE","R"+0x80
; [DASMZ80] USER_nfa: start 0x6367 end 0x636C type bytedata
636C  USER_lfa: defw VARIABLE_nfa
; [DASMZ80] USER_lfa: start 0x636C end 0x636E type pointers
636E  USER_cfa: defw 0x6306
; [DASMZ80] USER_cfa: start 0x636E end 0x6370 type pointers
6370  USER_pfa: 
6370 defw CONSTANT_cfa
6372 defw (;CODE)_cfa
; [DASMZ80] USER_pfa: start 0x6370 end 0x6374 type pointers

6351  VARIABLE_nfa: defb 0x08+0x80,"VARIABL","E"+0x80
; [DASMZ80] VARIABLE_nfa: start 0x6351 end 0x635A type bytedata
635A  VARIABLE_lfa: defw CONSTANT_nfa
; [DASMZ80] VARIABLE_lfa: start 0x635A end 0x635C type pointers
635C  VARIABLE_cfa: defw 0x6306
; [DASMZ80] VARIABLE_cfa: start 0x635C end 0x635E type pointers
635E  VARIABLE_pfa: 
635E defw CONSTANT_cfa
6360 defw (;CODE)_cfa
; [DASMZ80] VARIABLE_pfa: start 0x635E end 0x6362 type pointers

6333  CONSTANT_nfa: defb 0x08+0x80,"CONSTAN","T"+0x80
; [DASMZ80] CONSTANT_nfa: start 0x6333 end 0x633C type bytedata
633C  CONSTANT_lfa: defw NOOP_nfa
; [DASMZ80] CONSTANT_lfa: start 0x633C end 0x633E type pointers
633E  CONSTANT_cfa: defw 0x6306
; [DASMZ80] CONSTANT_cfa: start 0x633E end 0x6340 type pointers
6340  CONSTANT_pfa: 
6340 defw CREATE_cfa
6342 defw SMUDGE_cfa
6344 defw ,_cfa
6346 defw (;CODE)_cfa
; [DASMZ80] CONSTANT_pfa: start 0x6340 end 0x6348 type pointers

6328  NOOP_nfa: defb 0x04+0x80,"NOO","P"+0x80
; [DASMZ80] NOOP_nfa: start 0x6328 end 0x632D type bytedata
632D  NOOP_lfa: defw ;_nfa
; [DASMZ80] NOOP_lfa: start 0x632D end 0x632F type pointers
632F  NOOP_cfa: defw 0x6306
; [DASMZ80] NOOP_cfa: start 0x632F end 0x6331 type pointers
6331  NOOP_pfa: 
6331 defw ;S_cfa
; [DASMZ80] NOOP_pfa: start 0x6331 end 0x6333 type pointers

6316  ;_nfa: defb 0x01+0x80+0x40,";"+0x80
; [DASMZ80] ;_nfa: start 0x6316 end 0x6318 type bytedata
6318  ;_lfa: defw :_nfa
; [DASMZ80] ;_lfa: start 0x6318 end 0x631A type pointers
631A  ;_cfa: defw 0x6306
; [DASMZ80] ;_cfa: start 0x631A end 0x631C type pointers
631C  ;_pfa: 
631C defw ?CSP_cfa
631E defw COMPILE_cfa,;S_cfa
6322 defw SMUDGE_cfa
6324 defw [_cfa
6326 defw ;S_cfa
; [DASMZ80] ;_pfa: start 0x631C end 0x6328 type pointers

62EE  :_nfa: defb 0x01+0x80+0x40,":"+0x80
; [DASMZ80] :_nfa: start 0x62EE end 0x62F0 type bytedata
62F0  :_lfa: defw 2!_nfa
; [DASMZ80] :_lfa: start 0x62F0 end 0x62F2 type pointers
62F2  :_cfa: defw 0x6306
; [DASMZ80] :_cfa: start 0x62F2 end 0x62F4 type pointers
62F4  :_pfa: 
62F4 defw ?EXEC_cfa
62F6 defw !CSP_cfa
62F8 defw CURRENT_cfa
62FA defw @_cfa
62FC defw CONTEXT_cfa
62FE defw !_cfa
6300 defw CREATE_cfa
6302 defw ]_cfa
6304 defw (;CODE)_cfa
; [DASMZ80] :_pfa: start 0x62F4 end 0x6306 type pointers

62DA  2!_nfa: defb 0x02+0x80,"2","!"+0x80
; [DASMZ80] 2!_nfa: start 0x62DA end 0x62DD type bytedata
62DD  2!_lfa: defw C!_nfa
; [DASMZ80] 2!_lfa: start 0x62DD end 0x62DF type pointers
62DF  2!_cfa: defw 2!_pfa
; [DASMZ80] 2!_cfa: start 0x62DF end 0x62E1 type pointers
62E1  2!_pfa: ; Word type not implemented.

62CD  C!_nfa: defb 0x02+0x80,"C","!"+0x80
; [DASMZ80] C!_nfa: start 0x62CD end 0x62D0 type bytedata
62D0  C!_lfa: defw !_nfa
; [DASMZ80] C!_lfa: start 0x62D0 end 0x62D2 type pointers
62D2  C!_cfa: defw C!_pfa
; [DASMZ80] C!_cfa: start 0x62D2 end 0x62D4 type pointers
62D4  C!_pfa: ; Word type not implemented.

62BF  !_nfa: defb 0x01+0x80,"!"+0x80
; [DASMZ80] !_nfa: start 0x62BF end 0x62C1 type bytedata
62C1  !_lfa: defw 2@_nfa
; [DASMZ80] !_lfa: start 0x62C1 end 0x62C3 type pointers
62C3  !_cfa: defw !_pfa
; [DASMZ80] !_cfa: start 0x62C3 end 0x62C5 type pointers
62C5  !_pfa: ; Word type not implemented.

62A8  2@_nfa: defb 0x02+0x80,"2","@"+0x80
; [DASMZ80] 2@_nfa: start 0x62A8 end 0x62AB type bytedata
62AB  2@_lfa: defw C@_nfa
; [DASMZ80] 2@_lfa: start 0x62AB end 0x62AD type pointers
62AD  2@_cfa: defw 2@_pfa
; [DASMZ80] 2@_cfa: start 0x62AD end 0x62AF type pointers
62AF  2@_pfa: ; Word type not implemented.

629A  C@_nfa: defb 0x02+0x80,"C","@"+0x80
; [DASMZ80] C@_nfa: start 0x629A end 0x629D type bytedata
629D  C@_lfa: defw @_nfa
; [DASMZ80] C@_lfa: start 0x629D end 0x629F type pointers
629F  C@_cfa: defw C@_pfa
; [DASMZ80] C@_cfa: start 0x629F end 0x62A1 type pointers
62A1  C@_pfa: ; Word type not implemented.

628C  @_nfa: defb 0x01+0x80,"@"+0x80
; [DASMZ80] @_nfa: start 0x628C end 0x628E type bytedata
628E  @_lfa: defw TOGGLE_nfa
; [DASMZ80] @_lfa: start 0x628E end 0x6290 type pointers
6290  @_cfa: defw @_pfa
; [DASMZ80] @_cfa: start 0x6290 end 0x6292 type pointers
6292  @_pfa: ; Word type not implemented.

6279  TOGGLE_nfa: defb 0x06+0x80,"TOGGL","E"+0x80
; [DASMZ80] TOGGLE_nfa: start 0x6279 end 0x6280 type bytedata
6280  TOGGLE_lfa: defw +!_nfa
; [DASMZ80] TOGGLE_lfa: start 0x6280 end 0x6282 type pointers
6282  TOGGLE_cfa: defw TOGGLE_pfa
; [DASMZ80] TOGGLE_cfa: start 0x6282 end 0x6284 type pointers
6284  TOGGLE_pfa: ; Word type not implemented.

6266  +!_nfa: defb 0x02+0x80,"+","!"+0x80
; [DASMZ80] +!_nfa: start 0x6266 end 0x6269 type bytedata
6269  +!_lfa: defw 2DUP_nfa
; [DASMZ80] +!_lfa: start 0x6269 end 0x626B type pointers
626B  +!_cfa: defw +!_pfa
; [DASMZ80] +!_cfa: start 0x626B end 0x626D type pointers
626D  +!_pfa: ; Word type not implemented.

6256  2DUP_nfa: defb 0x04+0x80,"2DU","P"+0x80
; [DASMZ80] 2DUP_nfa: start 0x6256 end 0x625B type bytedata
625B  2DUP_lfa: defw DUP_nfa
; [DASMZ80] 2DUP_lfa: start 0x625B end 0x625D type pointers
625D  2DUP_cfa: defw 2DUP_pfa
; [DASMZ80] 2DUP_cfa: start 0x625D end 0x625F type pointers
625F  2DUP_pfa: ; Word type not implemented.

6249  DUP_nfa: defb 0x03+0x80,"DU","P"+0x80
; [DASMZ80] DUP_nfa: start 0x6249 end 0x624D type bytedata
624D  DUP_lfa: defw SWAP_nfa
; [DASMZ80] DUP_lfa: start 0x624D end 0x624F type pointers
624F  DUP_cfa: defw DUP_pfa
; [DASMZ80] DUP_cfa: start 0x624F end 0x6251 type pointers
6251  DUP_pfa: ; Word type not implemented.

623B  SWAP_nfa: defb 0x04+0x80,"SWA","P"+0x80
; [DASMZ80] SWAP_nfa: start 0x623B end 0x6240 type bytedata
6240  SWAP_lfa: defw DROP_nfa
; [DASMZ80] SWAP_lfa: start 0x6240 end 0x6242 type pointers
6242  SWAP_cfa: defw SWAP_pfa
; [DASMZ80] SWAP_cfa: start 0x6242 end 0x6244 type pointers
6244  SWAP_pfa: ; Word type not implemented.

622E  DROP_nfa: defb 0x04+0x80,"DRO","P"+0x80
; [DASMZ80] DROP_nfa: start 0x622E end 0x6233 type bytedata
6233  DROP_lfa: defw OVER_nfa
; [DASMZ80] DROP_lfa: start 0x6233 end 0x6235 type pointers
6235  DROP_cfa: defw DROP_pfa
; [DASMZ80] DROP_cfa: start 0x6235 end 0x6237 type pointers
6237  DROP_pfa: ; Word type not implemented.

621F  OVER_nfa: defb 0x04+0x80,"OVE","R"+0x80
; [DASMZ80] OVER_nfa: start 0x621F end 0x6224 type bytedata
6224  OVER_lfa: defw DMINUS_nfa
; [DASMZ80] OVER_lfa: start 0x6224 end 0x6226 type pointers
6226  OVER_cfa: defw OVER_pfa
; [DASMZ80] OVER_cfa: start 0x6226 end 0x6228 type pointers
6228  OVER_pfa: ; Word type not implemented.

61FF  DMINUS_nfa: defb 0x06+0x80,"DMINU","S"+0x80
; [DASMZ80] DMINUS_nfa: start 0x61FF end 0x6206 type bytedata
6206  DMINUS_lfa: defw MINUS_nfa
; [DASMZ80] DMINUS_lfa: start 0x6206 end 0x6208 type pointers
6208  DMINUS_cfa: defw DMINUS_pfa
; [DASMZ80] DMINUS_cfa: start 0x6208 end 0x620A type pointers
620A  DMINUS_pfa: ; Word type not implemented.

61EB  MINUS_nfa: defb 0x05+0x80,"MINU","S"+0x80
; [DASMZ80] MINUS_nfa: start 0x61EB end 0x61F1 type bytedata
61F1  MINUS_lfa: defw D+_nfa
; [DASMZ80] MINUS_lfa: start 0x61F1 end 0x61F3 type pointers
61F3  MINUS_cfa: defw MINUS_pfa
; [DASMZ80] MINUS_cfa: start 0x61F3 end 0x61F5 type pointers
61F5  MINUS_pfa: ; Word type not implemented.

61CF  D+_nfa: defb 0x02+0x80,"D","+"+0x80
; [DASMZ80] D+_nfa: start 0x61CF end 0x61D2 type bytedata
61D2  D+_lfa: defw +_nfa
; [DASMZ80] D+_lfa: start 0x61D2 end 0x61D4 type pointers
61D4  D+_cfa: defw D+_pfa
; [DASMZ80] D+_cfa: start 0x61D4 end 0x61D6 type pointers
61D6  D+_pfa: ; Word type not implemented.

61C3  +_nfa: defb 0x01+0x80,"+"+0x80
; [DASMZ80] +_nfa: start 0x61C3 end 0x61C5 type bytedata
61C5  +_lfa: defw 0<_nfa
; [DASMZ80] +_lfa: start 0x61C5 end 0x61C7 type pointers
61C7  +_cfa: defw +_pfa
; [DASMZ80] +_cfa: start 0x61C7 end 0x61C9 type pointers
61C9  +_pfa: ; Word type not implemented.

61B1  0<_nfa: defb 0x02+0x80,"0","<"+0x80
; [DASMZ80] 0<_nfa: start 0x61B1 end 0x61B4 type bytedata
61B4  0<_lfa: defw 0=_nfa
; [DASMZ80] 0<_lfa: start 0x61B4 end 0x61B6 type pointers
61B6  0<_cfa: defw 0<_pfa
; [DASMZ80] 0<_cfa: start 0x61B6 end 0x61B8 type pointers
61B8  0<_pfa: ; Word type not implemented.

619E  0=_nfa: defb 0x02+0x80,"0","="+0x80
; [DASMZ80] 0=_nfa: start 0x619E end 0x61A1 type bytedata
61A1  0=_lfa: defw R_nfa
; [DASMZ80] 0=_lfa: start 0x61A1 end 0x61A3 type pointers
61A3  0=_cfa: defw 0=_pfa
; [DASMZ80] 0=_cfa: start 0x61A3 end 0x61A5 type pointers
61A5  0=_pfa: ; Word type not implemented.

6198  R_nfa: defb 0x01+0x80,"R"+0x80
; [DASMZ80] R_nfa: start 0x6198 end 0x619A type bytedata
619A  R_lfa: defw R>_nfa
; [DASMZ80] R_lfa: start 0x619A end 0x619C type pointers
619C  R_cfa: defw 0x5F32
; [DASMZ80] R_cfa: start 0x619C end 0x619E type pointers
619E  R_pfa: ; Word type not implemented.

6183  R>_nfa: defb 0x02+0x80,"R",">"+0x80
; [DASMZ80] R>_nfa: start 0x6183 end 0x6186 type bytedata
6186  R>_lfa: defw >R_nfa
; [DASMZ80] R>_lfa: start 0x6186 end 0x6188 type pointers
6188  R>_cfa: defw R>_pfa
; [DASMZ80] R>_cfa: start 0x6188 end 0x618A type pointers
618A  R>_pfa: ; Word type not implemented.

616E  >R_nfa: defb 0x02+0x80,">","R"+0x80
; [DASMZ80] >R_nfa: start 0x616E end 0x6171 type bytedata
6171  >R_lfa: defw LEAVE_nfa
; [DASMZ80] >R_lfa: start 0x6171 end 0x6173 type pointers
6173  >R_cfa: defw >R_pfa
; [DASMZ80] >R_cfa: start 0x6173 end 0x6175 type pointers
6175  >R_pfa: ; Word type not implemented.

6157  LEAVE_nfa: defb 0x05+0x80,"LEAV","E"+0x80
; [DASMZ80] LEAVE_nfa: start 0x6157 end 0x615D type bytedata
615D  LEAVE_lfa: defw ;S_nfa
; [DASMZ80] LEAVE_lfa: start 0x615D end 0x615F type pointers
615F  LEAVE_cfa: defw LEAVE_pfa
; [DASMZ80] LEAVE_cfa: start 0x615F end 0x6161 type pointers
6161  LEAVE_pfa: ; Word type not implemented.

6143  ;S_nfa: defb 0x02+0x80,";","S"+0x80
; [DASMZ80] ;S_nfa: start 0x6143 end 0x6146 type bytedata
6146  ;S_lfa: defw RP!_nfa
; [DASMZ80] ;S_lfa: start 0x6146 end 0x6148 type pointers
6148  ;S_cfa: defw ;S_pfa
; [DASMZ80] ;S_cfa: start 0x6148 end 0x614A type pointers
614A  ;S_pfa: ; Word type not implemented.

612E  RP!_nfa: defb 0x03+0x80,"RP","!"+0x80
; [DASMZ80] RP!_nfa: start 0x612E end 0x6132 type bytedata
6132  RP!_lfa: defw RP@_nfa
; [DASMZ80] RP!_lfa: start 0x6132 end 0x6134 type pointers
6134  RP!_cfa: defw RP!_pfa
; [DASMZ80] RP!_cfa: start 0x6134 end 0x6136 type pointers
6136  RP!_pfa: ; Word type not implemented.

6120  RP@_nfa: defb 0x03+0x80,"RP","@"+0x80
; [DASMZ80] RP@_nfa: start 0x6120 end 0x6124 type bytedata
6124  RP@_lfa: defw SP!_nfa
; [DASMZ80] RP@_lfa: start 0x6124 end 0x6126 type pointers
6126  RP@_cfa: defw RP@_pfa
; [DASMZ80] RP@_cfa: start 0x6126 end 0x6128 type pointers
6128  RP@_pfa: ; Word type not implemented.

610D  SP!_nfa: defb 0x03+0x80,"SP","!"+0x80
; [DASMZ80] SP!_nfa: start 0x610D end 0x6111 type bytedata
6111  SP!_lfa: defw SP@_nfa
; [DASMZ80] SP!_lfa: start 0x6111 end 0x6113 type pointers
6113  SP!_cfa: defw SP!_pfa
; [DASMZ80] SP!_cfa: start 0x6113 end 0x6115 type pointers
6115  SP!_pfa: ; Word type not implemented.

60FE  SP@_nfa: defb 0x03+0x80,"SP","@"+0x80
; [DASMZ80] SP@_nfa: start 0x60FE end 0x6102 type bytedata
6102  SP@_lfa: defw XOR_nfa
; [DASMZ80] SP@_lfa: start 0x6102 end 0x6104 type pointers
6104  SP@_cfa: defw SP@_pfa
; [DASMZ80] SP@_cfa: start 0x6104 end 0x6106 type pointers
6106  SP@_pfa: ; Word type not implemented.

60EB  XOR_nfa: defb 0x03+0x80,"XO","R"+0x80
; [DASMZ80] XOR_nfa: start 0x60EB end 0x60EF type bytedata
60EF  XOR_lfa: defw OR_nfa
; [DASMZ80] XOR_lfa: start 0x60EF end 0x60F1 type pointers
60F1  XOR_cfa: defw XOR_pfa
; [DASMZ80] XOR_cfa: start 0x60F1 end 0x60F3 type pointers
60F3  XOR_pfa: ; Word type not implemented.

60D9  OR_nfa: defb 0x02+0x80,"O","R"+0x80
; [DASMZ80] OR_nfa: start 0x60D9 end 0x60DC type bytedata
60DC  OR_lfa: defw AND_nfa
; [DASMZ80] OR_lfa: start 0x60DC end 0x60DE type pointers
60DE  OR_cfa: defw OR_pfa
; [DASMZ80] OR_cfa: start 0x60DE end 0x60E0 type pointers
60E0  OR_pfa: ; Word type not implemented.

60C6  AND_nfa: defb 0x03+0x80,"AN","D"+0x80
; [DASMZ80] AND_nfa: start 0x60C6 end 0x60CA type bytedata
60CA  AND_lfa: defw U/MOD_nfa
; [DASMZ80] AND_lfa: start 0x60CA end 0x60CC type pointers
60CC  AND_cfa: defw AND_pfa
; [DASMZ80] AND_cfa: start 0x60CC end 0x60CE type pointers
60CE  AND_pfa: ; Word type not implemented.

607D  U/MOD_nfa: defb 0x05+0x80,"U/MO","D"+0x80
; [DASMZ80] U/MOD_nfa: start 0x607D end 0x6083 type bytedata
6083  U/MOD_lfa: defw U*_nfa
; [DASMZ80] U/MOD_lfa: start 0x6083 end 0x6085 type pointers
6085  U/MOD_cfa: defw U/MOD_pfa
; [DASMZ80] U/MOD_cfa: start 0x6085 end 0x6087 type pointers
6087  U/MOD_pfa: ; Word type not implemented.

604A  U*_nfa: defb 0x02+0x80,"U","*"+0x80
; [DASMZ80] U*_nfa: start 0x604A end 0x604D type bytedata
604D  U*_lfa: defw CMOVE_nfa
; [DASMZ80] U*_lfa: start 0x604D end 0x604F type pointers
604F  U*_cfa: defw U*_pfa
; [DASMZ80] U*_cfa: start 0x604F end 0x6051 type pointers
6051  U*_pfa: ; Word type not implemented.

6031  CMOVE_nfa: defb 0x05+0x80,"CMOV","E"+0x80
; [DASMZ80] CMOVE_nfa: start 0x6031 end 0x6037 type bytedata
6037  CMOVE_lfa: defw CR_nfa
; [DASMZ80] CMOVE_lfa: start 0x6037 end 0x6039 type pointers
6039  CMOVE_cfa: defw CMOVE_pfa
; [DASMZ80] CMOVE_cfa: start 0x6039 end 0x603B type pointers
603B  CMOVE_pfa: ; Word type not implemented.

6027  CR_nfa: defb 0x02+0x80,"C","R"+0x80
; [DASMZ80] CR_nfa: start 0x6027 end 0x602A type bytedata
602A  CR_lfa: defw ?TERMINAL_nfa
; [DASMZ80] CR_lfa: start 0x602A end 0x602C type pointers
602C  CR_cfa: defw CR_pfa
; [DASMZ80] CR_cfa: start 0x602C end 0x602E type pointers
602E  CR_pfa: ; Word type not implemented.

6013  ?TERMINAL_nfa: defb 0x09+0x80,"?TERMINA","L"+0x80
; [DASMZ80] ?TERMINAL_nfa: start 0x6013 end 0x601D type bytedata
601D  ?TERMINAL_lfa: defw KEY_nfa
; [DASMZ80] ?TERMINAL_lfa: start 0x601D end 0x601F type pointers
601F  ?TERMINAL_cfa: defw ?TERMINAL_pfa
; [DASMZ80] ?TERMINAL_cfa: start 0x601F end 0x6021 type pointers
6021  ?TERMINAL_pfa: ; Word type not implemented.

6008  KEY_nfa: defb 0x03+0x80,"KE","Y"+0x80
; [DASMZ80] KEY_nfa: start 0x6008 end 0x600C type bytedata
600C  KEY_lfa: defw EMIT_nfa
; [DASMZ80] KEY_lfa: start 0x600C end 0x600E type pointers
600E  KEY_cfa: defw KEY_pfa
; [DASMZ80] KEY_cfa: start 0x600E end 0x6010 type pointers
6010  KEY_pfa: ; Word type not implemented.

5FF5  EMIT_nfa: defb 0x04+0x80,"EMI","T"+0x80
; [DASMZ80] EMIT_nfa: start 0x5FF5 end 0x5FFA type bytedata
5FFA  EMIT_lfa: defw ENCLOSE_nfa
; [DASMZ80] EMIT_lfa: start 0x5FFA end 0x5FFC type pointers
5FFC  EMIT_cfa: defw 0x6306
; [DASMZ80] EMIT_cfa: start 0x5FFC end 0x5FFE type pointers
5FFE  EMIT_pfa: 
5FFE defw k^_cfa
6000 defw 1_cfa
6002 defw OUT_cfa
6004 defw +!_cfa
6006 defw ;S_cfa
; [DASMZ80] EMIT_pfa: start 0x5FFE end 0x6008 type pointers

5FB2  ENCLOSE_nfa: defb 0x07+0x80,"ENCLOS","E"+0x80
; [DASMZ80] ENCLOSE_nfa: start 0x5FB2 end 0x5FBA type bytedata
5FBA  ENCLOSE_lfa: defw (FIND)_nfa
; [DASMZ80] ENCLOSE_lfa: start 0x5FBA end 0x5FBC type pointers
5FBC  ENCLOSE_cfa: defw ENCLOSE_pfa
; [DASMZ80] ENCLOSE_cfa: start 0x5FBC end 0x5FBE type pointers
5FBE  ENCLOSE_pfa: ; Word type not implemented.

5F69  (FIND)_nfa: defb 0x06+0x80,"(FIND",")"+0x80
; [DASMZ80] (FIND)_nfa: start 0x5F69 end 0x5F70 type bytedata
5F70  (FIND)_lfa: defw DIGIT_nfa
; [DASMZ80] (FIND)_lfa: start 0x5F70 end 0x5F72 type pointers
5F72  (FIND)_cfa: defw (FIND)_pfa
; [DASMZ80] (FIND)_cfa: start 0x5F72 end 0x5F74 type pointers
5F74  (FIND)_pfa: ; Word type not implemented.

5F3C  DIGIT_nfa: defb 0x05+0x80,"DIGI","T"+0x80
; [DASMZ80] DIGIT_nfa: start 0x5F3C end 0x5F42 type bytedata
5F42  DIGIT_lfa: defw I_nfa
; [DASMZ80] DIGIT_lfa: start 0x5F42 end 0x5F44 type pointers
5F44  DIGIT_cfa: defw DIGIT_pfa
; [DASMZ80] DIGIT_cfa: start 0x5F44 end 0x5F46 type pointers
5F46  DIGIT_pfa: ; Word type not implemented.

5F2C  I_nfa: defb 0x01+0x80,"I"+0x80
; [DASMZ80] I_nfa: start 0x5F2C end 0x5F2E type bytedata
5F2E  I_lfa: defw (DO)_nfa
; [DASMZ80] I_lfa: start 0x5F2E end 0x5F30 type pointers
5F30  I_cfa: defw I_pfa
; [DASMZ80] I_cfa: start 0x5F30 end 0x5F32 type pointers
5F32  I_pfa: ; Word type not implemented.

5F0D  (DO)_nfa: defb 0x04+0x80,"(DO",")"+0x80
; [DASMZ80] (DO)_nfa: start 0x5F0D end 0x5F12 type bytedata
5F12  (DO)_lfa: defw (+LOOP)_nfa
; [DASMZ80] (DO)_lfa: start 0x5F12 end 0x5F14 type pointers
5F14  (DO)_cfa: defw (DO)_pfa
; [DASMZ80] (DO)_cfa: start 0x5F14 end 0x5F16 type pointers
5F16  (DO)_pfa: ; Word type not implemented.

5EFE  (+LOOP)_nfa: defb 0x07+0x80,"(+LOOP",")"+0x80
; [DASMZ80] (+LOOP)_nfa: start 0x5EFE end 0x5F06 type bytedata
5F06  (+LOOP)_lfa: defw (LOOP)_nfa
; [DASMZ80] (+LOOP)_lfa: start 0x5F06 end 0x5F08 type pointers
5F08  (+LOOP)_cfa: defw (+LOOP)_pfa
; [DASMZ80] (+LOOP)_cfa: start 0x5F08 end 0x5F0A type pointers
5F0A  (+LOOP)_pfa: ; Word type not implemented.

5EC5  (LOOP)_nfa: defb 0x06+0x80,"(LOOP",")"+0x80
; [DASMZ80] (LOOP)_nfa: start 0x5EC5 end 0x5ECC type bytedata
5ECC  (LOOP)_lfa: defw 0BRANCH_nfa
; [DASMZ80] (LOOP)_lfa: start 0x5ECC end 0x5ECE type pointers
5ECE  (LOOP)_cfa: defw (LOOP)_pfa
; [DASMZ80] (LOOP)_cfa: start 0x5ECE end 0x5ED0 type pointers
5ED0  (LOOP)_pfa: ; Word type not implemented.

5EAF  0BRANCH_nfa: defb 0x07+0x80,"0BRANC","H"+0x80
; [DASMZ80] 0BRANCH_nfa: start 0x5EAF end 0x5EB7 type bytedata
5EB7  0BRANCH_lfa: defw BRANCH_nfa
; [DASMZ80] 0BRANCH_lfa: start 0x5EB7 end 0x5EB9 type pointers
5EB9  0BRANCH_cfa: defw 0BRANCH_pfa
; [DASMZ80] 0BRANCH_cfa: start 0x5EB9 end 0x5EBB type pointers
5EBB  0BRANCH_pfa: ; Word type not implemented.

5E98  BRANCH_nfa: defb 0x06+0x80,"BRANC","H"+0x80
; [DASMZ80] BRANCH_nfa: start 0x5E98 end 0x5E9F type bytedata
5E9F  BRANCH_lfa: defw EXECUTE_nfa
; [DASMZ80] BRANCH_lfa: start 0x5E9F end 0x5EA1 type pointers
5EA1  BRANCH_cfa: defw BRANCH_pfa
; [DASMZ80] BRANCH_cfa: start 0x5EA1 end 0x5EA3 type pointers
5EA3  BRANCH_pfa: ; Word type not implemented.

5E88  EXECUTE_nfa: defb 0x07+0x80,"EXECUT","E"+0x80
; [DASMZ80] EXECUTE_nfa: start 0x5E88 end 0x5E90 type bytedata
5E90  EXECUTE_lfa: defw LIT_nfa
; [DASMZ80] EXECUTE_lfa: start 0x5E90 end 0x5E92 type pointers
5E92  EXECUTE_cfa: defw EXECUTE_pfa
; [DASMZ80] EXECUTE_cfa: start 0x5E92 end 0x5E94 type pointers
5E94  EXECUTE_pfa: ; Word type not implemented.

5E77  LIT_nfa: defb 0x03+0x80,"LI","T"+0x80
; [DASMZ80] LIT_nfa: start 0x5E77 end 0x5E7B type bytedata
5E7B  LIT_lfa: defw 0 
; [DASMZ80] LIT_lfa: start 0x5E7B end 0x5E7D type pointers
5E7D  LIT_cfa: defw LIT_pfa
; [DASMZ80] LIT_cfa: start 0x5E7D end 0x5E7F type pointers
5E7F  LIT_pfa: ; Word type not implemented.ok
