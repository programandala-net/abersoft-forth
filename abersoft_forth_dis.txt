

7B22  c_nfa: 
7B22 defb 0x01+0x80,"C"+0x80
; [DASMZ80 ZONE] c_nfa: start 0x7B22 end 0x7B24 type bytedata
7B24  c_lfa: 
7B24 defw till_nfa
; [DASMZ80 ZONE] c_lfa: start 0x7B24 end 0x7B26 type pointers
7B26  c_cfa: 
7B26 defw 0x6306
; [DASMZ80 ZONE] c_cfa: start 0x7B26 end 0x7B28 type pointers
7B28  c_pfa: 
7B28 defw one_cfa
7B2A defw text_cfa
7B2C defw pad_cfa
7B2E defw count_cfa
7B30 defw  hash_lag_cfa
7B32 defw rot_cfa
7B34 defw over_cfa
7B36 defw min_cfa
7B38 defw to_r_cfa
7B3A defw r_cfa
7B3C defw r_hash_cfa
7B3E defw plus_store_cfa
7B40 defw r_cfa
7B42 defw minus_cfa
7B44 defw to_r_cfa
7B46 defw dup_cfa
7B48 defw here_cfa
7B4A defw r_cfa
7B4C defw cmove_cfa
7B4E defw here_cfa
7B50 defw hash_lead_cfa
7B52 defw plus_cfa
7B54 defw from_r_cfa
7B56 defw cmove_cfa
7B58 defw from_r_cfa
7B5A defw cmove_cfa
7B5C defw update_cfa
7B5E defw zero_cfa
7B60 defw m_cfa
7B62 defw semicolon_s_cfa
; [DASMZ80 ZONE] c_pfa: start 0x7B28 end 0x7B64 type pointers

7AF9  till_nfa: 
7AF9 defb 0x04+0x80,"TIL","L"+0x80
; [DASMZ80 ZONE] till_nfa: start 0x7AF9 end 0x7AFE type bytedata
7AFE  till_lfa: 
7AFE defw x_nfa
; [DASMZ80 ZONE] till_lfa: start 0x7AFE end 0x7B00 type pointers
7B00  till_cfa: 
7B00 defw 0x6306
; [DASMZ80 ZONE] till_cfa: start 0x7B00 end 0x7B02 type pointers
7B02  till_pfa: 
7B02 defw hash_lead_cfa
7B04 defw plus_cfa
7B06 defw one_cfa
7B08 defw text_cfa
7B0A defw oneline_cfa
7B0C defw zero_equals_cfa
7B0E defw zero_cfa
7B10 defw question_error_cfa
7B12 defw hash_lead_cfa
7B14 defw plus_cfa
7B16 defw swap_cfa
7B18 defw minus_cfa
7B1A defw delete_cfa
7B1C defw zero_cfa
7B1E defw m_cfa
7B20 defw semicolon_s_cfa
; [DASMZ80 ZONE] till_pfa: start 0x7B02 end 0x7B22 type pointers

7AE1  x_nfa: 
7AE1 defb 0x01+0x80,"X"+0x80
; [DASMZ80 ZONE] x_nfa: start 0x7AE1 end 0x7AE3 type bytedata
7AE3  x_lfa: 
7AE3 defw b_nfa
; [DASMZ80 ZONE] x_lfa: start 0x7AE3 end 0x7AE5 type pointers
7AE5  x_cfa: 
7AE5 defw 0x6306
; [DASMZ80 ZONE] x_cfa: start 0x7AE5 end 0x7AE7 type pointers
7AE7  x_pfa: 
7AE7 defw one_cfa
7AE9 defw text_cfa
7AEB defw find_cfa
7AED defw pad_cfa
7AEF defw c_fetch_cfa
7AF1 defw delete_cfa
7AF3 defw zero_cfa
7AF5 defw m_cfa
7AF7 defw semicolon_s_cfa
; [DASMZ80 ZONE] x_pfa: start 0x7AE7 end 0x7AF9 type pointers

7AD1  b_nfa: 
7AD1 defb 0x01+0x80,"B"+0x80
; [DASMZ80 ZONE] b_nfa: start 0x7AD1 end 0x7AD3 type bytedata
7AD3  b_lfa: 
7AD3 defw f_nfa
; [DASMZ80 ZONE] b_lfa: start 0x7AD3 end 0x7AD5 type pointers
7AD5  b_cfa: 
7AD5 defw 0x6306
; [DASMZ80 ZONE] b_cfa: start 0x7AD5 end 0x7AD7 type pointers
7AD7  b_pfa: 
7AD7 defw pad_cfa
7AD9 defw c_fetch_cfa
7ADB defw minus_cfa
7ADD defw m_cfa
7ADF defw semicolon_s_cfa
; [DASMZ80 ZONE] b_pfa: start 0x7AD7 end 0x7AE1 type pointers

7AC3  f_nfa: 
7AC3 defb 0x01+0x80,"F"+0x80
; [DASMZ80 ZONE] f_nfa: start 0x7AC3 end 0x7AC5 type bytedata
7AC5  f_lfa: 
7AC5 defw n_nfa
; [DASMZ80 ZONE] f_lfa: start 0x7AC5 end 0x7AC7 type pointers
7AC7  f_cfa: 
7AC7 defw 0x6306
; [DASMZ80 ZONE] f_cfa: start 0x7AC7 end 0x7AC9 type pointers
7AC9  f_pfa: 
7AC9 defw one_cfa
7ACB defw text_cfa
7ACD defw n_cfa
7ACF defw semicolon_s_cfa
; [DASMZ80 ZONE] f_pfa: start 0x7AC9 end 0x7AD1 type pointers

7AB5  n_nfa: 
7AB5 defb 0x01+0x80,"N"+0x80
; [DASMZ80 ZONE] n_nfa: start 0x7AB5 end 0x7AB7 type bytedata
7AB7  n_lfa: 
7AB7 defw delete_nfa
; [DASMZ80 ZONE] n_lfa: start 0x7AB7 end 0x7AB9 type pointers
7AB9  n_cfa: 
7AB9 defw 0x6306
; [DASMZ80 ZONE] n_cfa: start 0x7AB9 end 0x7ABB type pointers
7ABB  n_pfa: 
7ABB defw find_cfa
7ABD defw zero_cfa
7ABF defw m_cfa
7AC1 defw semicolon_s_cfa
; [DASMZ80 ZONE] n_pfa: start 0x7ABB end 0x7AC3 type pointers

7A86  delete_nfa: 
7A86 defb 0x06+0x80,"DELET","E"+0x80
; [DASMZ80 ZONE] delete_nfa: start 0x7A86 end 0x7A8D type bytedata
7A8D  delete_lfa: 
7A8D defw find_nfa
; [DASMZ80 ZONE] delete_lfa: start 0x7A8D end 0x7A8F type pointers
7A8F  delete_cfa: 
7A8F defw 0x6306
; [DASMZ80 ZONE] delete_cfa: start 0x7A8F end 0x7A91 type pointers
7A91  delete_pfa: 
7A91 defw to_r_cfa
7A93 defw  hash_lag_cfa
7A95 defw plus_cfa
7A97 defw r_cfa
7A99 defw minus_cfa
7A9B defw  hash_lag_cfa
7A9D defw r_cfa
7A9F defw minus_cfa
7AA1 defw r_hash_cfa
7AA3 defw plus_store_cfa
7AA5 defw hash_lead_cfa
7AA7 defw plus_cfa
7AA9 defw swap_cfa
7AAB defw cmove_cfa
7AAD defw from_r_cfa
7AAF defw blanks_cfa
7AB1 defw update_cfa
7AB3 defw semicolon_s_cfa
; [DASMZ80 ZONE] delete_pfa: start 0x7A91 end 0x7AB5 type pointers

7A57  find_nfa: 
7A57 defb 0x04+0x80,"FIN","D"+0x80
; [DASMZ80 ZONE] find_nfa: start 0x7A57 end 0x7A5C type bytedata
7A5C  find_lfa: 
7A5C defw oneline_nfa
; [DASMZ80 ZONE] find_lfa: start 0x7A5C end 0x7A5E type pointers
7A5E  find_cfa: 
7A5E defw 0x6306
; [DASMZ80 ZONE] find_cfa: start 0x7A5E end 0x7A60 type pointers
7A60  find_pfa: 
7A60 defw lit_cfa,0x03FF
7A64 defw r_hash_cfa
7A66 defw fetch_cfa
7A68 defw less_than_cfa
7A6A defw zero_branch_cfa,0x0012; to 0x7A7E
7A6E defw top_cfa
7A70 defw pad_cfa
7A72 defw here_cfa
7A74 defw c_slash_l_cfa
7A76 defw one_plus_cfa
7A78 defw cmove_cfa
7A7A defw zero_cfa
7A7C defw error_cfa
7A7E defw oneline_cfa
7A80 defw zero_branch_cfa,0xFFDE; to 0x7A60
7A84 defw semicolon_s_cfa
; [DASMZ80 ZONE] find_pfa: start 0x7A60 end 0x7A86 type pointers

7A3F  oneline_nfa: 
7A3F defb 0x05+0x80,"1LIN","E"+0x80
; [DASMZ80 ZONE] oneline_nfa: start 0x7A3F end 0x7A45 type bytedata
7A45  oneline_lfa: 
7A45 defw match_nfa
; [DASMZ80 ZONE] oneline_lfa: start 0x7A45 end 0x7A47 type pointers
7A47  oneline_cfa: 
7A47 defw 0x6306
; [DASMZ80 ZONE] oneline_cfa: start 0x7A47 end 0x7A49 type pointers
7A49  oneline_pfa: 
7A49 defw  hash_lag_cfa
7A4B defw pad_cfa
7A4D defw count_cfa
7A4F defw match_cfa
7A51 defw r_hash_cfa
7A53 defw plus_store_cfa
7A55 defw semicolon_s_cfa
; [DASMZ80 ZONE] oneline_pfa: start 0x7A49 end 0x7A57 type pointers

79F1  match_nfa: 
79F1 defb 0x05+0x80,"MATC","H"+0x80
; [DASMZ80 ZONE] match_nfa: start 0x79F1 end 0x79F7 type bytedata
79F7  match_lfa: 
79F7 defw  minus_text_nfa
; [DASMZ80 ZONE] match_lfa: start 0x79F7 end 0x79F9 type pointers
79F9  match_cfa: 
79F9 defw 0x6306
; [DASMZ80 ZONE] match_cfa: start 0x79F9 end 0x79FB type pointers
79FB  match_pfa: 
79FB defw to_r_cfa
79FD defw to_r_cfa
79FF defw two_dup_cfa
7A01 defw from_r_cfa
7A03 defw from_r_cfa
7A05 defw two_swap_cfa
7A07 defw over_cfa
7A09 defw plus_cfa
7A0B defw swap_cfa
7A0D defw paren_do_cfa
7A0F defw two_dup_cfa
7A11 defw i_cfa
7A13 defw  minus_text_cfa
7A15 defw zero_branch_cfa,0x001A; to 0x7A31
7A19 defw to_r_cfa
7A1B defw two_drop_cfa
7A1D defw from_r_cfa
7A1F defw minus_cfa
7A21 defw i_cfa
7A23 defw swap_cfa
7A25 defw minus_cfa
7A27 defw zero_cfa
7A29 defw swap_cfa
7A2B defw zero_cfa
7A2D defw zero_cfa
7A2F defw leave_cfa
7A31 defw paren_loop_cfa,0xFFDC; to 0x7A0F
7A35 defw two_drop_cfa
7A37 defw swap_cfa
7A39 defw zero_equals_cfa
7A3B defw swap_cfa
7A3D defw semicolon_s_cfa
; [DASMZ80 ZONE] match_pfa: start 0x79FB end 0x7A3F type pointers

79B1   minus_text_nfa: 
79B1 defb 0x05+0x80,"-TEX","T"+0x80
; [DASMZ80 ZONE]  minus_text_nfa: start 0x79B1 end 0x79B7 type bytedata
79B7   minus_text_lfa: 
79B7 defw copy_nfa
; [DASMZ80 ZONE]  minus_text_lfa: start 0x79B7 end 0x79B9 type pointers
79B9   minus_text_cfa: 
79B9 defw 0x6306
; [DASMZ80 ZONE]  minus_text_cfa: start 0x79B9 end 0x79BB type pointers
79BB   minus_text_pfa: 
79BB defw swap_cfa
79BD defw minus_dup_cfa
79BF defw zero_branch_cfa,0x002A; to 0x79EB
79C3 defw over_cfa
79C5 defw plus_cfa
79C7 defw swap_cfa
79C9 defw paren_do_cfa
79CB defw dup_cfa
79CD defw c_fetch_cfa
79CF defw i_cfa
79D1 defw c_fetch_cfa
79D3 defw minus_cfa
79D5 defw zero_branch_cfa,0x000A; to 0x79E1
79D9 defw zero_equals_cfa
79DB defw leave_cfa
79DD defw branch_cfa,0x0004; to 0x79E3
79E1 defw one_plus_cfa
79E3 defw paren_loop_cfa,0xFFE6; to 0x79CB
79E7 defw branch_cfa,0x0006; to 0x79EF
79EB defw drop_cfa
79ED defw zero_equals_cfa
79EF defw semicolon_s_cfa
; [DASMZ80 ZONE]  minus_text_pfa: start 0x79BB end 0x79F1 type pointers

7974  copy_nfa: 
7974 defb 0x04+0x80,"COP","Y"+0x80
; [DASMZ80 ZONE] copy_nfa: start 0x7974 end 0x7979 type bytedata
7979  copy_lfa: 
7979 defw clear_nfa
; [DASMZ80 ZONE] copy_lfa: start 0x7979 end 0x797B type pointers
797B  copy_cfa: 
797B defw 0x6306
; [DASMZ80 ZONE] copy_cfa: start 0x797B end 0x797D type pointers
797D  copy_pfa: 
797D defw b_slash_scr_cfa
797F defw star_cfa
7981 defw offset_cfa
7983 defw fetch_cfa
7985 defw plus_cfa
7987 defw swap_cfa
7989 defw b_slash_scr_cfa
798B defw star_cfa
798D defw b_slash_scr_cfa
798F defw over_cfa
7991 defw plus_cfa
7993 defw swap_cfa
7995 defw paren_do_cfa
7997 defw dup_cfa
7999 defw i_cfa
799B defw block_cfa
799D defw two_cfa
799F defw minus_cfa
79A1 defw store_cfa
79A3 defw one_plus_cfa
79A5 defw update_cfa
79A7 defw paren_loop_cfa,0xFFEE; to 0x7997
79AB defw drop_cfa
79AD defw flush_cfa
79AF defw semicolon_s_cfa
; [DASMZ80 ZONE] copy_pfa: start 0x797D end 0x79B1 type pointers

7954  clear_nfa: 
7954 defb 0x05+0x80,"CLEA","R"+0x80
; [DASMZ80 ZONE] clear_nfa: start 0x7954 end 0x795A type bytedata
795A  clear_lfa: 
795A defw top_nfa
; [DASMZ80 ZONE] clear_lfa: start 0x795A end 0x795C type pointers
795C  clear_cfa: 
795C defw 0x6306
; [DASMZ80 ZONE] clear_cfa: start 0x795C end 0x795E type pointers
795E  clear_pfa: 
795E defw scr_cfa
7960 defw store_cfa
7962 defw lit_cfa,0x0010
7966 defw zero_cfa
7968 defw paren_do_cfa
796A defw i_cfa
796C defw e_cfa
796E defw paren_loop_cfa,0xFFFA; to 0x796A
7972 defw semicolon_s_cfa
; [DASMZ80 ZONE] clear_pfa: start 0x795E end 0x7974 type pointers

7944  top_nfa: 
7944 defb 0x03+0x80,"TO","P"+0x80
; [DASMZ80 ZONE] top_nfa: start 0x7944 end 0x7948 type bytedata
7948  top_lfa: 
7948 defw i_nfa
; [DASMZ80 ZONE] top_lfa: start 0x7948 end 0x794A type pointers
794A  top_cfa: 
794A defw 0x6306
; [DASMZ80 ZONE] top_cfa: start 0x794A end 0x794C type pointers
794C  top_pfa: 
794C defw zero_cfa
794E defw r_hash_cfa
7950 defw store_cfa
7952 defw semicolon_s_cfa
; [DASMZ80 ZONE] top_pfa: start 0x794C end 0x7954 type pointers

7936  i_nfa: 
7936 defb 0x01+0x80,"I"+0x80
; [DASMZ80 ZONE] i_nfa: start 0x7936 end 0x7938 type bytedata
7938  i_lfa: 
7938 defw p_nfa
; [DASMZ80 ZONE] i_lfa: start 0x7938 end 0x793A type pointers
793A  i_cfa: 
793A defw 0x6306
; [DASMZ80 ZONE] i_cfa: start 0x793A end 0x793C type pointers
793C  i_pfa: 
793C defw dup_cfa
793E defw s_cfa
7940 defw r_cfa
7942 defw semicolon_s_cfa
; [DASMZ80 ZONE] i_pfa: start 0x793C end 0x7944 type pointers

7928  p_nfa: 
7928 defb 0x01+0x80,"P"+0x80
; [DASMZ80 ZONE] p_nfa: start 0x7928 end 0x792A type bytedata
792A  p_lfa: 
792A defw r_nfa
; [DASMZ80 ZONE] p_lfa: start 0x792A end 0x792C type pointers
792C  p_cfa: 
792C defw 0x6306
; [DASMZ80 ZONE] p_cfa: start 0x792C end 0x792E type pointers
792E  p_pfa: 
792E defw one_cfa
7930 defw text_cfa
7932 defw r_cfa
7934 defw semicolon_s_cfa
; [DASMZ80 ZONE] p_pfa: start 0x792E end 0x7936 type pointers

7918  r_nfa: 
7918 defb 0x01+0x80,"R"+0x80
; [DASMZ80 ZONE] r_nfa: start 0x7918 end 0x791A type bytedata
791A  r_lfa: 
791A defw l_nfa
; [DASMZ80 ZONE] r_lfa: start 0x791A end 0x791C type pointers
791C  r_cfa: 
791C defw 0x6306
; [DASMZ80 ZONE] r_cfa: start 0x791C end 0x791E type pointers
791E  r_pfa: 
791E defw pad_cfa
7920 defw one_plus_cfa
7922 defw swap_cfa
7924 defw  minus_move_cfa
7926 defw semicolon_s_cfa
; [DASMZ80 ZONE] r_pfa: start 0x791E end 0x7928 type pointers

7906  l_nfa: 
7906 defb 0x01+0x80,"L"+0x80
; [DASMZ80 ZONE] l_nfa: start 0x7906 end 0x7908 type bytedata
7908  l_lfa: 
7908 defw t_nfa
; [DASMZ80 ZONE] l_lfa: start 0x7908 end 0x790A type pointers
790A  l_cfa: 
790A defw 0x6306
; [DASMZ80 ZONE] l_cfa: start 0x790A end 0x790C type pointers
790C  l_pfa: 
790C defw scr_cfa
790E defw fetch_cfa
7910 defw list_cfa
7912 defw zero_cfa
7914 defw m_cfa
7916 defw semicolon_s_cfa
; [DASMZ80 ZONE] l_pfa: start 0x790C end 0x7918 type pointers

78EC  t_nfa: 
78EC defb 0x01+0x80,"T"+0x80
; [DASMZ80 ZONE] t_nfa: start 0x78EC end 0x78EE type bytedata
78EE  t_lfa: 
78EE defw m_nfa
; [DASMZ80 ZONE] t_lfa: start 0x78EE end 0x78F0 type pointers
78F0  t_cfa: 
78F0 defw 0x6306
; [DASMZ80 ZONE] t_cfa: start 0x78F0 end 0x78F2 type pointers
78F2  t_pfa: 
78F2 defw dup_cfa
78F4 defw c_slash_l_cfa
78F6 defw star_cfa
78F8 defw r_hash_cfa
78FA defw store_cfa
78FC defw dup_cfa
78FE defw h_cfa
7900 defw zero_cfa
7902 defw m_cfa
7904 defw semicolon_s_cfa
; [DASMZ80 ZONE] t_pfa: start 0x78F2 end 0x7906 type pointers

78C8  m_nfa: 
78C8 defb 0x01+0x80,"M"+0x80
; [DASMZ80 ZONE] m_nfa: start 0x78C8 end 0x78CA type bytedata
78CA  m_lfa: 
78CA defw d_nfa
; [DASMZ80 ZONE] m_lfa: start 0x78CA end 0x78CC type pointers
78CC  m_cfa: 
78CC defw 0x6306
; [DASMZ80 ZONE] m_cfa: start 0x78CC end 0x78CE type pointers
78CE  m_pfa: 
78CE defw r_hash_cfa
78D0 defw plus_store_cfa
78D2 defw cr_cfa
78D4 defw space_cfa
78D6 defw hash_lead_cfa
78D8 defw type_cfa
78DA defw lit_cfa,0x005F
78DE defw emit_cfa
78E0 defw  hash_lag_cfa
78E2 defw type_cfa
78E4 defw hash_locate_cfa
78E6 defw dot_cfa
78E8 defw drop_cfa
78EA defw semicolon_s_cfa
; [DASMZ80 ZONE] m_pfa: start 0x78CE end 0x78EC type pointers

78A2  d_nfa: 
78A2 defb 0x01+0x80,"D"+0x80
; [DASMZ80 ZONE] d_nfa: start 0x78A2 end 0x78A4 type bytedata
78A4  d_lfa: 
78A4 defw s_nfa
; [DASMZ80 ZONE] d_lfa: start 0x78A4 end 0x78A6 type pointers
78A6  d_cfa: 
78A6 defw 0x6306
; [DASMZ80 ZONE] d_cfa: start 0x78A6 end 0x78A8 type pointers
78A8  d_pfa: 
78A8 defw dup_cfa
78AA defw h_cfa
78AC defw lit_cfa,0x000F
78B0 defw dup_cfa
78B2 defw rot_cfa
78B4 defw paren_do_cfa
78B6 defw i_cfa
78B8 defw one_plus_cfa
78BA defw line_cfa
78BC defw i_cfa
78BE defw  minus_move_cfa
78C0 defw paren_loop_cfa,0xFFF4; to 0x78B6
78C4 defw e_cfa
78C6 defw semicolon_s_cfa
; [DASMZ80 ZONE] d_pfa: start 0x78A8 end 0x78C8 type pointers

787A  s_nfa: 
787A defb 0x01+0x80,"S"+0x80
; [DASMZ80 ZONE] s_nfa: start 0x787A end 0x787C type bytedata
787C  s_lfa: 
787C defw e_nfa
; [DASMZ80 ZONE] s_lfa: start 0x787C end 0x787E type pointers
787E  s_cfa: 
787E defw 0x6306
; [DASMZ80 ZONE] s_cfa: start 0x787E end 0x7880 type pointers
7880  s_pfa: 
7880 defw dup_cfa
7882 defw one_cfa
7884 defw minus_cfa
7886 defw lit_cfa,0x000E
788A defw paren_do_cfa
788C defw i_cfa
788E defw line_cfa
7890 defw i_cfa
7892 defw one_plus_cfa
7894 defw  minus_move_cfa
7896 defw lit_cfa,0xFFFF
789A defw paren_plus_loop_cfa,0xFFF0; to 0x788C
789E defw e_cfa
78A0 defw semicolon_s_cfa
; [DASMZ80 ZONE] s_pfa: start 0x7880 end 0x78A2 type pointers

786A  e_nfa: 
786A defb 0x01+0x80,"E"+0x80
; [DASMZ80 ZONE] e_nfa: start 0x786A end 0x786C type bytedata
786C  e_lfa: 
786C defw h_nfa
; [DASMZ80 ZONE] e_lfa: start 0x786C end 0x786E type pointers
786E  e_cfa: 
786E defw 0x6306
; [DASMZ80 ZONE] e_cfa: start 0x786E end 0x7870 type pointers
7870  e_pfa: 
7870 defw line_cfa
7872 defw c_slash_l_cfa
7874 defw blanks_cfa
7876 defw update_cfa
7878 defw semicolon_s_cfa
; [DASMZ80 ZONE] e_pfa: start 0x7870 end 0x787A type pointers

7852  h_nfa: 
7852 defb 0x01+0x80,"H"+0x80
; [DASMZ80 ZONE] h_nfa: start 0x7852 end 0x7854 type bytedata
7854  h_lfa: 
7854 defw  minus_move_nfa
; [DASMZ80 ZONE] h_lfa: start 0x7854 end 0x7856 type pointers
7856  h_cfa: 
7856 defw 0x6306
; [DASMZ80 ZONE] h_cfa: start 0x7856 end 0x7858 type pointers
7858  h_pfa: 
7858 defw line_cfa
785A defw pad_cfa
785C defw one_plus_cfa
785E defw c_slash_l_cfa
7860 defw dup_cfa
7862 defw pad_cfa
7864 defw c_store_cfa
7866 defw cmove_cfa
7868 defw semicolon_s_cfa
; [DASMZ80 ZONE] h_pfa: start 0x7858 end 0x786A type pointers

783E   minus_move_nfa: 
783E defb 0x05+0x80,"-MOV","E"+0x80
; [DASMZ80 ZONE]  minus_move_nfa: start 0x783E end 0x7844 type bytedata
7844   minus_move_lfa: 
7844 defw  hash_lag_nfa
; [DASMZ80 ZONE]  minus_move_lfa: start 0x7844 end 0x7846 type pointers
7846   minus_move_cfa: 
7846 defw 0x6306
; [DASMZ80 ZONE]  minus_move_cfa: start 0x7846 end 0x7848 type pointers
7848   minus_move_pfa: 
7848 defw line_cfa
784A defw c_slash_l_cfa
784C defw cmove_cfa
784E defw update_cfa
7850 defw semicolon_s_cfa
; [DASMZ80 ZONE]  minus_move_pfa: start 0x7848 end 0x7852 type pointers

7825   hash_lag_nfa: 
7825 defb 0x04+0x80,"#LA","G"+0x80
; [DASMZ80 ZONE]  hash_lag_nfa: start 0x7825 end 0x782A type bytedata
782A   hash_lag_lfa: 
782A defw hash_lead_nfa
; [DASMZ80 ZONE]  hash_lag_lfa: start 0x782A end 0x782C type pointers
782C   hash_lag_cfa: 
782C defw 0x6306
; [DASMZ80 ZONE]  hash_lag_cfa: start 0x782C end 0x782E type pointers
782E   hash_lag_pfa: 
782E defw hash_lead_cfa
7830 defw dup_cfa
7832 defw to_r_cfa
7834 defw plus_cfa
7836 defw c_slash_l_cfa
7838 defw from_r_cfa
783A defw minus_cfa
783C defw semicolon_s_cfa
; [DASMZ80 ZONE]  hash_lag_pfa: start 0x782E end 0x783E type pointers

7813  hash_lead_nfa: 
7813 defb 0x05+0x80,"#LEA","D"+0x80
; [DASMZ80 ZONE] hash_lead_nfa: start 0x7813 end 0x7819 type bytedata
7819  hash_lead_lfa: 
7819 defw hash_locate_nfa
; [DASMZ80 ZONE] hash_lead_lfa: start 0x7819 end 0x781B type pointers
781B  hash_lead_cfa: 
781B defw 0x6306
; [DASMZ80 ZONE] hash_lead_cfa: start 0x781B end 0x781D type pointers
781D  hash_lead_pfa: 
781D defw hash_locate_cfa
781F defw line_cfa
7821 defw swap_cfa
7823 defw semicolon_s_cfa
; [DASMZ80 ZONE] hash_lead_pfa: start 0x781D end 0x7825 type pointers

77FD  hash_locate_nfa: 
77FD defb 0x07+0x80,"#LOCAT","E"+0x80
; [DASMZ80 ZONE] hash_locate_nfa: start 0x77FD end 0x7805 type bytedata
7805  hash_locate_lfa: 
7805 defw  _nfa
; [DASMZ80 ZONE] hash_locate_lfa: start 0x7805 end 0x7807 type pointers
7807  hash_locate_cfa: 
7807 defw 0x6306
; [DASMZ80 ZONE] hash_locate_cfa: start 0x7807 end 0x7809 type pointers
7809  hash_locate_pfa: 
7809 defw r_hash_cfa
780B defw fetch_cfa
780D defw c_slash_l_cfa
780F defw slash_mod_cfa
7811 defw semicolon_s_cfa
; [DASMZ80 ZONE] hash_locate_pfa: start 0x7809 end 0x7813 type pointers

6CF6   _nfa: 
6CF6 defb 0x01+0x80," "+0x80
; [DASMZ80 ZONE]  _nfa: start 0x6CF6 end 0x6CF8 type bytedata
6CF8   _lfa: 
6CF8 defw DIS-ALL_nfa
; [DASMZ80 ZONE]  _lfa: start 0x6CF8 end 0x6CFA type pointers
6CFA   _cfa: 
6CFA defw 0x0000
; [DASMZ80 ZONE]  _cfa: start 0x6CFA end 0x6CFC type pointers
6CFC   _pfa: ; Word type not implemented.

9DE5  DIS-ALL_nfa: 
9DE5 defb 0x07+0x80,"DIS-AL","L"+0x80
; [DASMZ80 ZONE] DIS-ALL_nfa: start 0x9DE5 end 0x9DED type bytedata
9DED  DIS-ALL_lfa: 
9DED defw DIS-FROM_nfa
; [DASMZ80 ZONE] DIS-ALL_lfa: start 0x9DED end 0x9DEF type pointers
9DEF  DIS-ALL_cfa: 
9DEF defw 0x6306
; [DASMZ80 ZONE] DIS-ALL_cfa: start 0x9DEF end 0x9DF1 type pointers
9DF1  DIS-ALL_pfa: 
9DF1 defw context_cfa
9DF3 defw fetch_cfa
9DF5 defw fetch_cfa
9DF7 defw DIS-FROM_cfa
9DF9 defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-ALL_pfa: start 0x9DF1 end 0x9DFB type pointers

9DBE  DIS-FROM_nfa: 
9DBE defb 0x08+0x80,"DIS-FRO","M"+0x80
; [DASMZ80 ZONE] DIS-FROM_nfa: start 0x9DBE end 0x9DC7 type bytedata
9DC7  DIS-FROM_lfa: 
9DC7 defw DIS_nfa
; [DASMZ80 ZONE] DIS-FROM_lfa: start 0x9DC7 end 0x9DC9 type pointers
9DC9  DIS-FROM_cfa: 
9DC9 defw 0x6306
; [DASMZ80 ZONE] DIS-FROM_cfa: start 0x9DC9 end 0x9DCB type pointers
9DCB  DIS-FROM_pfa: 
9DCB defw pfa_cfa
9DCD defw dup_cfa
9DCF defw DIS_cfa
9DD1 defw lfa_cfa
9DD3 defw fetch_cfa
9DD5 defw dup_cfa
9DD7 defw zero_equals_cfa
9DD9 defw question_terminal_cfa
9DDB defw or_cfa
9DDD defw zero_branch_cfa,0xFFEC; to 0x9DCB
9DE1 defw drop_cfa
9DE3 defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-FROM_pfa: start 0x9DCB end 0x9DE5 type pointers

9D3B  DIS_nfa: 
9D3B defb 0x03+0x80,"DI","S"+0x80
; [DASMZ80 ZONE] DIS_nfa: start 0x9D3B end 0x9D3F type bytedata
9D3F  DIS_lfa: 
9D3F defw HEADER_nfa
; [DASMZ80 ZONE] DIS_lfa: start 0x9D3F end 0x9D41 type pointers
9D41  DIS_cfa: 
9D41 defw 0x6306
; [DASMZ80 ZONE] DIS_cfa: start 0x9D41 end 0x9D43 type pointers
9D43  DIS_pfa: 
9D43 defw dup_cfa
9D45 defw HEADER_cfa
9D47 defw dup_cfa
9D49 defw COLON?_cfa
9D4B defw zero_branch_cfa,0x0006; to 0x9D53
9D4F defw DIS-COLON_cfa
9D51 defw exit_cfa
9D53 defw dup_cfa
9D55 defw CODE?_cfa
9D57 defw zero_branch_cfa,0x0006; to 0x9D5F
9D5B defw DIS-CODE_cfa
9D5D defw exit_cfa
9D5F defw dup_cfa
9D61 defw CONSTANT?_cfa
9D63 defw zero_branch_cfa,0x0006; to 0x9D6B
9D67 defw DIS-VALUE_cfa
9D69 defw exit_cfa
9D6B defw dup_cfa
9D6D defw VARIABLE?_cfa
9D6F defw zero_branch_cfa,0x0006; to 0x9D77
9D73 defw DIS-VALUE_cfa
9D75 defw exit_cfa
9D77 defw dup_cfa
9D79 defw 2CONSTANT?_cfa
9D7B defw zero_branch_cfa,0x0006; to 0x9D83
9D7F defw DIS-2VALUE_cfa
9D81 defw exit_cfa
9D83 defw dup_cfa
9D85 defw 2VARIABLE?_cfa
9D87 defw zero_branch_cfa,0x0006; to 0x9D8F
9D8B defw DIS-2VALUE_cfa
9D8D defw exit_cfa
9D8F defw dup_cfa
9D91 defw USER?_cfa
9D93 defw zero_branch_cfa,0x0006; to 0x9D9B
9D97 defw DIS-VALUE_cfa
9D99 defw exit_cfa
9D9B defw drop_cfa
9D9D defw paren_dot_quote_cfa
9D9F defb 0x1C,"; Word type not implemented."
9DBC defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS_pfa: start 0x9D43 end 0x9DBE type pointers

9D1E  HEADER_nfa: 
9D1E defb 0x06+0x80,"HEADE","R"+0x80
; [DASMZ80 ZONE] HEADER_nfa: start 0x9D1E end 0x9D25 type bytedata
9D25  HEADER_lfa: 
9D25 defw PARAMETER-FIELD_nfa
; [DASMZ80 ZONE] HEADER_lfa: start 0x9D25 end 0x9D27 type pointers
9D27  HEADER_cfa: 
9D27 defw 0x6306
; [DASMZ80 ZONE] HEADER_cfa: start 0x9D27 end 0x9D29 type pointers
9D29  HEADER_pfa: 
9D29 defw cr_cfa
9D2B defw dup_cfa
9D2D defw NAME-FIELD_cfa
9D2F defw dup_cfa
9D31 defw LINK-FIELD_cfa
9D33 defw dup_cfa
9D35 defw CODE-FIELD_cfa
9D37 defw PARAMETER-FIELD_cfa
9D39 defw semicolon_s_cfa
; [DASMZ80 ZONE] HEADER_pfa: start 0x9D29 end 0x9D3B type pointers

9CF8  PARAMETER-FIELD_nfa: 
9CF8 defb 0x0F+0x80,"PARAMETER-FIEL","D"+0x80
; [DASMZ80 ZONE] PARAMETER-FIELD_nfa: start 0x9CF8 end 0x9D08 type bytedata
9D08  PARAMETER-FIELD_lfa: 
9D08 defw CODE-FIELD_nfa
; [DASMZ80 ZONE] PARAMETER-FIELD_lfa: start 0x9D08 end 0x9D0A type pointers
9D0A  PARAMETER-FIELD_cfa: 
9D0A defw 0x6306
; [DASMZ80 ZONE] PARAMETER-FIELD_cfa: start 0x9D0A end 0x9D0C type pointers
9D0C  PARAMETER-FIELD_pfa: 
9D0C defw dup_cfa
9D0E defw ZONE-START_cfa
9D10 defw store_cfa
9D12 defw dup_cfa
9D14 defw ADDRESS_cfa
9D16 defw space_cfa
9D18 defw PFA-LABEL_cfa
9D1A defw DEF_cfa
9D1C defw semicolon_s_cfa
; [DASMZ80 ZONE] PARAMETER-FIELD_pfa: start 0x9D0C end 0x9D1E type pointers

9CB7  CODE-FIELD_nfa: 
9CB7 defb 0x0A+0x80,"CODE-FIEL","D"+0x80
; [DASMZ80 ZONE] CODE-FIELD_nfa: start 0x9CB7 end 0x9CC2 type bytedata
9CC2  CODE-FIELD_lfa: 
9CC2 defw (CODE-FIELD)_nfa
; [DASMZ80 ZONE] CODE-FIELD_lfa: start 0x9CC2 end 0x9CC4 type pointers
9CC4  CODE-FIELD_cfa: 
9CC4 defw 0x6306
; [DASMZ80 ZONE] CODE-FIELD_cfa: start 0x9CC4 end 0x9CC6 type pointers
9CC6  CODE-FIELD_pfa: 
9CC6 defw dup_cfa
9CC8 defw cfa_cfa
9CCA defw dup_cfa
9CCC defw ZONE-START_cfa
9CCE defw store_cfa
9CD0 defw dup_cfa
9CD2 defw ADDRESS_cfa
9CD4 defw space_cfa
9CD6 defw CFA-LABEL_cfa
9CD8 defw DEF_cfa
9CDA defw dup_cfa
9CDC defw cfa_cfa
9CDE defw ADDRESS_cfa
9CE0 defw DEFW_cfa
9CE2 defw dup_cfa
9CE4 defw (CODE-FIELD)_cfa
9CE6 defw cfa_cfa
9CE8 defw CFA-LABEL$_cfa
9CEA defw ZONE-START_cfa
9CEC defw fetch_cfa
9CEE defw two_plus_cfa
9CF0 defw ZONE-END_cfa
9CF2 defw store_cfa
9CF4 defw POINTERS-ZONE_cfa
9CF6 defw semicolon_s_cfa
; [DASMZ80 ZONE] CODE-FIELD_pfa: start 0x9CC6 end 0x9CF8 type pointers

9C8A  (CODE-FIELD)_nfa: 
9C8A defb 0x0C+0x80,"(CODE-FIELD",")"+0x80
; [DASMZ80 ZONE] (CODE-FIELD)_nfa: start 0x9C8A end 0x9C97 type bytedata
9C97  (CODE-FIELD)_lfa: 
9C97 defw LINK-FIELD_nfa
; [DASMZ80 ZONE] (CODE-FIELD)_lfa: start 0x9C97 end 0x9C99 type pointers
9C99  (CODE-FIELD)_cfa: 
9C99 defw 0x6306
; [DASMZ80 ZONE] (CODE-FIELD)_cfa: start 0x9C99 end 0x9C9B type pointers
9C9B  (CODE-FIELD)_pfa: 
9C9B defw dup_cfa
9C9D defw cfa_cfa
9C9F defw fetch_cfa
9CA1 defw two_dup_cfa
9CA3 defw equals_cfa
9CA5 defw zero_branch_cfa,0x000A; to 0x9CB1
9CA9 defw drop_cfa
9CAB defw PFA-LABEL_cfa
9CAD defw branch_cfa,0x0006; to 0x9CB5
9CB1 defw NHEX._cfa
9CB3 defw drop_cfa
9CB5 defw semicolon_s_cfa
; [DASMZ80 ZONE] (CODE-FIELD)_pfa: start 0x9C9B end 0x9CB7 type pointers

9C3D  LINK-FIELD_nfa: 
9C3D defb 0x0A+0x80,"LINK-FIEL","D"+0x80
; [DASMZ80 ZONE] LINK-FIELD_nfa: start 0x9C3D end 0x9C48 type bytedata
9C48  LINK-FIELD_lfa: 
9C48 defw NAME-FIELD_nfa
; [DASMZ80 ZONE] LINK-FIELD_lfa: start 0x9C48 end 0x9C4A type pointers
9C4A  LINK-FIELD_cfa: 
9C4A defw 0x6306
; [DASMZ80 ZONE] LINK-FIELD_cfa: start 0x9C4A end 0x9C4C type pointers
9C4C  LINK-FIELD_pfa: 
9C4C defw dup_cfa
9C4E defw dup_cfa
9C50 defw dup_cfa
9C52 defw lfa_cfa
9C54 defw dup_cfa
9C56 defw ZONE-START_cfa
9C58 defw store_cfa
9C5A defw ADDRESS_cfa
9C5C defw space_cfa
9C5E defw LFA-LABEL_cfa
9C60 defw DEF_cfa
9C62 defw lfa_cfa
9C64 defw dup_cfa
9C66 defw ADDRESS_cfa
9C68 defw DEFW_cfa
9C6A defw fetch_cfa
9C6C defw dup_cfa
9C6E defw zero_branch_cfa,0x0008; to 0x9C78
9C72 defw NFA-LABEL_cfa
9C74 defw branch_cfa,0x0004; to 0x9C7A
9C78 defw u_dot_cfa
9C7A defw ZONE-START_cfa
9C7C defw fetch_cfa
9C7E defw two_plus_cfa
9C80 defw ZONE-END_cfa
9C82 defw store_cfa
9C84 defw LFA-LABEL$_cfa
9C86 defw POINTERS-ZONE_cfa
9C88 defw semicolon_s_cfa
; [DASMZ80 ZONE] LINK-FIELD_pfa: start 0x9C4C end 0x9C8A type pointers

9BE2  NAME-FIELD_nfa: 
9BE2 defb 0x0A+0x80,"NAME-FIEL","D"+0x80
; [DASMZ80 ZONE] NAME-FIELD_nfa: start 0x9BE2 end 0x9BED type bytedata
9BED  NAME-FIELD_lfa: 
9BED defw COUNT-BYTE_nfa
; [DASMZ80 ZONE] NAME-FIELD_lfa: start 0x9BED end 0x9BEF type pointers
9BEF  NAME-FIELD_cfa: 
9BEF defw 0x6306
; [DASMZ80 ZONE] NAME-FIELD_cfa: start 0x9BEF end 0x9BF1 type pointers
9BF1  NAME-FIELD_pfa: 
9BF1 defw nfa_cfa
9BF3 defw dup_cfa
9BF5 defw dup_cfa
9BF7 defw ZONE-START_cfa
9BF9 defw store_cfa
9BFB defw CURRENT-NFA_cfa
9BFD defw fetch_cfa
9BFF defw PREVIOUS-NFA_cfa
9C01 defw store_cfa
9C03 defw dup_cfa
9C05 defw CURRENT-NFA_cfa
9C07 defw store_cfa
9C09 defw dup_cfa
9C0B defw ADDRESS_cfa
9C0D defw dup_cfa
9C0F defw space_cfa
9C11 defw NFA-LABEL_cfa
9C13 defw DEF_cfa
9C15 defw dup_cfa
9C17 defw ADDRESS_cfa
9C19 defw DEFB_cfa
9C1B defw dup_cfa
9C1D defw c_fetch_cfa
9C1F defw COUNT-BYTE_cfa
9C21 defw dup_cfa
9C23 defw c_fetch_cfa
9C25 defw LEN-ONLY_cfa
9C27 defw paren_dot_quote_cfa
9C29 defb 0x01,","
9C2B defw two_dup_cfa
9C2D defw plus_cfa
9C2F defw one_plus_cfa
9C31 defw ZONE-END_cfa
9C33 defw store_cfa
9C35 defw NAME_cfa
9C37 defw NFA-LABEL$_cfa
9C39 defw BYTEDATA-ZONE_cfa
9C3B defw semicolon_s_cfa
; [DASMZ80 ZONE] NAME-FIELD_pfa: start 0x9BF1 end 0x9C3D type pointers

9BB1  COUNT-BYTE_nfa: 
9BB1 defb 0x0A+0x80,"COUNT-BYT","E"+0x80
; [DASMZ80 ZONE] COUNT-BYTE_nfa: start 0x9BB1 end 0x9BBC type bytedata
9BBC  COUNT-BYTE_lfa: 
9BBC defw LEN-ONLY_nfa
; [DASMZ80 ZONE] COUNT-BYTE_lfa: start 0x9BBC end 0x9BBE type pointers
9BBE  COUNT-BYTE_cfa: 
9BBE defw 0x6306
; [DASMZ80 ZONE] COUNT-BYTE_cfa: start 0x9BBE end 0x9BC0 type pointers
9BC0  COUNT-BYTE_pfa: 
9BC0 defw dup_cfa
9BC2 defw LEN-ONLY_cfa
9BC4 defw BHEX._cfa
9BC6 defw paren_dot_quote_cfa
9BC8 defb 0x05,"+0x80"
9BCE defw lit_cfa,0x0040
9BD2 defw and_cfa
9BD4 defw zero_branch_cfa,0x000A; to 0x9BE0
9BD8 defw paren_dot_quote_cfa
9BDA defb 0x05,"+0x40"
9BE0 defw semicolon_s_cfa
; [DASMZ80 ZONE] COUNT-BYTE_pfa: start 0x9BC0 end 0x9BE2 type pointers

9B9C  LEN-ONLY_nfa: 
9B9C defb 0x08+0x80,"LEN-ONL","Y"+0x80
; [DASMZ80 ZONE] LEN-ONLY_nfa: start 0x9B9C end 0x9BA5 type bytedata
9BA5  LEN-ONLY_lfa: 
9BA5 defw NAME_nfa
; [DASMZ80 ZONE] LEN-ONLY_lfa: start 0x9BA5 end 0x9BA7 type pointers
9BA7  LEN-ONLY_cfa: 
9BA7 defw 0x6306
; [DASMZ80 ZONE] LEN-ONLY_cfa: start 0x9BA7 end 0x9BA9 type pointers
9BA9  LEN-ONLY_pfa: 
9BA9 defw lit_cfa,0x003F
9BAD defw and_cfa
9BAF defw semicolon_s_cfa
; [DASMZ80 ZONE] LEN-ONLY_pfa: start 0x9BA9 end 0x9BB1 type pointers

9B65  NAME_nfa: 
9B65 defb 0x04+0x80,"NAM","E"+0x80
; [DASMZ80 ZONE] NAME_nfa: start 0x9B65 end 0x9B6A type bytedata
9B6A  NAME_lfa: 
9B6A defw (NAME)_nfa
; [DASMZ80 ZONE] NAME_lfa: start 0x9B6A end 0x9B6C type pointers
9B6C  NAME_cfa: 
9B6C defw 0x6306
; [DASMZ80 ZONE] NAME_cfa: start 0x9B6C end 0x9B6E type pointers
9B6E  NAME_pfa: 
9B6E defw dup_cfa
9B70 defw one_cfa
9B72 defw greater_than_cfa
9B74 defw zero_branch_cfa,0x0004; to 0x9B7A
9B78 defw (NAME)_cfa
9B7A defw lit_cfa,0x0022
9B7E defw emit_cfa
9B80 defw plus_cfa
9B82 defw c_fetch_cfa
9B84 defw lit_cfa,0x007F
9B88 defw and_cfa
9B8A defw emit_cfa
9B8C defw lit_cfa,0x0022
9B90 defw emit_cfa
9B92 defw paren_dot_quote_cfa
9B94 defb 0x05,"+0x80"
9B9A defw semicolon_s_cfa
; [DASMZ80 ZONE] NAME_pfa: start 0x9B6E end 0x9B9C type pointers

9B3E  (NAME)_nfa: 
9B3E defb 0x06+0x80,"(NAME",")"+0x80
; [DASMZ80 ZONE] (NAME)_nfa: start 0x9B3E end 0x9B45 type bytedata
9B45  (NAME)_lfa: 
9B45 defw DIS-CODE_nfa
; [DASMZ80 ZONE] (NAME)_lfa: start 0x9B45 end 0x9B47 type pointers
9B47  (NAME)_cfa: 
9B47 defw 0x6306
; [DASMZ80 ZONE] (NAME)_cfa: start 0x9B47 end 0x9B49 type pointers
9B49  (NAME)_pfa: 
9B49 defw lit_cfa,0x0022
9B4D defw emit_cfa
9B4F defw two_dup_cfa
9B51 defw one_cfa
9B53 defw /STRING_cfa
9B55 defw type_cfa
9B57 defw lit_cfa,0x0022
9B5B defw emit_cfa
9B5D defw lit_cfa,0x002C
9B61 defw emit_cfa
9B63 defw semicolon_s_cfa
; [DASMZ80 ZONE] (NAME)_pfa: start 0x9B49 end 0x9B65 type pointers

9B1B  DIS-CODE_nfa: 
9B1B defb 0x08+0x80,"DIS-COD","E"+0x80
; [DASMZ80 ZONE] DIS-CODE_nfa: start 0x9B1B end 0x9B24 type bytedata
9B24  DIS-CODE_lfa: 
9B24 defw DIS-COLON_nfa
; [DASMZ80 ZONE] DIS-CODE_lfa: start 0x9B24 end 0x9B26 type pointers
9B26  DIS-CODE_cfa: 
9B26 defw 0x6306
; [DASMZ80 ZONE] DIS-CODE_cfa: start 0x9B26 end 0x9B28 type pointers
9B28  DIS-CODE_pfa: 
9B28 defw dup_cfa
9B2A defw ZONE-START_cfa
9B2C defw store_cfa
9B2E defw PREVIOUS-NFA_cfa
9B30 defw fetch_cfa
9B32 defw ZONE-END_cfa
9B34 defw store_cfa
9B36 defw cfa_cfa
9B38 defw CFA-LABEL$_cfa
9B3A defw CODE-ZONE_cfa
9B3C defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-CODE_pfa: start 0x9B28 end 0x9B3E type pointers

9AD9  DIS-COLON_nfa: 
9AD9 defb 0x09+0x80,"DIS-COLO","N"+0x80
; [DASMZ80 ZONE] DIS-COLON_nfa: start 0x9AD9 end 0x9AE3 type bytedata
9AE3  DIS-COLON_lfa: 
9AE3 defw DIS-2VALUE_nfa
; [DASMZ80 ZONE] DIS-COLON_lfa: start 0x9AE3 end 0x9AE5 type pointers
9AE5  DIS-COLON_cfa: 
9AE5 defw 0x6306
; [DASMZ80 ZONE] DIS-COLON_cfa: start 0x9AE5 end 0x9AE7 type pointers
9AE7  DIS-COLON_pfa: 
9AE7 defw dup_cfa
9AE9 defw dup_cfa
9AEB defw ADDRESS_cfa
9AED defw dup_cfa
9AEF defw COLON-END?_cfa
9AF1 defw zero_equals_cfa
9AF3 defw zero_branch_cfa,0x0012; to 0x9B07
9AF7 defw DEFW_cfa
9AF9 defw dup_cfa
9AFB defw fetch_cfa
9AFD defw CFA-LABEL_cfa
9AFF defw DIS-SPECIAL-CASES_cfa
9B01 defw two_plus_cfa
9B03 defw branch_cfa,0xFFE4; to 0x9AE9
9B07 defw dup_cfa
9B09 defw DEFW_cfa
9B0B defw fetch_cfa
9B0D defw CFA-LABEL_cfa
9B0F defw two_plus_cfa
9B11 defw ZONE-END_cfa
9B13 defw store_cfa
9B15 defw PFA-LABEL$_cfa
9B17 defw POINTERS-ZONE_cfa
9B19 defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-COLON_pfa: start 0x9AE7 end 0x9B1B type pointers

9AA0  DIS-2VALUE_nfa: 
9AA0 defb 0x0A+0x80,"DIS-2VALU","E"+0x80
; [DASMZ80 ZONE] DIS-2VALUE_nfa: start 0x9AA0 end 0x9AAB type bytedata
9AAB  DIS-2VALUE_lfa: 
9AAB defw DIS-VALUE_nfa
; [DASMZ80 ZONE] DIS-2VALUE_lfa: start 0x9AAB end 0x9AAD type pointers
9AAD  DIS-2VALUE_cfa: 
9AAD defw 0x6306
; [DASMZ80 ZONE] DIS-2VALUE_cfa: start 0x9AAD end 0x9AAF type pointers
9AAF  DIS-2VALUE_pfa: 
9AAF defw dup_cfa
9AB1 defw dup_cfa
9AB3 defw lit_cfa,0x0004
9AB7 defw plus_cfa
9AB9 defw ZONE-END_cfa
9ABB defw store_cfa
9ABD defw dup_cfa
9ABF defw ADDRESS_cfa
9AC1 defw DEFW_cfa
9AC3 defw dup_cfa
9AC5 defw fetch_cfa
9AC7 defw NHEX._cfa
9AC9 defw paren_dot_quote_cfa
9ACB defb 0x01,","
9ACD defw two_plus_cfa
9ACF defw fetch_cfa
9AD1 defw NHEX._cfa
9AD3 defw PFA-LABEL$_cfa
9AD5 defw WORDDATA-ZONE_cfa
9AD7 defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-2VALUE_pfa: start 0x9AAF end 0x9AD9 type pointers

9A78  DIS-VALUE_nfa: 
9A78 defb 0x09+0x80,"DIS-VALU","E"+0x80
; [DASMZ80 ZONE] DIS-VALUE_nfa: start 0x9A78 end 0x9A82 type bytedata
9A82  DIS-VALUE_lfa: 
9A82 defw CODE-ZONE_nfa
; [DASMZ80 ZONE] DIS-VALUE_lfa: start 0x9A82 end 0x9A84 type pointers
9A84  DIS-VALUE_cfa: 
9A84 defw 0x6306
; [DASMZ80 ZONE] DIS-VALUE_cfa: start 0x9A84 end 0x9A86 type pointers
9A86  DIS-VALUE_pfa: 
9A86 defw dup_cfa
9A88 defw dup_cfa
9A8A defw two_plus_cfa
9A8C defw ZONE-END_cfa
9A8E defw store_cfa
9A90 defw dup_cfa
9A92 defw ADDRESS_cfa
9A94 defw DEFW_cfa
9A96 defw fetch_cfa
9A98 defw NHEX._cfa
9A9A defw PFA-LABEL$_cfa
9A9C defw WORDDATA-ZONE_cfa
9A9E defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-VALUE_pfa: start 0x9A86 end 0x9AA0 type pointers

9A5F  CODE-ZONE_nfa: 
9A5F defb 0x09+0x80,"CODE-ZON","E"+0x80
; [DASMZ80 ZONE] CODE-ZONE_nfa: start 0x9A5F end 0x9A69 type bytedata
9A69  CODE-ZONE_lfa: 
9A69 defw POINTERS-ZONE_nfa
; [DASMZ80 ZONE] CODE-ZONE_lfa: start 0x9A69 end 0x9A6B type pointers
9A6B  CODE-ZONE_cfa: 
9A6B defw 0x6306
; [DASMZ80 ZONE] CODE-ZONE_cfa: start 0x9A6B end 0x9A6D type pointers
9A6D  CODE-ZONE_pfa: 
9A6D defw Z80DASM-ZONE_cfa
9A6F defw paren_dot_quote_cfa
9A71 defb 0x04,"code"
9A76 defw semicolon_s_cfa
; [DASMZ80 ZONE] CODE-ZONE_pfa: start 0x9A6D end 0x9A78 type pointers

9A3E  POINTERS-ZONE_nfa: 
9A3E defb 0x0D+0x80,"POINTERS-ZON","E"+0x80
; [DASMZ80 ZONE] POINTERS-ZONE_nfa: start 0x9A3E end 0x9A4C type bytedata
9A4C  POINTERS-ZONE_lfa: 
9A4C defw WORDDATA-ZONE_nfa
; [DASMZ80 ZONE] POINTERS-ZONE_lfa: start 0x9A4C end 0x9A4E type pointers
9A4E  POINTERS-ZONE_cfa: 
9A4E defw 0x6306
; [DASMZ80 ZONE] POINTERS-ZONE_cfa: start 0x9A4E end 0x9A50 type pointers
9A50  POINTERS-ZONE_pfa: 
9A50 defw Z80DASM-ZONE_cfa
9A52 defw paren_dot_quote_cfa
9A54 defb 0x08,"pointers"
9A5D defw semicolon_s_cfa
; [DASMZ80 ZONE] POINTERS-ZONE_pfa: start 0x9A50 end 0x9A5F type pointers

9A1D  WORDDATA-ZONE_nfa: 
9A1D defb 0x0D+0x80,"WORDDATA-ZON","E"+0x80
; [DASMZ80 ZONE] WORDDATA-ZONE_nfa: start 0x9A1D end 0x9A2B type bytedata
9A2B  WORDDATA-ZONE_lfa: 
9A2B defw BYTEDATA-ZONE_nfa
; [DASMZ80 ZONE] WORDDATA-ZONE_lfa: start 0x9A2B end 0x9A2D type pointers
9A2D  WORDDATA-ZONE_cfa: 
9A2D defw 0x6306
; [DASMZ80 ZONE] WORDDATA-ZONE_cfa: start 0x9A2D end 0x9A2F type pointers
9A2F  WORDDATA-ZONE_pfa: 
9A2F defw Z80DASM-ZONE_cfa
9A31 defw paren_dot_quote_cfa
9A33 defb 0x08,"worddata"
9A3C defw semicolon_s_cfa
; [DASMZ80 ZONE] WORDDATA-ZONE_pfa: start 0x9A2F end 0x9A3E type pointers

99FC  BYTEDATA-ZONE_nfa: 
99FC defb 0x0D+0x80,"BYTEDATA-ZON","E"+0x80
; [DASMZ80 ZONE] BYTEDATA-ZONE_nfa: start 0x99FC end 0x9A0A type bytedata
9A0A  BYTEDATA-ZONE_lfa: 
9A0A defw Z80DASM-ZONE_nfa
; [DASMZ80 ZONE] BYTEDATA-ZONE_lfa: start 0x9A0A end 0x9A0C type pointers
9A0C  BYTEDATA-ZONE_cfa: 
9A0C defw 0x6306
; [DASMZ80 ZONE] BYTEDATA-ZONE_cfa: start 0x9A0C end 0x9A0E type pointers
9A0E  BYTEDATA-ZONE_pfa: 
9A0E defw Z80DASM-ZONE_cfa
9A10 defw paren_dot_quote_cfa
9A12 defb 0x08,"bytedata"
9A1B defw semicolon_s_cfa
; [DASMZ80 ZONE] BYTEDATA-ZONE_pfa: start 0x9A0E end 0x9A1D type pointers

99A9  Z80DASM-ZONE_nfa: 
99A9 defb 0x0C+0x80,"Z80DASM-ZON","E"+0x80
; [DASMZ80 ZONE] Z80DASM-ZONE_nfa: start 0x99A9 end 0x99B6 type bytedata
99B6  Z80DASM-ZONE_lfa: 
99B6 defw ZONE-END_nfa
; [DASMZ80 ZONE] Z80DASM-ZONE_lfa: start 0x99B6 end 0x99B8 type pointers
99B8  Z80DASM-ZONE_cfa: 
99B8 defw 0x6306
; [DASMZ80 ZONE] Z80DASM-ZONE_cfa: start 0x99B8 end 0x99BA type pointers
99BA  Z80DASM-ZONE_pfa: 
99BA defw cr_cfa
99BC defw paren_dot_quote_cfa
99BE defb 0x11,"; [DASMZ80 ZONE] "
99D0 defw type_cfa
99D2 defw paren_dot_quote_cfa
99D4 defb 0x08,": start "
99DD defw ZONE-START_cfa
99DF defw fetch_cfa
99E1 defw NHEX._cfa
99E3 defw paren_dot_quote_cfa
99E5 defb 0x05," end "
99EB defw ZONE-END_cfa
99ED defw fetch_cfa
99EF defw NHEX._cfa
99F1 defw paren_dot_quote_cfa
99F3 defb 0x06," type "
99FA defw semicolon_s_cfa
; [DASMZ80 ZONE] Z80DASM-ZONE_pfa: start 0x99BA end 0x99FC type pointers

999A  ZONE-END_nfa: 
999A defb 0x08+0x80,"ZONE-EN","D"+0x80
; [DASMZ80 ZONE] ZONE-END_nfa: start 0x999A end 0x99A3 type bytedata
99A3  ZONE-END_lfa: 
99A3 defw ZONE-START_nfa
; [DASMZ80 ZONE] ZONE-END_lfa: start 0x99A3 end 0x99A5 type pointers
99A5  ZONE-END_cfa: 
99A5 defw 0x6362
; [DASMZ80 ZONE] ZONE-END_cfa: start 0x99A5 end 0x99A7 type pointers
99A7  ZONE-END_pfa: 
99A7 defw 0x99A9
; [DASMZ80 ZONE] ZONE-END_pfa: start 0x99A7 end 0x99A9 type worddata

9989  ZONE-START_nfa: 
9989 defb 0x0A+0x80,"ZONE-STAR","T"+0x80
; [DASMZ80 ZONE] ZONE-START_nfa: start 0x9989 end 0x9994 type bytedata
9994  ZONE-START_lfa: 
9994 defw CODE?_nfa
; [DASMZ80 ZONE] ZONE-START_lfa: start 0x9994 end 0x9996 type pointers
9996  ZONE-START_cfa: 
9996 defw 0x6362
; [DASMZ80 ZONE] ZONE-START_cfa: start 0x9996 end 0x9998 type pointers
9998  ZONE-START_pfa: 
9998 defw 0x9998
; [DASMZ80 ZONE] ZONE-START_pfa: start 0x9998 end 0x999A type worddata

9975  CODE?_nfa: 
9975 defb 0x05+0x80,"CODE","?"+0x80
; [DASMZ80 ZONE] CODE?_nfa: start 0x9975 end 0x997B type bytedata
997B  CODE?_lfa: 
997B defw 2VARIABLE?_nfa
; [DASMZ80 ZONE] CODE?_lfa: start 0x997B end 0x997D type pointers
997D  CODE?_cfa: 
997D defw 0x6306
; [DASMZ80 ZONE] CODE?_cfa: start 0x997D end 0x997F type pointers
997F  CODE?_pfa: 
997F defw dup_cfa
9981 defw cfa_cfa
9983 defw fetch_cfa
9985 defw equals_cfa
9987 defw semicolon_s_cfa
; [DASMZ80 ZONE] CODE?_pfa: start 0x997F end 0x9989 type pointers

995A  2VARIABLE?_nfa: 
995A defb 0x0A+0x80,"2VARIABLE","?"+0x80
; [DASMZ80 ZONE] 2VARIABLE?_nfa: start 0x995A end 0x9965 type bytedata
9965  2VARIABLE?_lfa: 
9965 defw 2CONSTANT?_nfa
; [DASMZ80 ZONE] 2VARIABLE?_lfa: start 0x9965 end 0x9967 type pointers
9967  2VARIABLE?_cfa: 
9967 defw 0x6306
; [DASMZ80 ZONE] 2VARIABLE?_cfa: start 0x9967 end 0x9969 type pointers
9969  2VARIABLE?_pfa: 
9969 defw cfa_cfa
996B defw fetch_cfa
996D defw lit_cfa,0x7F23
9971 defw equals_cfa
9973 defw semicolon_s_cfa
; [DASMZ80 ZONE] 2VARIABLE?_pfa: start 0x9969 end 0x9975 type pointers

993F  2CONSTANT?_nfa: 
993F defb 0x0A+0x80,"2CONSTANT","?"+0x80
; [DASMZ80 ZONE] 2CONSTANT?_nfa: start 0x993F end 0x994A type bytedata
994A  2CONSTANT?_lfa: 
994A defw USER?_nfa
; [DASMZ80 ZONE] 2CONSTANT?_lfa: start 0x994A end 0x994C type pointers
994C  2CONSTANT?_cfa: 
994C defw 0x6306
; [DASMZ80 ZONE] 2CONSTANT?_cfa: start 0x994C end 0x994E type pointers
994E  2CONSTANT?_pfa: 
994E defw cfa_cfa
9950 defw fetch_cfa
9952 defw lit_cfa,0x7F00
9956 defw equals_cfa
9958 defw semicolon_s_cfa
; [DASMZ80 ZONE] 2CONSTANT?_pfa: start 0x994E end 0x995A type pointers

9929  USER?_nfa: 
9929 defb 0x05+0x80,"USER","?"+0x80
; [DASMZ80 ZONE] USER?_nfa: start 0x9929 end 0x992F type bytedata
992F  USER?_lfa: 
992F defw VARIABLE?_nfa
; [DASMZ80 ZONE] USER?_lfa: start 0x992F end 0x9931 type pointers
9931  USER?_cfa: 
9931 defw 0x6306
; [DASMZ80 ZONE] USER?_cfa: start 0x9931 end 0x9933 type pointers
9933  USER?_pfa: 
9933 defw cfa_cfa
9935 defw fetch_cfa
9937 defw lit_cfa,0x6374
993B defw equals_cfa
993D defw semicolon_s_cfa
; [DASMZ80 ZONE] USER?_pfa: start 0x9933 end 0x993F type pointers

990F  VARIABLE?_nfa: 
990F defb 0x09+0x80,"VARIABLE","?"+0x80
; [DASMZ80 ZONE] VARIABLE?_nfa: start 0x990F end 0x9919 type bytedata
9919  VARIABLE?_lfa: 
9919 defw CONSTANT?_nfa
; [DASMZ80 ZONE] VARIABLE?_lfa: start 0x9919 end 0x991B type pointers
991B  VARIABLE?_cfa: 
991B defw 0x6306
; [DASMZ80 ZONE] VARIABLE?_cfa: start 0x991B end 0x991D type pointers
991D  VARIABLE?_pfa: 
991D defw cfa_cfa
991F defw fetch_cfa
9921 defw lit_cfa,0x6362
9925 defw equals_cfa
9927 defw semicolon_s_cfa
; [DASMZ80 ZONE] VARIABLE?_pfa: start 0x991D end 0x9929 type pointers

98F5  CONSTANT?_nfa: 
98F5 defb 0x09+0x80,"CONSTANT","?"+0x80
; [DASMZ80 ZONE] CONSTANT?_nfa: start 0x98F5 end 0x98FF type bytedata
98FF  CONSTANT?_lfa: 
98FF defw COLON?_nfa
; [DASMZ80 ZONE] CONSTANT?_lfa: start 0x98FF end 0x9901 type pointers
9901  CONSTANT?_cfa: 
9901 defw 0x6306
; [DASMZ80 ZONE] CONSTANT?_cfa: start 0x9901 end 0x9903 type pointers
9903  CONSTANT?_pfa: 
9903 defw cfa_cfa
9905 defw fetch_cfa
9907 defw lit_cfa,0x6348
990B defw equals_cfa
990D defw semicolon_s_cfa
; [DASMZ80 ZONE] CONSTANT?_pfa: start 0x9903 end 0x990F type pointers

98DA  COLON?_nfa: 
98DA defb 0x06+0x80,"COLON","?"+0x80
; [DASMZ80 ZONE] COLON?_nfa: start 0x98DA end 0x98E1 type bytedata
98E1  COLON?_lfa: 
98E1 defw COLON-END?_nfa
; [DASMZ80 ZONE] COLON?_lfa: start 0x98E1 end 0x98E3 type pointers
98E3  COLON?_cfa: 
98E3 defw 0x6306
; [DASMZ80 ZONE] COLON?_cfa: start 0x98E3 end 0x98E5 type pointers
98E5  COLON?_pfa: 
98E5 defw cfa_cfa
98E7 defw fetch_cfa
98E9 defw lit_cfa,0x62F4
98ED defw cfa_cfa
98EF defw fetch_cfa
98F1 defw equals_cfa
98F3 defw semicolon_s_cfa
; [DASMZ80 ZONE] COLON?_pfa: start 0x98E5 end 0x98F5 type pointers

984B  COLON-END?_nfa: 
984B defb 0x0A+0x80,"COLON-END","?"+0x80
; [DASMZ80 ZONE] COLON-END?_nfa: start 0x984B end 0x9856 type bytedata
9856  COLON-END?_lfa: 
9856 defw ADDR_nfa
; [DASMZ80 ZONE] COLON-END?_lfa: start 0x9856 end 0x9858 type pointers
9858  COLON-END?_cfa: 
9858 defw 0x6306
; [DASMZ80 ZONE] COLON-END?_cfa: start 0x9858 end 0x985A type pointers
985A  COLON-END?_pfa: 
985A defw lit_cfa,0x9849
985E defw store_cfa
9860 defw TRUE_cfa
9862 defw ADDR_cfa
9864 defw fetch_cfa
9866 defw lit_cfa,0x6148
986A defw equals_cfa
986C defw zero_branch_cfa,0x0004; to 0x9872
9870 defw exit_cfa
9872 defw ADDR_cfa
9874 defw fetch_cfa
9876 defw lit_cfa,0x676E
987A defw equals_cfa
987C defw zero_branch_cfa,0x0004; to 0x9882
9880 defw exit_cfa
9882 defw ADDR_cfa
9884 defw lit_cfa,0x6E04
9888 defw equals_cfa
988A defw zero_branch_cfa,0x0004; to 0x9890
988E defw exit_cfa
9890 defw ADDR_cfa
9892 defw lit_cfa,0x6DAE
9896 defw equals_cfa
9898 defw zero_branch_cfa,0x0004; to 0x989E
989C defw exit_cfa
989E defw ADDR_cfa
98A0 defw lit_cfa,0x6D6A
98A4 defw equals_cfa
98A6 defw zero_branch_cfa,0x0004; to 0x98AC
98AA defw exit_cfa
98AC defw ADDR_cfa
98AE defw lit_cfa,0x6C99
98B2 defw equals_cfa
98B4 defw zero_branch_cfa,0x0004; to 0x98BA
98B8 defw exit_cfa
98BA defw ADDR_cfa
98BC defw lit_cfa,0x6B2A
98C0 defw equals_cfa
98C2 defw zero_branch_cfa,0x0004; to 0x98C8
98C6 defw exit_cfa
98C8 defw ADDR_cfa
98CA defw lit_cfa,0x6D4C
98CE defw equals_cfa
98D0 defw zero_branch_cfa,0x0004; to 0x98D6
98D4 defw exit_cfa
98D6 defw zero_equals_cfa
98D8 defw semicolon_s_cfa
; [DASMZ80 ZONE] COLON-END?_pfa: start 0x985A end 0x98DA type pointers

9840  ADDR_nfa: 
9840 defb 0x04+0x80,"ADD","R"+0x80
; [DASMZ80 ZONE] ADDR_nfa: start 0x9840 end 0x9845 type bytedata
9845  ADDR_lfa: 
9845 defw DIS-SPECIAL-CASES_nfa
; [DASMZ80 ZONE] ADDR_lfa: start 0x9845 end 0x9847 type pointers
9847  ADDR_cfa: 
9847 defw 0x6348
; [DASMZ80 ZONE] ADDR_cfa: start 0x9847 end 0x9849 type pointers
9849  ADDR_pfa: 
9849 defw 0x98D8
; [DASMZ80 ZONE] ADDR_pfa: start 0x9849 end 0x984B type worddata

9782  DIS-SPECIAL-CASES_nfa: 
9782 defb 0x11+0x80,"DIS-SPECIAL-CASE","S"+0x80
; [DASMZ80 ZONE] DIS-SPECIAL-CASES_nfa: start 0x9782 end 0x9794 type bytedata
9794  DIS-SPECIAL-CASES_lfa: 
9794 defw DIS-STRING_nfa
; [DASMZ80 ZONE] DIS-SPECIAL-CASES_lfa: start 0x9794 end 0x9796 type pointers
9796  DIS-SPECIAL-CASES_cfa: 
9796 defw 0x6306
; [DASMZ80 ZONE] DIS-SPECIAL-CASES_cfa: start 0x9796 end 0x9798 type pointers
9798  DIS-SPECIAL-CASES_pfa: 
9798 defw dup_cfa
979A defw fetch_cfa
979C defw lit_cfa,0x66F7
97A0 defw over_cfa
97A2 defw equals_cfa
97A4 defw zero_branch_cfa,0x000A; to 0x97B0
97A8 defw drop_cfa
97AA defw DIS-COMPILE_cfa
97AC defw branch_cfa,0x0090; to 0x983E
97B0 defw lit_cfa,0x5E7D
97B4 defw over_cfa
97B6 defw equals_cfa
97B8 defw zero_branch_cfa,0x000A; to 0x97C4
97BC defw drop_cfa
97BE defw DIS-LITERAL_cfa
97C0 defw branch_cfa,0x007C; to 0x983E
97C4 defw lit_cfa,0x5EA1
97C8 defw over_cfa
97CA defw equals_cfa
97CC defw zero_branch_cfa,0x000A; to 0x97D8
97D0 defw drop_cfa
97D2 defw DIS-BRANCH_cfa
97D4 defw branch_cfa,0x0068; to 0x983E
97D8 defw lit_cfa,0x5EB9
97DC defw over_cfa
97DE defw equals_cfa
97E0 defw zero_branch_cfa,0x000A; to 0x97EC
97E4 defw drop_cfa
97E6 defw DIS-BRANCH_cfa
97E8 defw branch_cfa,0x0054; to 0x983E
97EC defw lit_cfa,0x5ECE
97F0 defw over_cfa
97F2 defw equals_cfa
97F4 defw zero_branch_cfa,0x000A; to 0x9800
97F8 defw drop_cfa
97FA defw DIS-BRANCH_cfa
97FC defw branch_cfa,0x0040; to 0x983E
9800 defw lit_cfa,0x5F08
9804 defw over_cfa
9806 defw equals_cfa
9808 defw zero_branch_cfa,0x000A; to 0x9814
980C defw drop_cfa
980E defw DIS-BRANCH_cfa
9810 defw branch_cfa,0x002C; to 0x983E
9814 defw lit_cfa,0x6847
9818 defw over_cfa
981A defw equals_cfa
981C defw zero_branch_cfa,0x000A; to 0x9828
9820 defw drop_cfa
9822 defw DIS-STRING_cfa
9824 defw branch_cfa,0x0018; to 0x983E
9828 defw lit_cfa,0x916A
982C defw over_cfa
982E defw equals_cfa
9830 defw zero_branch_cfa,0x000A; to 0x983C
9834 defw drop_cfa
9836 defw DIS-STRING_cfa
9838 defw branch_cfa,0x0004; to 0x983E
983C defw drop_cfa
983E defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-SPECIAL-CASES_pfa: start 0x9798 end 0x9840 type pointers

975B  DIS-STRING_nfa: 
975B defb 0x0A+0x80,"DIS-STRIN","G"+0x80
; [DASMZ80 ZONE] DIS-STRING_nfa: start 0x975B end 0x9766 type bytedata
9766  DIS-STRING_lfa: 
9766 defw (DIS-STRING)_nfa
; [DASMZ80 ZONE] DIS-STRING_lfa: start 0x9766 end 0x9768 type pointers
9768  DIS-STRING_cfa: 
9768 defw 0x6306
; [DASMZ80 ZONE] DIS-STRING_cfa: start 0x9768 end 0x976A type pointers
976A  DIS-STRING_pfa: 
976A defw two_plus_cfa
976C defw dup_cfa
976E defw ADDRESS_cfa
9770 defw DEFB_cfa
9772 defw dup_cfa
9774 defw count_cfa
9776 defw (DIS-STRING)_cfa
9778 defw dup_cfa
977A defw c_fetch_cfa
977C defw plus_cfa
977E defw 1-_cfa
9780 defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-STRING_pfa: start 0x976A end 0x9782 type pointers

9730  (DIS-STRING)_nfa: 
9730 defb 0x0C+0x80,"(DIS-STRING",")"+0x80
; [DASMZ80 ZONE] (DIS-STRING)_nfa: start 0x9730 end 0x973D type bytedata
973D  (DIS-STRING)_lfa: 
973D defw DIS-BRANCH_nfa
; [DASMZ80 ZONE] (DIS-STRING)_lfa: start 0x973D end 0x973F type pointers
973F  (DIS-STRING)_cfa: 
973F defw 0x6306
; [DASMZ80 ZONE] (DIS-STRING)_cfa: start 0x973F end 0x9741 type pointers
9741  (DIS-STRING)_pfa: 
9741 defw dup_cfa
9743 defw BHEX._cfa
9745 defw lit_cfa,0x002C
9749 defw emit_cfa
974B defw lit_cfa,0x0022
974F defw emit_cfa
9751 defw type_cfa
9753 defw lit_cfa,0x0022
9757 defw emit_cfa
9759 defw semicolon_s_cfa
; [DASMZ80 ZONE] (DIS-STRING)_pfa: start 0x9741 end 0x975B type pointers

970B  DIS-BRANCH_nfa: 
970B defb 0x0A+0x80,"DIS-BRANC","H"+0x80
; [DASMZ80 ZONE] DIS-BRANCH_nfa: start 0x970B end 0x9716 type bytedata
9716  DIS-BRANCH_lfa: 
9716 defw DIS-LITERAL_nfa
; [DASMZ80 ZONE] DIS-BRANCH_lfa: start 0x9716 end 0x9718 type pointers
9718  DIS-BRANCH_cfa: 
9718 defw 0x6306
; [DASMZ80 ZONE] DIS-BRANCH_cfa: start 0x9718 end 0x971A type pointers
971A  DIS-BRANCH_pfa: 
971A defw DIS-LITERAL_cfa
971C defw paren_dot_quote_cfa
971E defb 0x05,"; to "
9724 defw dup_cfa
9726 defw dup_cfa
9728 defw fetch_cfa
972A defw plus_cfa
972C defw NHEX._cfa
972E defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-BRANCH_pfa: start 0x971A end 0x9730 type pointers

96ED  DIS-LITERAL_nfa: 
96ED defb 0x0B+0x80,"DIS-LITERA","L"+0x80
; [DASMZ80 ZONE] DIS-LITERAL_nfa: start 0x96ED end 0x96F9 type bytedata
96F9  DIS-LITERAL_lfa: 
96F9 defw DIS-COMPILE_nfa
; [DASMZ80 ZONE] DIS-LITERAL_lfa: start 0x96F9 end 0x96FB type pointers
96FB  DIS-LITERAL_cfa: 
96FB defw 0x6306
; [DASMZ80 ZONE] DIS-LITERAL_cfa: start 0x96FB end 0x96FD type pointers
96FD  DIS-LITERAL_pfa: 
96FD defw two_plus_cfa
96FF defw dup_cfa
9701 defw fetch_cfa
9703 defw paren_dot_quote_cfa
9705 defb 0x01,","
9707 defw NHEX._cfa
9709 defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-LITERAL_pfa: start 0x96FD end 0x970B type pointers

96CF  DIS-COMPILE_nfa: 
96CF defb 0x0B+0x80,"DIS-COMPIL","E"+0x80
; [DASMZ80 ZONE] DIS-COMPILE_nfa: start 0x96CF end 0x96DB type bytedata
96DB  DIS-COMPILE_lfa: 
96DB defw DEFB_nfa
; [DASMZ80 ZONE] DIS-COMPILE_lfa: start 0x96DB end 0x96DD type pointers
96DD  DIS-COMPILE_cfa: 
96DD defw 0x6306
; [DASMZ80 ZONE] DIS-COMPILE_cfa: start 0x96DD end 0x96DF type pointers
96DF  DIS-COMPILE_pfa: 
96DF defw two_plus_cfa
96E1 defw dup_cfa
96E3 defw fetch_cfa
96E5 defw paren_dot_quote_cfa
96E7 defb 0x01,","
96E9 defw CFA-LABEL_cfa
96EB defw semicolon_s_cfa
; [DASMZ80 ZONE] DIS-COMPILE_pfa: start 0x96DF end 0x96ED type pointers

96BC  DEFB_nfa: 
96BC defb 0x04+0x80,"DEF","B"+0x80
; [DASMZ80 ZONE] DEFB_nfa: start 0x96BC end 0x96C1 type bytedata
96C1  DEFB_lfa: 
96C1 defw DEFW_nfa
; [DASMZ80 ZONE] DEFB_lfa: start 0x96C1 end 0x96C3 type pointers
96C3  DEFB_cfa: 
96C3 defw 0x6306
; [DASMZ80 ZONE] DEFB_cfa: start 0x96C3 end 0x96C5 type pointers
96C5  DEFB_pfa: 
96C5 defw paren_dot_quote_cfa
96C7 defb 0x05,"defb "
96CD defw semicolon_s_cfa
; [DASMZ80 ZONE] DEFB_pfa: start 0x96C5 end 0x96CF type pointers

96A9  DEFW_nfa: 
96A9 defb 0x04+0x80,"DEF","W"+0x80
; [DASMZ80 ZONE] DEFW_nfa: start 0x96A9 end 0x96AE type bytedata
96AE  DEFW_lfa: 
96AE defw PFA-LABEL_nfa
; [DASMZ80 ZONE] DEFW_lfa: start 0x96AE end 0x96B0 type pointers
96B0  DEFW_cfa: 
96B0 defw 0x6306
; [DASMZ80 ZONE] DEFW_cfa: start 0x96B0 end 0x96B2 type pointers
96B2  DEFW_pfa: 
96B2 defw paren_dot_quote_cfa
96B4 defb 0x05,"defw "
96BA defw semicolon_s_cfa
; [DASMZ80 ZONE] DEFW_pfa: start 0x96B2 end 0x96BC type pointers

9695  PFA-LABEL_nfa: 
9695 defb 0x09+0x80,"PFA-LABE","L"+0x80
; [DASMZ80 ZONE] PFA-LABEL_nfa: start 0x9695 end 0x969F type bytedata
969F  PFA-LABEL_lfa: 
969F defw CFA-LABEL_nfa
; [DASMZ80 ZONE] PFA-LABEL_lfa: start 0x969F end 0x96A1 type pointers
96A1  PFA-LABEL_cfa: 
96A1 defw 0x6306
; [DASMZ80 ZONE] PFA-LABEL_cfa: start 0x96A1 end 0x96A3 type pointers
96A3  PFA-LABEL_pfa: 
96A3 defw PFA-LABEL$_cfa
96A5 defw type_cfa
96A7 defw semicolon_s_cfa
; [DASMZ80 ZONE] PFA-LABEL_pfa: start 0x96A3 end 0x96A9 type pointers

9681  CFA-LABEL_nfa: 
9681 defb 0x09+0x80,"CFA-LABE","L"+0x80
; [DASMZ80 ZONE] CFA-LABEL_nfa: start 0x9681 end 0x968B type bytedata
968B  CFA-LABEL_lfa: 
968B defw LFA-LABEL_nfa
; [DASMZ80 ZONE] CFA-LABEL_lfa: start 0x968B end 0x968D type pointers
968D  CFA-LABEL_cfa: 
968D defw 0x6306
; [DASMZ80 ZONE] CFA-LABEL_cfa: start 0x968D end 0x968F type pointers
968F  CFA-LABEL_pfa: 
968F defw CFA-LABEL$_cfa
9691 defw type_cfa
9693 defw semicolon_s_cfa
; [DASMZ80 ZONE] CFA-LABEL_pfa: start 0x968F end 0x9695 type pointers

966D  LFA-LABEL_nfa: 
966D defb 0x09+0x80,"LFA-LABE","L"+0x80
; [DASMZ80 ZONE] LFA-LABEL_nfa: start 0x966D end 0x9677 type bytedata
9677  LFA-LABEL_lfa: 
9677 defw NFA-LABEL_nfa
; [DASMZ80 ZONE] LFA-LABEL_lfa: start 0x9677 end 0x9679 type pointers
9679  LFA-LABEL_cfa: 
9679 defw 0x6306
; [DASMZ80 ZONE] LFA-LABEL_cfa: start 0x9679 end 0x967B type pointers
967B  LFA-LABEL_pfa: 
967B defw LFA-LABEL$_cfa
967D defw type_cfa
967F defw semicolon_s_cfa
; [DASMZ80 ZONE] LFA-LABEL_pfa: start 0x967B end 0x9681 type pointers

9659  NFA-LABEL_nfa: 
9659 defb 0x09+0x80,"NFA-LABE","L"+0x80
; [DASMZ80 ZONE] NFA-LABEL_nfa: start 0x9659 end 0x9663 type bytedata
9663  NFA-LABEL_lfa: 
9663 defw PFA-LABEL$_nfa
; [DASMZ80 ZONE] NFA-LABEL_lfa: start 0x9663 end 0x9665 type pointers
9665  NFA-LABEL_cfa: 
9665 defw 0x6306
; [DASMZ80 ZONE] NFA-LABEL_cfa: start 0x9665 end 0x9667 type pointers
9667  NFA-LABEL_pfa: 
9667 defw NFA-LABEL$_cfa
9669 defw type_cfa
966B defw semicolon_s_cfa
; [DASMZ80 ZONE] NFA-LABEL_pfa: start 0x9667 end 0x966D type pointers

963B  PFA-LABEL$_nfa: 
963B defb 0x0A+0x80,"PFA-LABEL","$"+0x80
; [DASMZ80 ZONE] PFA-LABEL$_nfa: start 0x963B end 0x9646 type bytedata
9646  PFA-LABEL$_lfa: 
9646 defw CFA-LABEL$_nfa
; [DASMZ80 ZONE] PFA-LABEL$_lfa: start 0x9646 end 0x9648 type pointers
9648  PFA-LABEL$_cfa: 
9648 defw 0x6306
; [DASMZ80 ZONE] PFA-LABEL$_cfa: start 0x9648 end 0x964A type pointers
964A  PFA-LABEL$_pfa: 
964A defw nfa_cfa
964C defw ID_cfa
964E defw SLIT_cfa
9650 defb 0x04,"_pfa"
9655 defw S+_cfa
9657 defw semicolon_s_cfa
; [DASMZ80 ZONE] PFA-LABEL$_pfa: start 0x964A end 0x9659 type pointers

961B  CFA-LABEL$_nfa: 
961B defb 0x0A+0x80,"CFA-LABEL","$"+0x80
; [DASMZ80 ZONE] CFA-LABEL$_nfa: start 0x961B end 0x9626 type bytedata
9626  CFA-LABEL$_lfa: 
9626 defw LFA-LABEL$_nfa
; [DASMZ80 ZONE] CFA-LABEL$_lfa: start 0x9626 end 0x9628 type pointers
9628  CFA-LABEL$_cfa: 
9628 defw 0x6306
; [DASMZ80 ZONE] CFA-LABEL$_cfa: start 0x9628 end 0x962A type pointers
962A  CFA-LABEL$_pfa: 
962A defw two_plus_cfa
962C defw nfa_cfa
962E defw ID_cfa
9630 defw SLIT_cfa
9632 defb 0x04,"_cfa"
9637 defw S+_cfa
9639 defw semicolon_s_cfa
; [DASMZ80 ZONE] CFA-LABEL$_pfa: start 0x962A end 0x963B type pointers

95FD  LFA-LABEL$_nfa: 
95FD defb 0x0A+0x80,"LFA-LABEL","$"+0x80
; [DASMZ80 ZONE] LFA-LABEL$_nfa: start 0x95FD end 0x9608 type bytedata
9608  LFA-LABEL$_lfa: 
9608 defw NFA-LABEL$_nfa
; [DASMZ80 ZONE] LFA-LABEL$_lfa: start 0x9608 end 0x960A type pointers
960A  LFA-LABEL$_cfa: 
960A defw 0x6306
; [DASMZ80 ZONE] LFA-LABEL$_cfa: start 0x960A end 0x960C type pointers
960C  LFA-LABEL$_pfa: 
960C defw nfa_cfa
960E defw ID_cfa
9610 defw SLIT_cfa
9612 defb 0x04,"_lfa"
9617 defw S+_cfa
9619 defw semicolon_s_cfa
; [DASMZ80 ZONE] LFA-LABEL$_pfa: start 0x960C end 0x961B type pointers

95E1  NFA-LABEL$_nfa: 
95E1 defb 0x0A+0x80,"NFA-LABEL","$"+0x80
; [DASMZ80 ZONE] NFA-LABEL$_nfa: start 0x95E1 end 0x95EC type bytedata
95EC  NFA-LABEL$_lfa: 
95EC defw ID_nfa
; [DASMZ80 ZONE] NFA-LABEL$_lfa: start 0x95EC end 0x95EE type pointers
95EE  NFA-LABEL$_cfa: 
95EE defw 0x6306
; [DASMZ80 ZONE] NFA-LABEL$_cfa: start 0x95EE end 0x95F0 type pointers
95F0  NFA-LABEL$_pfa: 
95F0 defw ID_cfa
95F2 defw SLIT_cfa
95F4 defb 0x04,"_nfa"
95F9 defw S+_cfa
95FB defw semicolon_s_cfa
; [DASMZ80 ZONE] NFA-LABEL$_pfa: start 0x95F0 end 0x95FD type pointers

95B4  ID_nfa: 
95B4 defb 0x02+0x80,"I","D"+0x80
; [DASMZ80 ZONE] ID_nfa: start 0x95B4 end 0x95B7 type bytedata
95B7  ID_lfa: 
95B7 defw DEF_nfa
; [DASMZ80 ZONE] ID_lfa: start 0x95B7 end 0x95B9 type pointers
95B9  ID_cfa: 
95B9 defw 0x6306
; [DASMZ80 ZONE] ID_cfa: start 0x95B9 end 0x95BB type pointers
95BB  ID_pfa: 
95BB defw dup_cfa
95BD defw one_plus_cfa
95BF defw swap_cfa
95C1 defw c_fetch_cfa
95C3 defw lit_cfa,0x003F
95C7 defw and_cfa
95C9 defw SAVE-STRING_cfa
95CB defw two_dup_cfa
95CD defw plus_cfa
95CF defw 1-_cfa
95D1 defw dup_cfa
95D3 defw c_fetch_cfa
95D5 defw lit_cfa,0x007F
95D9 defw and_cfa
95DB defw swap_cfa
95DD defw c_store_cfa
95DF defw semicolon_s_cfa
; [DASMZ80 ZONE] ID_pfa: start 0x95BB end 0x95E1 type pointers

95A5  DEF_nfa: 
95A5 defb 0x03+0x80,"DE","F"+0x80
; [DASMZ80 ZONE] DEF_nfa: start 0x95A5 end 0x95A9 type bytedata
95A9  DEF_lfa: 
95A9 defw PREVIOUS-NFA_nfa
; [DASMZ80 ZONE] DEF_lfa: start 0x95A9 end 0x95AB type pointers
95AB  DEF_cfa: 
95AB defw 0x6306
; [DASMZ80 ZONE] DEF_cfa: start 0x95AB end 0x95AD type pointers
95AD  DEF_pfa: 
95AD defw paren_dot_quote_cfa
95AF defb 0x02,": "
95B2 defw semicolon_s_cfa
; [DASMZ80 ZONE] DEF_pfa: start 0x95AD end 0x95B4 type pointers

9592  PREVIOUS-NFA_nfa: 
9592 defb 0x0C+0x80,"PREVIOUS-NF","A"+0x80
; [DASMZ80 ZONE] PREVIOUS-NFA_nfa: start 0x9592 end 0x959F type bytedata
959F  PREVIOUS-NFA_lfa: 
959F defw CURRENT-NFA_nfa
; [DASMZ80 ZONE] PREVIOUS-NFA_lfa: start 0x959F end 0x95A1 type pointers
95A1  PREVIOUS-NFA_cfa: 
95A1 defw 0x6362
; [DASMZ80 ZONE] PREVIOUS-NFA_cfa: start 0x95A1 end 0x95A3 type pointers
95A3  PREVIOUS-NFA_pfa: 
95A3 defw 0x95A5
; [DASMZ80 ZONE] PREVIOUS-NFA_pfa: start 0x95A3 end 0x95A5 type worddata

9580  CURRENT-NFA_nfa: 
9580 defb 0x0B+0x80,"CURRENT-NF","A"+0x80
; [DASMZ80 ZONE] CURRENT-NFA_nfa: start 0x9580 end 0x958C type bytedata
958C  CURRENT-NFA_lfa: 
958C defw NHEX._nfa
; [DASMZ80 ZONE] CURRENT-NFA_lfa: start 0x958C end 0x958E type pointers
958E  CURRENT-NFA_cfa: 
958E defw 0x6362
; [DASMZ80 ZONE] CURRENT-NFA_cfa: start 0x958E end 0x9590 type pointers
9590  CURRENT-NFA_pfa: 
9590 defw 0x9580
; [DASMZ80 ZONE] CURRENT-NFA_pfa: start 0x9590 end 0x9592 type worddata

9553  NHEX._nfa: 
9553 defb 0x05+0x80,"NHEX","."+0x80
; [DASMZ80 ZONE] NHEX._nfa: start 0x9553 end 0x9559 type bytedata
9559  NHEX._lfa: 
9559 defw BHEX._nfa
; [DASMZ80 ZONE] NHEX._lfa: start 0x9559 end 0x955B type pointers
955B  NHEX._cfa: 
955B defw 0x6306
; [DASMZ80 ZONE] NHEX._cfa: start 0x955B end 0x955D type pointers
955D  NHEX._pfa: 
955D defw base_cfa
955F defw fetch_cfa
9561 defw hex_cfa
9563 defw swap_cfa
9565 defw s_to_d_cfa
9567 defw less_hash_cfa
9569 defw hash_cfa
956B defw hash_cfa
956D defw hash_cfa
956F defw hash_cfa
9571 defw hash_greater_cfa
9573 defw paren_dot_quote_cfa
9575 defb 0x02,"0x"
9578 defw type_cfa
957A defw base_cfa
957C defw store_cfa
957E defw semicolon_s_cfa
; [DASMZ80 ZONE] NHEX._pfa: start 0x955D end 0x9580 type pointers

952A  BHEX._nfa: 
952A defb 0x05+0x80,"BHEX","."+0x80
; [DASMZ80 ZONE] BHEX._nfa: start 0x952A end 0x9530 type bytedata
9530  BHEX._lfa: 
9530 defw MARGIN_nfa
; [DASMZ80 ZONE] BHEX._lfa: start 0x9530 end 0x9532 type pointers
9532  BHEX._cfa: 
9532 defw 0x6306
; [DASMZ80 ZONE] BHEX._cfa: start 0x9532 end 0x9534 type pointers
9534  BHEX._pfa: 
9534 defw base_cfa
9536 defw fetch_cfa
9538 defw hex_cfa
953A defw swap_cfa
953C defw s_to_d_cfa
953E defw less_hash_cfa
9540 defw hash_cfa
9542 defw hash_cfa
9544 defw hash_greater_cfa
9546 defw paren_dot_quote_cfa
9548 defb 0x02,"0x"
954B defw type_cfa
954D defw base_cfa
954F defw store_cfa
9551 defw semicolon_s_cfa
; [DASMZ80 ZONE] BHEX._pfa: start 0x9534 end 0x9553 type pointers

950B  MARGIN_nfa: 
950B defb 0x06+0x80,"MARGI","N"+0x80
; [DASMZ80 ZONE] MARGIN_nfa: start 0x950B end 0x9512 type bytedata
9512  MARGIN_lfa: 
9512 defw ADDRESS_nfa
; [DASMZ80 ZONE] MARGIN_lfa: start 0x9512 end 0x9514 type pointers
9514  MARGIN_cfa: 
9514 defw 0x6306
; [DASMZ80 ZONE] MARGIN_cfa: start 0x9514 end 0x9516 type pointers
9516  MARGIN_pfa: 
9516 defw lit_cfa,0x0005
951A defw base_cfa
951C defw fetch_cfa
951E defw lit_cfa,0x000A
9522 defw equals_cfa
9524 defw plus_cfa
9526 defw spaces_cfa
9528 defw semicolon_s_cfa
; [DASMZ80 ZONE] MARGIN_pfa: start 0x9516 end 0x952A type pointers

94F9  ADDRESS_nfa: 
94F9 defb 0x07+0x80,"ADDRES","S"+0x80
; [DASMZ80 ZONE] ADDRESS_nfa: start 0x94F9 end 0x9501 type bytedata
9501  ADDRESS_lfa: 
9501 defw S+_nfa
; [DASMZ80 ZONE] ADDRESS_lfa: start 0x9501 end 0x9503 type pointers
9503  ADDRESS_cfa: 
9503 defw 0x6306
; [DASMZ80 ZONE] ADDRESS_cfa: start 0x9503 end 0x9505 type pointers
9505  ADDRESS_pfa: 
9505 defw cr_cfa
9507 defw u_dot_cfa
9509 defw semicolon_s_cfa
; [DASMZ80 ZONE] ADDRESS_pfa: start 0x9505 end 0x950B type pointers

94D2  S+_nfa: 
94D2 defb 0x02+0x80,"S","+"+0x80
; [DASMZ80 ZONE] S+_nfa: start 0x94D2 end 0x94D5 type bytedata
94D5  S+_lfa: 
94D5 defw SMOVE_nfa
; [DASMZ80 ZONE] S+_lfa: start 0x94D5 end 0x94D7 type pointers
94D7  S+_cfa: 
94D7 defw 0x6306
; [DASMZ80 ZONE] S+_cfa: start 0x94D7 end 0x94D9 type pointers
94D9  S+_pfa: 
94D9 defw LENGTHS_cfa
94DB defw plus_cfa
94DD defw to_r_cfa
94DF defw r_cfa
94E1 defw ALLOCATE-STRING_cfa
94E3 defw to_r_cfa
94E5 defw two_cfa
94E7 defw PICK_cfa
94E9 defw r_cfa
94EB defw plus_cfa
94ED defw SMOVE_cfa
94EF defw r_cfa
94F1 defw SMOVE_cfa
94F3 defw from_r_cfa
94F5 defw from_r_cfa
94F7 defw semicolon_s_cfa
; [DASMZ80 ZONE] S+_pfa: start 0x94D9 end 0x94F9 type pointers

94C2  SMOVE_nfa: 
94C2 defb 0x05+0x80,"SMOV","E"+0x80
; [DASMZ80 ZONE] SMOVE_nfa: start 0x94C2 end 0x94C8 type bytedata
94C8  SMOVE_lfa: 
94C8 defw SAVE-COUNTED-STRING_nfa
; [DASMZ80 ZONE] SMOVE_lfa: start 0x94C8 end 0x94CA type pointers
94CA  SMOVE_cfa: 
94CA defw 0x6306
; [DASMZ80 ZONE] SMOVE_cfa: start 0x94CA end 0x94CC type pointers
94CC  SMOVE_pfa: 
94CC defw swap_cfa
94CE defw MOVE_cfa
94D0 defw semicolon_s_cfa
; [DASMZ80 ZONE] SMOVE_pfa: start 0x94CC end 0x94D2 type pointers

939A  SAVE-COUNTED-STRING_nfa: 
939A defb 0x13+0x80,"SAVE-COUNTED-STRIN","G"+0x80
; [DASMZ80 ZONE] SAVE-COUNTED-STRING_nfa: start 0x939A end 0x93AE type bytedata
93AE  SAVE-COUNTED-STRING_lfa: 
93AE defw SAVE-STRING_nfa
; [DASMZ80 ZONE] SAVE-COUNTED-STRING_lfa: start 0x93AE end 0x93B0 type pointers
93B0  SAVE-COUNTED-STRING_cfa: 
93B0 defw 0x6306
; [DASMZ80 ZONE] SAVE-COUNTED-STRING_cfa: start 0x93B0 end 0x93B2 type pointers
93B2  SAVE-COUNTED-STRING_pfa: 
93B2 defw dup_cfa
93B4 defw one_plus_cfa
93B6 defw ALLOCATE-STRING_cfa
93B8 defw dup_cfa
93BA defw to_r_cfa
93BC defw PLACE_cfa
93BE defw from_r_cfa
93C0 defw semicolon_s_cfa
; [DASMZ80 ZONE] SAVE-COUNTED-STRING_pfa: start 0x93B2 end 0x93C2 type pointers

937A  SAVE-STRING_nfa: 
937A defb 0x0B+0x80,"SAVE-STRIN","G"+0x80
; [DASMZ80 ZONE] SAVE-STRING_nfa: start 0x937A end 0x9386 type bytedata
9386  SAVE-STRING_lfa: 
9386 defw ALLOT-CSB_nfa
; [DASMZ80 ZONE] SAVE-STRING_lfa: start 0x9386 end 0x9388 type pointers
9388  SAVE-STRING_cfa: 
9388 defw 0x6306
; [DASMZ80 ZONE] SAVE-STRING_cfa: start 0x9388 end 0x938A type pointers
938A  SAVE-STRING_pfa: 
938A defw dup_cfa
938C defw ALLOCATE-STRING_cfa
938E defw swap_cfa
9390 defw two_dup_cfa
9392 defw 2>R_cfa
9394 defw MOVE_cfa
9396 defw 2R>_cfa
9398 defw semicolon_s_cfa
; [DASMZ80 ZONE] SAVE-STRING_pfa: start 0x938A end 0x939A type pointers

9360  ALLOT-CSB_nfa: 
9360 defb 0x09+0x80,"ALLOT-CS","B"+0x80
; [DASMZ80 ZONE] ALLOT-CSB_nfa: start 0x9360 end 0x936A type bytedata
936A  ALLOT-CSB_lfa: 
936A defw SET-CSB_nfa
; [DASMZ80 ZONE] ALLOT-CSB_lfa: start 0x936A end 0x936C type pointers
936C  ALLOT-CSB_cfa: 
936C defw 0x6306
; [DASMZ80 ZONE] ALLOT-CSB_cfa: start 0x936C end 0x936E type pointers
936E  ALLOT-CSB_pfa: 
936E defw here_cfa
9370 defw over_cfa
9372 defw allot_cfa
9374 defw swap_cfa
9376 defw SET-CSB_cfa
9378 defw semicolon_s_cfa
; [DASMZ80 ZONE] ALLOT-CSB_pfa: start 0x936E end 0x937A type pointers

9340  SET-CSB_nfa: 
9340 defb 0x07+0x80,"SET-CS","B"+0x80
; [DASMZ80 ZONE] SET-CSB_nfa: start 0x9340 end 0x9348 type bytedata
9348  SET-CSB_lfa: 
9348 defw ALLOCATE-STRING_nfa
; [DASMZ80 ZONE] SET-CSB_lfa: start 0x9348 end 0x934A type pointers
934A  SET-CSB_cfa: 
934A defw 0x6306
; [DASMZ80 ZONE] SET-CSB_cfa: start 0x934A end 0x934C type pointers
934C  SET-CSB_pfa: 
934C defw dup_cfa
934E defw lit_cfa,0x92DF
9352 defw store_cfa
9354 defw CSB-UNUSED_cfa
9356 defw store_cfa
9358 defw lit_cfa,0x92FB
935C defw store_cfa
935E defw semicolon_s_cfa
; [DASMZ80 ZONE] SET-CSB_pfa: start 0x934C end 0x9360 type pointers

9320  ALLOCATE-STRING_nfa: 
9320 defb 0x0F+0x80,"ALLOCATE-STRIN","G"+0x80
; [DASMZ80 ZONE] ALLOCATE-STRING_nfa: start 0x9320 end 0x9330 type bytedata
9330  ALLOCATE-STRING_lfa: 
9330 defw ?CSB_nfa
; [DASMZ80 ZONE] ALLOCATE-STRING_lfa: start 0x9330 end 0x9332 type pointers
9332  ALLOCATE-STRING_cfa: 
9332 defw 0x6306
; [DASMZ80 ZONE] ALLOCATE-STRING_cfa: start 0x9332 end 0x9334 type pointers
9334  ALLOCATE-STRING_pfa: 
9334 defw ?CSB_cfa
9336 defw CSB0_cfa
9338 defw CSB-UNUSED_cfa
933A defw fetch_cfa
933C defw plus_cfa
933E defw semicolon_s_cfa
; [DASMZ80 ZONE] ALLOCATE-STRING_pfa: start 0x9334 end 0x9340 type pointers

92FD  ?CSB_nfa: 
92FD defb 0x04+0x80,"?CS","B"+0x80
; [DASMZ80 ZONE] ?CSB_nfa: start 0x92FD end 0x9302 type bytedata
9302  ?CSB_lfa: 
9302 defw CSB0_nfa
; [DASMZ80 ZONE] ?CSB_lfa: start 0x9302 end 0x9304 type pointers
9304  ?CSB_cfa: 
9304 defw 0x6306
; [DASMZ80 ZONE] ?CSB_cfa: start 0x9304 end 0x9306 type pointers
9306  ?CSB_pfa: 
9306 defw dup_cfa
9308 defw CSB-UNUSED_cfa
930A defw fetch_cfa
930C defw greater_than_cfa
930E defw zero_branch_cfa,0x0008; to 0x9318
9312 defw /CSB_cfa
9314 defw CSB-UNUSED_cfa
9316 defw store_cfa
9318 defw minus_cfa
931A defw CSB-UNUSED_cfa
931C defw plus_store_cfa
931E defw semicolon_s_cfa
; [DASMZ80 ZONE] ?CSB_pfa: start 0x9306 end 0x9320 type pointers

92F2  CSB0_nfa: 
92F2 defb 0x04+0x80,"CSB","0"+0x80
; [DASMZ80 ZONE] CSB0_nfa: start 0x92F2 end 0x92F7 type bytedata
92F7  CSB0_lfa: 
92F7 defw CSB-UNUSED_nfa
; [DASMZ80 ZONE] CSB0_lfa: start 0x92F7 end 0x92F9 type pointers
92F9  CSB0_cfa: 
92F9 defw 0x6348
; [DASMZ80 ZONE] CSB0_cfa: start 0x92F9 end 0x92FB type pointers
92FB  CSB0_pfa: 
92FB defw 0x93C2
; [DASMZ80 ZONE] CSB0_pfa: start 0x92FB end 0x92FD type worddata

92E1  CSB-UNUSED_nfa: 
92E1 defb 0x0A+0x80,"CSB-UNUSE","D"+0x80
; [DASMZ80 ZONE] CSB-UNUSED_nfa: start 0x92E1 end 0x92EC type bytedata
92EC  CSB-UNUSED_lfa: 
92EC defw /CSB_nfa
; [DASMZ80 ZONE] CSB-UNUSED_lfa: start 0x92EC end 0x92EE type pointers
92EE  CSB-UNUSED_cfa: 
92EE defw 0x6362
; [DASMZ80 ZONE] CSB-UNUSED_cfa: start 0x92EE end 0x92F0 type pointers
92F0  CSB-UNUSED_pfa: 
92F0 defw 0x001C
; [DASMZ80 ZONE] CSB-UNUSED_pfa: start 0x92F0 end 0x92F2 type worddata

92D6  /CSB_nfa: 
92D6 defb 0x04+0x80,"/CS","B"+0x80
; [DASMZ80 ZONE] /CSB_nfa: start 0x92D6 end 0x92DB type bytedata
92DB  /CSB_lfa: 
92DB defw 2R>_nfa
; [DASMZ80 ZONE] /CSB_lfa: start 0x92DB end 0x92DD type pointers
92DD  /CSB_cfa: 
92DD defw 0x6348
; [DASMZ80 ZONE] /CSB_cfa: start 0x92DD end 0x92DF type pointers
92DF  /CSB_pfa: 
92DF defw 0x0100
; [DASMZ80 ZONE] /CSB_pfa: start 0x92DF end 0x92E1 type worddata

92B9  2R>_nfa: 
92B9 defb 0x03+0x80,"2R",">"+0x80
; [DASMZ80 ZONE] 2R>_nfa: start 0x92B9 end 0x92BD type bytedata
92BD  2R>_lfa: 
92BD defw 2>R_nfa
; [DASMZ80 ZONE] 2R>_lfa: start 0x92BD end 0x92BF type pointers
92BF  2R>_cfa: 
92BF defw 2R>_pfa
; [DASMZ80 ZONE] 2R>_cfa: start 0x92BF end 0x92C1 type pointers
92C1  2R>_pfa: 
; [DASMZ80 ZONE] 2R>_cfa: start 0x92C1 end 0x92D6 type code

929C  2>R_nfa: 
929C defb 0x03+0x80,"2>","R"+0x80
; [DASMZ80 ZONE] 2>R_nfa: start 0x929C end 0x92A0 type bytedata
92A0  2>R_lfa: 
92A0 defw 2R_nfa
; [DASMZ80 ZONE] 2>R_lfa: start 0x92A0 end 0x92A2 type pointers
92A2  2>R_cfa: 
92A2 defw 2>R_pfa
; [DASMZ80 ZONE] 2>R_cfa: start 0x92A2 end 0x92A4 type pointers
92A4  2>R_pfa: 
; [DASMZ80 ZONE] 2>R_cfa: start 0x92A4 end 0x92B9 type code

9283  2R_nfa: 
9283 defb 0x02+0x80,"2","R"+0x80
; [DASMZ80 ZONE] 2R_nfa: start 0x9283 end 0x9286 type bytedata
9286  2R_lfa: 
9286 defw RP_nfa
; [DASMZ80 ZONE] 2R_lfa: start 0x9286 end 0x9288 type pointers
9288  2R_cfa: 
9288 defw 2R_pfa
; [DASMZ80 ZONE] 2R_cfa: start 0x9288 end 0x928A type pointers
928A  2R_pfa: 
; [DASMZ80 ZONE] 2R_cfa: start 0x928A end 0x929C type code

927A  RP_nfa: 
927A defb 0x02+0x80,"R","P"+0x80
; [DASMZ80 ZONE] RP_nfa: start 0x927A end 0x927D type bytedata
927D  RP_lfa: 
927D defw STR=_nfa
; [DASMZ80 ZONE] RP_lfa: start 0x927D end 0x927F type pointers
927F  RP_cfa: 
927F defw 0x6348
; [DASMZ80 ZONE] RP_cfa: start 0x927F end 0x9281 type pointers
9281  RP_pfa: 
9281 defw 0x5E68
; [DASMZ80 ZONE] RP_pfa: start 0x9281 end 0x9283 type worddata

9253  STR=_nfa: 
9253 defb 0x04+0x80,"STR","="+0x80
; [DASMZ80 ZONE] STR=_nfa: start 0x9253 end 0x9258 type bytedata
9258  STR=_lfa: 
9258 defw LENGTHS_nfa
; [DASMZ80 ZONE] STR=_lfa: start 0x9258 end 0x925A type pointers
925A  STR=_cfa: 
925A defw 0x6306
; [DASMZ80 ZONE] STR=_cfa: start 0x925A end 0x925C type pointers
925C  STR=_pfa: 
925C defw LENGTHS_cfa
925E defw minus_cfa
9260 defw zero_branch_cfa,0x000E; to 0x9270
9264 defw two_drop_cfa
9266 defw two_drop_cfa
9268 defw FALSE_cfa
926A defw exit_cfa
926C defw branch_cfa,0x000A; to 0x9278
9270 defw drop_cfa
9272 defw  minus_text_cfa
9274 defw zero_equals_cfa
9276 defw zero_equals_cfa
9278 defw semicolon_s_cfa
; [DASMZ80 ZONE] STR=_pfa: start 0x925C end 0x927A type pointers

923F  LENGTHS_nfa: 
923F defb 0x07+0x80,"LENGTH","S"+0x80
; [DASMZ80 ZONE] LENGTHS_nfa: start 0x923F end 0x9247 type bytedata
9247  LENGTHS_lfa: 
9247 defw S'_nfa
; [DASMZ80 ZONE] LENGTHS_lfa: start 0x9247 end 0x9249 type pointers
9249  LENGTHS_cfa: 
9249 defw 0x6306
; [DASMZ80 ZONE] LENGTHS_cfa: start 0x9249 end 0x924B type pointers
924B  LENGTHS_pfa: 
924B defw two_cfa
924D defw PICK_cfa
924F defw over_cfa
9251 defw semicolon_s_cfa
; [DASMZ80 ZONE] LENGTHS_pfa: start 0x924B end 0x9253 type pointers

9230  S'_nfa: 
9230 defb 0x02+0x80+0x40,"S","'"+0x80
; [DASMZ80 ZONE] S'_nfa: start 0x9230 end 0x9233 type bytedata
9233  S'_lfa: 
9233 defw S"_nfa
; [DASMZ80 ZONE] S'_lfa: start 0x9233 end 0x9235 type pointers
9235  S'_cfa: 
9235 defw 0x6306
; [DASMZ80 ZONE] S'_cfa: start 0x9235 end 0x9237 type pointers
9237  S'_pfa: 
9237 defw lit_cfa,0x0027
923B defw (S)_cfa
923D defw semicolon_s_cfa
; [DASMZ80 ZONE] S'_pfa: start 0x9237 end 0x923F type pointers

9221  S"_nfa: 
9221 defb 0x02+0x80+0x40,"S","""+0x80
; [DASMZ80 ZONE] S"_nfa: start 0x9221 end 0x9224 type bytedata
9224  S"_lfa: 
9224 defw (S)_nfa
; [DASMZ80 ZONE] S"_lfa: start 0x9224 end 0x9226 type pointers
9226  S"_cfa: 
9226 defw 0x6306
; [DASMZ80 ZONE] S"_cfa: start 0x9226 end 0x9228 type pointers
9228  S"_pfa: 
9228 defw lit_cfa,0x0022
922C defw (S)_cfa
922E defw semicolon_s_cfa
; [DASMZ80 ZONE] S"_pfa: start 0x9228 end 0x9230 type pointers

91FB  (S)_nfa: 
91FB defb 0x03+0x80,"(S",")"+0x80
; [DASMZ80 ZONE] (S)_nfa: start 0x91FB end 0x91FF type bytedata
91FF  (S)_lfa: 
91FF defw /STRING_nfa
; [DASMZ80 ZONE] (S)_lfa: start 0x91FF end 0x9201 type pointers
9201  (S)_cfa: 
9201 defw 0x6306
; [DASMZ80 ZONE] (S)_cfa: start 0x9201 end 0x9203 type pointers
9203  (S)_pfa: 
9203 defw state_cfa
9205 defw fetch_cfa
9207 defw zero_branch_cfa,0x0014; to 0x921D
920B defw compile_cfa,SLIT_cfa
920F defw word_cfa
9211 defw here_cfa
9213 defw c_fetch_cfa
9215 defw one_plus_cfa
9217 defw allot_cfa
9219 defw branch_cfa,0x0004; to 0x921F
921D defw PARSE-TEXT_cfa
921F defw semicolon_s_cfa
; [DASMZ80 ZONE] (S)_pfa: start 0x9203 end 0x9221 type pointers

91DF  /STRING_nfa: 
91DF defb 0x07+0x80,"/STRIN","G"+0x80
; [DASMZ80 ZONE] /STRING_nfa: start 0x91DF end 0x91E7 type bytedata
91E7  /STRING_lfa: 
91E7 defw +PLACE_nfa
; [DASMZ80 ZONE] /STRING_lfa: start 0x91E7 end 0x91E9 type pointers
91E9  /STRING_cfa: 
91E9 defw 0x6306
; [DASMZ80 ZONE] /STRING_cfa: start 0x91E9 end 0x91EB type pointers
91EB  /STRING_pfa: 
91EB defw dup_cfa
91ED defw to_r_cfa
91EF defw minus_cfa
91F1 defw swap_cfa
91F3 defw from_r_cfa
91F5 defw plus_cfa
91F7 defw swap_cfa
91F9 defw semicolon_s_cfa
; [DASMZ80 ZONE] /STRING_pfa: start 0x91EB end 0x91FB type pointers

91BC  +PLACE_nfa: 
91BC defb 0x06+0x80,"+PLAC","E"+0x80
; [DASMZ80 ZONE] +PLACE_nfa: start 0x91BC end 0x91C3 type bytedata
91C3  +PLACE_lfa: 
91C3 defw PLACE_nfa
; [DASMZ80 ZONE] +PLACE_lfa: start 0x91C3 end 0x91C5 type pointers
91C5  +PLACE_cfa: 
91C5 defw 0x6306
; [DASMZ80 ZONE] +PLACE_cfa: start 0x91C5 end 0x91C7 type pointers
91C7  +PLACE_pfa: 
91C7 defw two_dup_cfa
91C9 defw c_fetch_cfa
91CB defw plus_cfa
91CD defw over_cfa
91CF defw c_store_cfa
91D1 defw dup_cfa
91D3 defw c_fetch_cfa
91D5 defw one_plus_cfa
91D7 defw plus_cfa
91D9 defw swap_cfa
91DB defw MOVE_cfa
91DD defw semicolon_s_cfa
; [DASMZ80 ZONE] +PLACE_pfa: start 0x91C7 end 0x91DF type pointers

91A6  PLACE_nfa: 
91A6 defb 0x05+0x80,"PLAC","E"+0x80
; [DASMZ80 ZONE] PLACE_nfa: start 0x91A6 end 0x91AC type bytedata
91AC  PLACE_lfa: 
91AC defw SLITERAL_nfa
; [DASMZ80 ZONE] PLACE_lfa: start 0x91AC end 0x91AE type pointers
91AE  PLACE_cfa: 
91AE defw 0x6306
; [DASMZ80 ZONE] PLACE_cfa: start 0x91AE end 0x91B0 type pointers
91B0  PLACE_pfa: 
91B0 defw two_dup_cfa
91B2 defw c_store_cfa
91B4 defw one_plus_cfa
91B6 defw swap_cfa
91B8 defw MOVE_cfa
91BA defw semicolon_s_cfa
; [DASMZ80 ZONE] PLACE_pfa: start 0x91B0 end 0x91BC type pointers

9191  SLITERAL_nfa: 
9191 defb 0x08+0x80+0x40,"SLITERA","L"+0x80
; [DASMZ80 ZONE] SLITERAL_nfa: start 0x9191 end 0x919A type bytedata
919A  SLITERAL_lfa: 
919A defw S,_nfa
; [DASMZ80 ZONE] SLITERAL_lfa: start 0x919A end 0x919C type pointers
919C  SLITERAL_cfa: 
919C defw 0x6306
; [DASMZ80 ZONE] SLITERAL_cfa: start 0x919C end 0x919E type pointers
919E  SLITERAL_pfa: 
919E defw compile_cfa,SLIT_cfa
91A2 defw S,_cfa
91A4 defw semicolon_s_cfa
; [DASMZ80 ZONE] SLITERAL_pfa: start 0x919E end 0x91A6 type pointers

917C  S,_nfa: 
917C defb 0x02+0x80,"S",","+0x80
; [DASMZ80 ZONE] S,_nfa: start 0x917C end 0x917F type bytedata
917F  S,_lfa: 
917F defw SLIT_nfa
; [DASMZ80 ZONE] S,_lfa: start 0x917F end 0x9181 type pointers
9181  S,_cfa: 
9181 defw 0x6306
; [DASMZ80 ZONE] S,_cfa: start 0x9181 end 0x9183 type pointers
9183  S,_pfa: 
9183 defw swap_cfa
9185 defw here_cfa
9187 defw rot_cfa
9189 defw cmove_cfa
918B defw one_plus_cfa
918D defw allot_cfa
918F defw semicolon_s_cfa
; [DASMZ80 ZONE] S,_pfa: start 0x9183 end 0x9191 type pointers

9163  SLIT_nfa: 
9163 defb 0x04+0x80,"SLI","T"+0x80
; [DASMZ80 ZONE] SLIT_nfa: start 0x9163 end 0x9168 type bytedata
9168  SLIT_lfa: 
9168 defw PARSE-NAME_nfa
; [DASMZ80 ZONE] SLIT_lfa: start 0x9168 end 0x916A type pointers
916A  SLIT_cfa: 
916A defw 0x6306
; [DASMZ80 ZONE] SLIT_cfa: start 0x916A end 0x916C type pointers
916C  SLIT_pfa: 
916C defw r_cfa
916E defw count_cfa
9170 defw dup_cfa
9172 defw one_plus_cfa
9174 defw from_r_cfa
9176 defw plus_cfa
9178 defw to_r_cfa
917A defw semicolon_s_cfa
; [DASMZ80 ZONE] SLIT_pfa: start 0x916C end 0x917C type pointers

914E  PARSE-NAME_nfa: 
914E defb 0x0A+0x80,"PARSE-NAM","E"+0x80
; [DASMZ80 ZONE] PARSE-NAME_nfa: start 0x914E end 0x9159 type bytedata
9159  PARSE-NAME_lfa: 
9159 defw PARSE-TEXT_nfa
; [DASMZ80 ZONE] PARSE-NAME_lfa: start 0x9159 end 0x915B type pointers
915B  PARSE-NAME_cfa: 
915B defw 0x6306
; [DASMZ80 ZONE] PARSE-NAME_cfa: start 0x915B end 0x915D type pointers
915D  PARSE-NAME_pfa: 
915D defw b_l_cfa
915F defw PARSE-TEXT_cfa
9161 defw semicolon_s_cfa
; [DASMZ80 ZONE] PARSE-NAME_pfa: start 0x915D end 0x9163 type pointers

9137  PARSE-TEXT_nfa: 
9137 defb 0x0A+0x80,"PARSE-TEX","T"+0x80
; [DASMZ80 ZONE] PARSE-TEXT_nfa: start 0x9137 end 0x9142 type bytedata
9142  PARSE-TEXT_lfa: 
9142 defw PICK_nfa
; [DASMZ80 ZONE] PARSE-TEXT_lfa: start 0x9142 end 0x9144 type pointers
9144  PARSE-TEXT_cfa: 
9144 defw 0x6306
; [DASMZ80 ZONE] PARSE-TEXT_cfa: start 0x9144 end 0x9146 type pointers
9146  PARSE-TEXT_pfa: 
9146 defw text_cfa
9148 defw pad_cfa
914A defw count_cfa
914C defw semicolon_s_cfa
; [DASMZ80 ZONE] PARSE-TEXT_pfa: start 0x9146 end 0x914E type pointers

9124  PICK_nfa: 
9124 defb 0x04+0x80,"PIC","K"+0x80
; [DASMZ80 ZONE] PICK_nfa: start 0x9124 end 0x9129 type bytedata
9129  PICK_lfa: 
9129 defw ?EXIT_nfa
; [DASMZ80 ZONE] PICK_lfa: start 0x9129 end 0x912B type pointers
912B  PICK_cfa: 
912B defw PICK_pfa
; [DASMZ80 ZONE] PICK_cfa: start 0x912B end 0x912D type pointers
912D  PICK_pfa: 
; [DASMZ80 ZONE] PICK_cfa: start 0x912D end 0x9137 type code

9110  ?EXIT_nfa: 
9110 defb 0x05+0x80+0x40,"?EXI","T"+0x80
; [DASMZ80 ZONE] ?EXIT_nfa: start 0x9110 end 0x9116 type bytedata
9116  ?EXIT_lfa: 
9116 defw OFF_nfa
; [DASMZ80 ZONE] ?EXIT_lfa: start 0x9116 end 0x9118 type pointers
9118  ?EXIT_cfa: 
9118 defw 0x6306
; [DASMZ80 ZONE] ?EXIT_cfa: start 0x9118 end 0x911A type pointers
911A  ?EXIT_pfa: 
911A defw if_cfa
911C defw compile_cfa,EXIT_cfa
9120 defw then_cfa
9122 defw semicolon_s_cfa
; [DASMZ80 ZONE] ?EXIT_pfa: start 0x911A end 0x9124 type pointers

9100  OFF_nfa: 
9100 defb 0x03+0x80,"OF","F"+0x80
; [DASMZ80 ZONE] OFF_nfa: start 0x9100 end 0x9104 type bytedata
9104  OFF_lfa: 
9104 defw ON_nfa
; [DASMZ80 ZONE] OFF_lfa: start 0x9104 end 0x9106 type pointers
9106  OFF_cfa: 
9106 defw OFF_pfa
; [DASMZ80 ZONE] OFF_cfa: start 0x9106 end 0x9108 type pointers
9108  OFF_pfa: 
; [DASMZ80 ZONE] OFF_cfa: start 0x9108 end 0x9110 type code

90F0  ON_nfa: 
90F0 defb 0x02+0x80,"O","N"+0x80
; [DASMZ80 ZONE] ON_nfa: start 0x90F0 end 0x90F3 type bytedata
90F3  ON_lfa: 
90F3 defw TRUE_nfa
; [DASMZ80 ZONE] ON_lfa: start 0x90F3 end 0x90F5 type pointers
90F5  ON_cfa: 
90F5 defw ON_pfa
; [DASMZ80 ZONE] ON_cfa: start 0x90F5 end 0x90F7 type pointers
90F7  ON_pfa: 
; [DASMZ80 ZONE] ON_cfa: start 0x90F7 end 0x9100 type code

90E5  TRUE_nfa: 
90E5 defb 0x04+0x80,"TRU","E"+0x80
; [DASMZ80 ZONE] TRUE_nfa: start 0x90E5 end 0x90EA type bytedata
90EA  TRUE_lfa: 
90EA defw FALSE_nfa
; [DASMZ80 ZONE] TRUE_lfa: start 0x90EA end 0x90EC type pointers
90EC  TRUE_cfa: 
90EC defw 0x6348
; [DASMZ80 ZONE] TRUE_cfa: start 0x90EC end 0x90EE type pointers
90EE  TRUE_pfa: 
90EE defw 0x0001
; [DASMZ80 ZONE] TRUE_pfa: start 0x90EE end 0x90F0 type worddata

90D9  FALSE_nfa: 
90D9 defb 0x05+0x80,"FALS","E"+0x80
; [DASMZ80 ZONE] FALSE_nfa: start 0x90D9 end 0x90DF type bytedata
90DF  FALSE_lfa: 
90DF defw MOVE_nfa
; [DASMZ80 ZONE] FALSE_lfa: start 0x90DF end 0x90E1 type pointers
90E1  FALSE_cfa: 
90E1 defw 0x6348
; [DASMZ80 ZONE] FALSE_cfa: start 0x90E1 end 0x90E3 type pointers
90E3  FALSE_pfa: 
90E3 defw 0x0000
; [DASMZ80 ZONE] FALSE_pfa: start 0x90E3 end 0x90E5 type worddata

90B6  MOVE_nfa: 
90B6 defb 0x04+0x80,"MOV","E"+0x80
; [DASMZ80 ZONE] MOVE_nfa: start 0x90B6 end 0x90BB type bytedata
90BB  MOVE_lfa: 
90BB defw CMOVE>_nfa
; [DASMZ80 ZONE] MOVE_lfa: start 0x90BB end 0x90BD type pointers
90BD  MOVE_cfa: 
90BD defw 0x6306
; [DASMZ80 ZONE] MOVE_cfa: start 0x90BD end 0x90BF type pointers
90BF  MOVE_pfa: 
90BF defw to_r_cfa
90C1 defw two_dup_cfa
90C3 defw minus_cfa
90C5 defw zero_less_than_cfa
90C7 defw zero_branch_cfa,0x000A; to 0x90D3
90CB defw from_r_cfa
90CD defw CMOVE>_cfa
90CF defw branch_cfa,0x0006; to 0x90D7
90D3 defw from_r_cfa
90D5 defw cmove_cfa
90D7 defw semicolon_s_cfa
; [DASMZ80 ZONE] MOVE_pfa: start 0x90BF end 0x90D9 type pointers

9097  CMOVE>_nfa: 
9097 defb 0x06+0x80,"CMOVE",">"+0x80
; [DASMZ80 ZONE] CMOVE>_nfa: start 0x9097 end 0x909E type bytedata
909E  CMOVE>_lfa: 
909E defw -CASEINS_nfa
; [DASMZ80 ZONE] CMOVE>_lfa: start 0x909E end 0x90A0 type pointers
90A0  CMOVE>_cfa: 
90A0 defw CMOVE>_pfa
; [DASMZ80 ZONE] CMOVE>_cfa: start 0x90A0 end 0x90A2 type pointers
90A2  CMOVE>_pfa: 
; [DASMZ80 ZONE] CMOVE>_cfa: start 0x90A2 end 0x90B6 type code

907E  -CASEINS_nfa: 
907E defb 0x08+0x80,"-CASEIN","S"+0x80
; [DASMZ80 ZONE] -CASEINS_nfa: start 0x907E end 0x9087 type bytedata
9087  -CASEINS_lfa: 
9087 defw +CASEINS_nfa
; [DASMZ80 ZONE] -CASEINS_lfa: start 0x9087 end 0x9089 type pointers
9089  -CASEINS_cfa: 
9089 defw 0x6306
; [DASMZ80 ZONE] -CASEINS_cfa: start 0x9089 end 0x908B type pointers
908B  -CASEINS_pfa: 
908B defw lit_cfa,0x69CF
908F defw lit_cfa,0x6AC7
9093 defw store_cfa
9095 defw semicolon_s_cfa
; [DASMZ80 ZONE] -CASEINS_pfa: start 0x908B end 0x9097 type pointers

9065  +CASEINS_nfa: 
9065 defb 0x08+0x80,"+CASEIN","S"+0x80
; [DASMZ80 ZONE] +CASEINS_nfa: start 0x9065 end 0x906E type bytedata
906E  +CASEINS_lfa: 
906E defw UPPER-WORD_nfa
; [DASMZ80 ZONE] +CASEINS_lfa: start 0x906E end 0x9070 type pointers
9070  +CASEINS_cfa: 
9070 defw 0x6306
; [DASMZ80 ZONE] +CASEINS_cfa: start 0x9070 end 0x9072 type pointers
9072  +CASEINS_pfa: 
9072 defw lit_cfa,0x9059
9076 defw lit_cfa,0x6AC7
907A defw store_cfa
907C defw semicolon_s_cfa
; [DASMZ80 ZONE] +CASEINS_pfa: start 0x9072 end 0x907E type pointers

904C  UPPER-WORD_nfa: 
904C defb 0x0A+0x80,"UPPER-WOR","D"+0x80
; [DASMZ80 ZONE] UPPER-WORD_nfa: start 0x904C end 0x9057 type bytedata
9057  UPPER-WORD_lfa: 
9057 defw UPPERS_nfa
; [DASMZ80 ZONE] UPPER-WORD_lfa: start 0x9057 end 0x9059 type pointers
9059  UPPER-WORD_cfa: 
9059 defw 0x6306
; [DASMZ80 ZONE] UPPER-WORD_cfa: start 0x9059 end 0x905B type pointers
905B  UPPER-WORD_pfa: 
905B defw word_cfa
905D defw here_cfa
905F defw count_cfa
9061 defw UPPERS_cfa
9063 defw semicolon_s_cfa
; [DASMZ80 ZONE] UPPER-WORD_pfa: start 0x905B end 0x9065 type pointers

902D  UPPERS_nfa: 
902D defb 0x06+0x80,"UPPER","S"+0x80
; [DASMZ80 ZONE] UPPERS_nfa: start 0x902D end 0x9034 type bytedata
9034  UPPERS_lfa: 
9034 defw UPPERC_nfa
; [DASMZ80 ZONE] UPPERS_lfa: start 0x9034 end 0x9036 type pointers
9036  UPPERS_cfa: 
9036 defw 0x6306
; [DASMZ80 ZONE] UPPERS_cfa: start 0x9036 end 0x9038 type pointers
9038  UPPERS_pfa: 
9038 defw BOUNDS_cfa
903A defw paren_do_cfa
903C defw i_cfa
903E defw c_fetch_cfa
9040 defw UPPERC_cfa
9042 defw i_cfa
9044 defw c_store_cfa
9046 defw paren_loop_cfa,0xFFF4; to 0x903C
904A defw semicolon_s_cfa
; [DASMZ80 ZONE] UPPERS_pfa: start 0x9038 end 0x904C type pointers

9012  UPPERC_nfa: 
9012 defb 0x06+0x80,"UPPER","C"+0x80
; [DASMZ80 ZONE] UPPERC_nfa: start 0x9012 end 0x9019 type bytedata
9019  UPPERC_lfa: 
9019 defw (BANK-TAPE)_nfa
; [DASMZ80 ZONE] UPPERC_lfa: start 0x9019 end 0x901B type pointers
901B  UPPERC_cfa: 
901B defw UPPERC_pfa
; [DASMZ80 ZONE] UPPERC_cfa: start 0x901B end 0x901D type pointers
901D  UPPERC_pfa: 
; [DASMZ80 ZONE] UPPERC_cfa: start 0x901D end 0x902D type code

8FF6  (BANK-TAPE)_nfa: 
8FF6 defb 0x0B+0x80,"(BANK-TAPE",")"+0x80
; [DASMZ80 ZONE] (BANK-TAPE)_nfa: start 0x8FF6 end 0x9002 type bytedata
9002  (BANK-TAPE)_lfa: 
9002 defw (INIT-DISC)_nfa
; [DASMZ80 ZONE] (BANK-TAPE)_lfa: start 0x9002 end 0x9004 type pointers
9004  (BANK-TAPE)_cfa: 
9004 defw 0x6306
; [DASMZ80 ZONE] (BANK-TAPE)_cfa: start 0x9004 end 0x9006 type pointers
9006  (BANK-TAPE)_pfa: 
9006 defw DISC-BANK_cfa
9008 defw BANK_cfa
900A defw paren_tape_cfa
900C defw zero_cfa
900E defw BANK_cfa
9010 defw semicolon_s_cfa
; [DASMZ80 ZONE] (BANK-TAPE)_pfa: start 0x9006 end 0x9012 type pointers

8FDE  (INIT-DISC)_nfa: 
8FDE defb 0x0B+0x80,"(INIT-DISC",")"+0x80
; [DASMZ80 ZONE] (INIT-DISC)_nfa: start 0x8FDE end 0x8FEA type bytedata
8FEA  (INIT-DISC)_lfa: 
8FEA defw DISC-BANK_nfa
; [DASMZ80 ZONE] (INIT-DISC)_lfa: start 0x8FEA end 0x8FEC type pointers
8FEC  (INIT-DISC)_cfa: 
8FEC defw 0x6306
; [DASMZ80 ZONE] (INIT-DISC)_cfa: start 0x8FEC end 0x8FEE type pointers
8FEE  (INIT-DISC)_pfa: 
8FEE defw lo_cfa
8FF0 defw /DISC_cfa
8FF2 defw blanks_cfa
8FF4 defw semicolon_s_cfa
; [DASMZ80 ZONE] (INIT-DISC)_pfa: start 0x8FEE end 0x8FF6 type pointers

8FC2  DISC-BANK_nfa: 
8FC2 defb 0x09+0x80,"DISC-BAN","K"+0x80
; [DASMZ80 ZONE] DISC-BANK_nfa: start 0x8FC2 end 0x8FCC type bytedata
8FCC  DISC-BANK_lfa: 
8FCC defw DR1_nfa
; [DASMZ80 ZONE] DISC-BANK_lfa: start 0x8FCC end 0x8FCE type pointers
8FCE  DISC-BANK_cfa: 
8FCE defw 0x6306
; [DASMZ80 ZONE] DISC-BANK_cfa: start 0x8FCE end 0x8FD0 type pointers
8FD0  DISC-BANK_pfa: 
8FD0 defw one_cfa
8FD2 defw offset_cfa
8FD4 defw fetch_cfa
8FD6 defw two_cfa
8FD8 defw star_cfa
8FDA defw plus_cfa
8FDC defw semicolon_s_cfa
; [DASMZ80 ZONE] DISC-BANK_pfa: start 0x8FD0 end 0x8FDE type pointers

8FAE  DR1_nfa: 
8FAE defb 0x03+0x80,"DR","1"+0x80
; [DASMZ80 ZONE] DR1_nfa: start 0x8FAE end 0x8FB2 type bytedata
8FB2  DR1_lfa: 
8FB2 defw BANK_nfa
; [DASMZ80 ZONE] DR1_lfa: start 0x8FB2 end 0x8FB4 type pointers
8FB4  DR1_cfa: 
8FB4 defw 0x6306
; [DASMZ80 ZONE] DR1_cfa: start 0x8FB4 end 0x8FB6 type pointers
8FB6  DR1_pfa: 
8FB6 defw SCR/DR_cfa
8FB8 defw b_slash_scr_cfa
8FBA defw star_cfa
8FBC defw offset_cfa
8FBE defw store_cfa
8FC0 defw semicolon_s_cfa
; [DASMZ80 ZONE] DR1_pfa: start 0x8FB6 end 0x8FC2 type pointers

8F89  BANK_nfa: 
8F89 defb 0x04+0x80,"BAN","K"+0x80
; [DASMZ80 ZONE] BANK_nfa: start 0x8F89 end 0x8F8E type bytedata
8F8E  BANK_lfa: 
8F8E defw BANK1-PORT_nfa
; [DASMZ80 ZONE] BANK_lfa: start 0x8F8E end 0x8F90 type pointers
8F90  BANK_cfa: 
8F90 defw 0x6306
; [DASMZ80 ZONE] BANK_cfa: start 0x8F90 end 0x8F92 type pointers
8F92  BANK_pfa: 
8F92 defw -INTERRUPTS_cfa
8F94 defw SYS-BANKM_cfa
8F96 defw c_fetch_cfa
8F98 defw lit_cfa,0x00F8
8F9C defw and_cfa
8F9E defw or_cfa
8FA0 defw dup_cfa
8FA2 defw SYS-BANKM_cfa
8FA4 defw c_store_cfa
8FA6 defw BANK1-PORT_cfa
8FA8 defw outp_cfa
8FAA defw +INTERRUPTS_cfa
8FAC defw semicolon_s_cfa
; [DASMZ80 ZONE] BANK_pfa: start 0x8F92 end 0x8FAE type pointers

8F78  BANK1-PORT_nfa: 
8F78 defb 0x0A+0x80,"BANK1-POR","T"+0x80
; [DASMZ80 ZONE] BANK1-PORT_nfa: start 0x8F78 end 0x8F83 type bytedata
8F83  BANK1-PORT_lfa: 
8F83 defw SYS-BANKM_nfa
; [DASMZ80 ZONE] BANK1-PORT_lfa: start 0x8F83 end 0x8F85 type pointers
8F85  BANK1-PORT_cfa: 
8F85 defw 0x6348
; [DASMZ80 ZONE] BANK1-PORT_cfa: start 0x8F85 end 0x8F87 type pointers
8F87  BANK1-PORT_pfa: 
8F87 defw 0x7FFD
; [DASMZ80 ZONE] BANK1-PORT_pfa: start 0x8F87 end 0x8F89 type worddata

8F68  SYS-BANKM_nfa: 
8F68 defb 0x09+0x80,"SYS-BANK","M"+0x80
; [DASMZ80 ZONE] SYS-BANKM_nfa: start 0x8F68 end 0x8F72 type bytedata
8F72  SYS-BANKM_lfa: 
8F72 defw +INTERRUPTS_nfa
; [DASMZ80 ZONE] SYS-BANKM_lfa: start 0x8F72 end 0x8F74 type pointers
8F74  SYS-BANKM_cfa: 
8F74 defw 0x6348
; [DASMZ80 ZONE] SYS-BANKM_cfa: start 0x8F74 end 0x8F76 type pointers
8F76  SYS-BANKM_pfa: 
8F76 defw 0x5B5C
; [DASMZ80 ZONE] SYS-BANKM_pfa: start 0x8F76 end 0x8F78 type worddata

8F54  +INTERRUPTS_nfa: 
8F54 defb 0x0B+0x80,"+INTERRUPT","S"+0x80
; [DASMZ80 ZONE] +INTERRUPTS_nfa: start 0x8F54 end 0x8F60 type bytedata
8F60  +INTERRUPTS_lfa: 
8F60 defw -INTERRUPTS_nfa
; [DASMZ80 ZONE] +INTERRUPTS_lfa: start 0x8F60 end 0x8F62 type pointers
8F62  +INTERRUPTS_cfa: 
8F62 defw +INTERRUPTS_pfa
; [DASMZ80 ZONE] +INTERRUPTS_cfa: start 0x8F62 end 0x8F64 type pointers
8F64  +INTERRUPTS_pfa: 
; [DASMZ80 ZONE] +INTERRUPTS_cfa: start 0x8F64 end 0x8F68 type code

8F40  -INTERRUPTS_nfa: 
8F40 defb 0x0B+0x80,"-INTERRUPT","S"+0x80
; [DASMZ80 ZONE] -INTERRUPTS_nfa: start 0x8F40 end 0x8F4C type bytedata
8F4C  -INTERRUPTS_lfa: 
8F4C defw DECODE_nfa
; [DASMZ80 ZONE] -INTERRUPTS_lfa: start 0x8F4C end 0x8F4E type pointers
8F4E  -INTERRUPTS_cfa: 
8F4E defw -INTERRUPTS_pfa
; [DASMZ80 ZONE] -INTERRUPTS_cfa: start 0x8F4E end 0x8F50 type pointers
8F50  -INTERRUPTS_pfa: 
; [DASMZ80 ZONE] -INTERRUPTS_cfa: start 0x8F50 end 0x8F54 type code

899F  DECODE_nfa: 
899F defb 0x06+0x80,"DECOD","E"+0x80
; [DASMZ80 ZONE] DECODE_nfa: start 0x899F end 0x89A6 type bytedata
89A6  DECODE_lfa: 
89A6 defw DECODE-USAGE_nfa
; [DASMZ80 ZONE] DECODE_lfa: start 0x89A6 end 0x89A8 type pointers
89A8  DECODE_cfa: 
89A8 defw 0x6306
; [DASMZ80 ZONE] DECODE_cfa: start 0x89A8 end 0x89AA type pointers
89AA  DECODE_pfa: 
89AA defw DECODE-USAGE_cfa
89AC defw minus_find_cfa
89AE defw zero_branch_cfa,0x0010; to 0x89C0
89B2 defw drop_cfa
89B4 defw zero_cfa
89B6 defw DECODE-LEVEL_cfa
89B8 defw store_cfa
89BA defw (DECODE)_cfa
89BC defw branch_cfa,0x000E; to 0x89CC
89C0 defw paren_dot_quote_cfa
89C2 defb 0x09,"Not Found"
89CC defw semicolon_s_cfa
; [DASMZ80 ZONE] DECODE_pfa: start 0x89AA end 0x89CE type pointers

895E  DECODE-USAGE_nfa: 
895E defb 0x0C+0x80,"DECODE-USAG","E"+0x80
; [DASMZ80 ZONE] DECODE-USAGE_nfa: start 0x895E end 0x896B type bytedata
896B  DECODE-USAGE_lfa: 
896B defw (DECODE)_nfa
; [DASMZ80 ZONE] DECODE-USAGE_lfa: start 0x896B end 0x896D type pointers
896D  DECODE-USAGE_cfa: 
896D defw 0x6306
; [DASMZ80 ZONE] DECODE-USAGE_cfa: start 0x896D end 0x896F type pointers
896F  DECODE-USAGE_pfa: 
896F defw cr_cfa
8971 defw paren_dot_quote_cfa
8973 defb 0x27,"Keys: Space=more, Q=quit, other=deeper."
899B defw cr_cfa
899D defw semicolon_s_cfa
; [DASMZ80 ZONE] DECODE-USAGE_pfa: start 0x896F end 0x899F type pointers

88AC  (DECODE)_nfa: 
88AC defb 0x08+0x80,"(DECODE",")"+0x80
; [DASMZ80 ZONE] (DECODE)_nfa: start 0x88AC end 0x88B5 type bytedata
88B5  (DECODE)_lfa: 
88B5 defw COLON-PFA?_nfa
; [DASMZ80 ZONE] (DECODE)_lfa: start 0x88B5 end 0x88B7 type pointers
88B7  (DECODE)_cfa: 
88B7 defw 0x6306
; [DASMZ80 ZONE] (DECODE)_cfa: start 0x88B7 end 0x88B9 type pointers
88B9  (DECODE)_pfa: 
88B9 defw dup_cfa
88BB defw COLON-PFA?_cfa
88BD defw zero_branch_cfa,0x0081; to 0x8940
88C1 defw dup_cfa
88C3 defw nfa_cfa
88C5 defw DECODE-ADDRESS_cfa
88C7 defw store_cfa
88C9 defw INDENT_cfa
88CB defw paren_dot_quote_cfa
88CD defb 0x02,": "
88D0 defw dup_cfa
88D2 defw nfa_cfa
88D4 defw id_dot_cfa
88D6 defw dup_cfa
88D8 defw DECODE-ADDRESS_cfa
88DA defw store_cfa
88DC defw dup_cfa
88DE defw fetch_cfa
88E0 defw dup_cfa
88E2 defw DECODE-END?_cfa
88E4 defw zero_equals_cfa
88E6 defw zero_branch_cfa,0x004C; to 0x8934
88EA defw two_plus_cfa
88EC defw dup_cfa
88EE defw INDENT+_cfa
88F0 defw nfa_cfa
88F2 defw id_dot_cfa
88F4 defw key_cfa
88F6 defw lit_cfa,0x0051
88FA defw over_cfa
88FC defw equals_cfa
88FE defw zero_branch_cfa,0x000C; to 0x890C
8902 defw drop_cfa
8904 defw sp_store_cfa
8906 defw quit_cfa
8908 defw branch_cfa,0x001A; to 0x8924
890C defw b_l_cfa
890E defw over_cfa
8910 defw equals_cfa
8912 defw zero_branch_cfa,0x000A; to 0x891E
8916 defw drop_cfa
8918 defw drop_cfa
891A defw branch_cfa,0x0008; to 0x8924
891E defw swap_cfa
8920 defw (DECODE)_cfa
8922 defw drop_cfa
8924 defw DECODE-SPECIAL-CASES_cfa
8926 defw two_plus_cfa
8928 defw lit_cfa,0xFFFF
892C defw DECODE-LEVEL_cfa
892E defw plus_store_cfa
8930 defw branch_cfa,0xFFA4; to 0x88D6
8934 defw INDENT_cfa
8936 defw two_plus_cfa
8938 defw nfa_cfa
893A defw id_dot_cfa
893C defw branch_cfa,0x001C; to 0x895A
8940 defw paren_dot_quote_cfa
8942 defb 0x17,"Not a colon definition."
895A defw drop_cfa
895C defw semicolon_s_cfa
; [DASMZ80 ZONE] (DECODE)_pfa: start 0x88B9 end 0x895E type pointers

888D  COLON-PFA?_nfa: 
888D defb 0x0A+0x80,"COLON-PFA","?"+0x80
; [DASMZ80 ZONE] COLON-PFA?_nfa: start 0x888D end 0x8898 type bytedata
8898  COLON-PFA?_lfa: 
8898 defw DECODE-END?_nfa
; [DASMZ80 ZONE] COLON-PFA?_lfa: start 0x8898 end 0x889A type pointers
889A  COLON-PFA?_cfa: 
889A defw 0x6306
; [DASMZ80 ZONE] COLON-PFA?_cfa: start 0x889A end 0x889C type pointers
889C  COLON-PFA?_pfa: 
889C defw cfa_cfa
889E defw fetch_cfa
88A0 defw lit_cfa,0x62F4
88A4 defw cfa_cfa
88A6 defw fetch_cfa
88A8 defw equals_cfa
88AA defw semicolon_s_cfa
; [DASMZ80 ZONE] COLON-PFA?_pfa: start 0x889C end 0x88AC type pointers

8865  DECODE-END?_nfa: 
8865 defb 0x0B+0x80,"DECODE-END","?"+0x80
; [DASMZ80 ZONE] DECODE-END?_nfa: start 0x8865 end 0x8871 type bytedata
8871  DECODE-END?_lfa: 
8871 defw DECODE-SPECIAL-CASES_nfa
; [DASMZ80 ZONE] DECODE-END?_lfa: start 0x8871 end 0x8873 type pointers
8873  DECODE-END?_cfa: 
8873 defw 0x6306
; [DASMZ80 ZONE] DECODE-END?_cfa: start 0x8873 end 0x8875 type pointers
8875  DECODE-END?_pfa: 
8875 defw dup_cfa
8877 defw lit_cfa,0x614A
887B defw cfa_cfa
887D defw equals_cfa
887F defw swap_cfa
8881 defw lit_cfa,0x6770
8885 defw cfa_cfa
8887 defw equals_cfa
8889 defw or_cfa
888B defw semicolon_s_cfa
; [DASMZ80 ZONE] DECODE-END?_pfa: start 0x8875 end 0x888D type pointers

87B8  DECODE-SPECIAL-CASES_nfa: 
87B8 defb 0x14+0x80,"DECODE-SPECIAL-CASE","S"+0x80
; [DASMZ80 ZONE] DECODE-SPECIAL-CASES_nfa: start 0x87B8 end 0x87CD type bytedata
87CD  DECODE-SPECIAL-CASES_lfa: 
87CD defw DECODE-DOT-QUOTE_nfa
; [DASMZ80 ZONE] DECODE-SPECIAL-CASES_lfa: start 0x87CD end 0x87CF type pointers
87CF  DECODE-SPECIAL-CASES_cfa: 
87CF defw 0x6306
; [DASMZ80 ZONE] DECODE-SPECIAL-CASES_cfa: start 0x87CF end 0x87D1 type pointers
87D1  DECODE-SPECIAL-CASES_pfa: 
87D1 defw dup_cfa
87D3 defw fetch_cfa
87D5 defw lit_cfa,0x66F7
87D9 defw over_cfa
87DB defw equals_cfa
87DD defw zero_branch_cfa,0x000A; to 0x87E9
87E1 defw drop_cfa
87E3 defw DECODE-COMPILE_cfa
87E5 defw branch_cfa,0x007C; to 0x8863
87E9 defw lit_cfa,0x5E7D
87ED defw over_cfa
87EF defw equals_cfa
87F1 defw zero_branch_cfa,0x000A; to 0x87FD
87F5 defw drop_cfa
87F7 defw DECODE-LITERAL_cfa
87F9 defw branch_cfa,0x0068; to 0x8863
87FD defw lit_cfa,0x5EA1
8801 defw over_cfa
8803 defw equals_cfa
8805 defw zero_branch_cfa,0x000A; to 0x8811
8809 defw drop_cfa
880B defw DECODE-BRANCH_cfa
880D defw branch_cfa,0x0054; to 0x8863
8811 defw lit_cfa,0x5EB9
8815 defw over_cfa
8817 defw equals_cfa
8819 defw zero_branch_cfa,0x000A; to 0x8825
881D defw drop_cfa
881F defw DECODE-BRANCH_cfa
8821 defw branch_cfa,0x0040; to 0x8863
8825 defw lit_cfa,0x5ECE
8829 defw over_cfa
882B defw equals_cfa
882D defw zero_branch_cfa,0x000A; to 0x8839
8831 defw drop_cfa
8833 defw DECODE-BRANCH_cfa
8835 defw branch_cfa,0x002C; to 0x8863
8839 defw lit_cfa,0x5F08
883D defw over_cfa
883F defw equals_cfa
8841 defw zero_branch_cfa,0x000A; to 0x884D
8845 defw drop_cfa
8847 defw DECODE-BRANCH_cfa
8849 defw branch_cfa,0x0018; to 0x8863
884D defw lit_cfa,0x6847
8851 defw over_cfa
8853 defw equals_cfa
8855 defw zero_branch_cfa,0x000A; to 0x8861
8859 defw drop_cfa
885B defw DECODE-DOT-QUOTE_cfa
885D defw branch_cfa,0x0004; to 0x8863
8861 defw drop_cfa
8863 defw semicolon_s_cfa
; [DASMZ80 ZONE] DECODE-SPECIAL-CASES_pfa: start 0x87D1 end 0x8865 type pointers

878F  DECODE-DOT-QUOTE_nfa: 
878F defb 0x10+0x80,"DECODE-DOT-QUOT","E"+0x80
; [DASMZ80 ZONE] DECODE-DOT-QUOTE_nfa: start 0x878F end 0x87A0 type bytedata
87A0  DECODE-DOT-QUOTE_lfa: 
87A0 defw DECODE-BRANCH_nfa
; [DASMZ80 ZONE] DECODE-DOT-QUOTE_lfa: start 0x87A0 end 0x87A2 type pointers
87A2  DECODE-DOT-QUOTE_cfa: 
87A2 defw 0x6306
; [DASMZ80 ZONE] DECODE-DOT-QUOTE_cfa: start 0x87A2 end 0x87A4 type pointers
87A4  DECODE-DOT-QUOTE_pfa: 
87A4 defw two_plus_cfa
87A6 defw dup_cfa
87A8 defw count_cfa
87AA defw type_cfa
87AC defw dup_cfa
87AE defw c_fetch_cfa
87B0 defw plus_cfa
87B2 defw one_cfa
87B4 defw minus_cfa
87B6 defw semicolon_s_cfa
; [DASMZ80 ZONE] DECODE-DOT-QUOTE_pfa: start 0x87A4 end 0x87B8 type pointers

8766  DECODE-BRANCH_nfa: 
8766 defb 0x0D+0x80,"DECODE-BRANC","H"+0x80
; [DASMZ80 ZONE] DECODE-BRANCH_nfa: start 0x8766 end 0x8774 type bytedata
8774  DECODE-BRANCH_lfa: 
8774 defw DECODE-LITERAL_nfa
; [DASMZ80 ZONE] DECODE-BRANCH_lfa: start 0x8774 end 0x8776 type pointers
8776  DECODE-BRANCH_cfa: 
8776 defw 0x6306
; [DASMZ80 ZONE] DECODE-BRANCH_cfa: start 0x8776 end 0x8778 type pointers
8778  DECODE-BRANCH_pfa: 
8778 defw DECODE-LITERAL_cfa
877A defw paren_dot_quote_cfa
877C defb 0x06," \ to "
8783 defw dup_cfa
8785 defw dup_cfa
8787 defw fetch_cfa
8789 defw plus_cfa
878B defw u_dot_cfa
878D defw semicolon_s_cfa
; [DASMZ80 ZONE] DECODE-BRANCH_pfa: start 0x8778 end 0x878F type pointers

8749  DECODE-LITERAL_nfa: 
8749 defb 0x0E+0x80,"DECODE-LITERA","L"+0x80
; [DASMZ80 ZONE] DECODE-LITERAL_nfa: start 0x8749 end 0x8758 type bytedata
8758  DECODE-LITERAL_lfa: 
8758 defw DECODE-COMPILE_nfa
; [DASMZ80 ZONE] DECODE-LITERAL_lfa: start 0x8758 end 0x875A type pointers
875A  DECODE-LITERAL_cfa: 
875A defw 0x6306
; [DASMZ80 ZONE] DECODE-LITERAL_cfa: start 0x875A end 0x875C type pointers
875C  DECODE-LITERAL_pfa: 
875C defw two_plus_cfa
875E defw dup_cfa
8760 defw fetch_cfa
8762 defw dot_cfa
8764 defw semicolon_s_cfa
; [DASMZ80 ZONE] DECODE-LITERAL_pfa: start 0x875C end 0x8766 type pointers

8728  DECODE-COMPILE_nfa: 
8728 defb 0x0E+0x80,"DECODE-COMPIL","E"+0x80
; [DASMZ80 ZONE] DECODE-COMPILE_nfa: start 0x8728 end 0x8737 type bytedata
8737  DECODE-COMPILE_lfa: 
8737 defw INDENT+_nfa
; [DASMZ80 ZONE] DECODE-COMPILE_lfa: start 0x8737 end 0x8739 type pointers
8739  DECODE-COMPILE_cfa: 
8739 defw 0x6306
; [DASMZ80 ZONE] DECODE-COMPILE_cfa: start 0x8739 end 0x873B type pointers
873B  DECODE-COMPILE_pfa: 
873B defw two_plus_cfa
873D defw dup_cfa
873F defw fetch_cfa
8741 defw two_plus_cfa
8743 defw nfa_cfa
8745 defw id_dot_cfa
8747 defw semicolon_s_cfa
; [DASMZ80 ZONE] DECODE-COMPILE_pfa: start 0x873B end 0x8749 type pointers

8712  INDENT+_nfa: 
8712 defb 0x07+0x80,"INDENT","+"+0x80
; [DASMZ80 ZONE] INDENT+_nfa: start 0x8712 end 0x871A type bytedata
871A  INDENT+_lfa: 
871A defw INDENT_nfa
; [DASMZ80 ZONE] INDENT+_lfa: start 0x871A end 0x871C type pointers
871C  INDENT+_cfa: 
871C defw 0x6306
; [DASMZ80 ZONE] INDENT+_cfa: start 0x871C end 0x871E type pointers
871E  INDENT+_pfa: 
871E defw one_cfa
8720 defw DECODE-LEVEL_cfa
8722 defw plus_store_cfa
8724 defw INDENT_cfa
8726 defw semicolon_s_cfa
; [DASMZ80 ZONE] INDENT+_pfa: start 0x871E end 0x8728 type pointers

86F3  INDENT_nfa: 
86F3 defb 0x06+0x80,"INDEN","T"+0x80
; [DASMZ80 ZONE] INDENT_nfa: start 0x86F3 end 0x86FA type bytedata
86FA  INDENT_lfa: 
86FA defw DECODE-ADDRESS_nfa
; [DASMZ80 ZONE] INDENT_lfa: start 0x86FA end 0x86FC type pointers
86FC  INDENT_cfa: 
86FC defw 0x6306
; [DASMZ80 ZONE] INDENT_cfa: start 0x86FC end 0x86FE type pointers
86FE  INDENT_pfa: 
86FE defw cr_cfa
8700 defw DECODE-ADDRESS_cfa
8702 defw fetch_cfa
8704 defw u_dot_cfa
8706 defw DECODE-LEVEL_cfa
8708 defw fetch_cfa
870A defw two_cfa
870C defw star_cfa
870E defw spaces_cfa
8710 defw semicolon_s_cfa
; [DASMZ80 ZONE] INDENT_pfa: start 0x86FE end 0x8712 type pointers

86DE  DECODE-ADDRESS_nfa: 
86DE defb 0x0E+0x80,"DECODE-ADDRES","S"+0x80
; [DASMZ80 ZONE] DECODE-ADDRESS_nfa: start 0x86DE end 0x86ED type bytedata
86ED  DECODE-ADDRESS_lfa: 
86ED defw DECODE-LEVEL_nfa
; [DASMZ80 ZONE] DECODE-ADDRESS_lfa: start 0x86ED end 0x86EF type pointers
86EF  DECODE-ADDRESS_cfa: 
86EF defw 0x6362
; [DASMZ80 ZONE] DECODE-ADDRESS_cfa: start 0x86EF end 0x86F1 type pointers
86F1  DECODE-ADDRESS_pfa: 
86F1 defw 0x0000
; [DASMZ80 ZONE] DECODE-ADDRESS_pfa: start 0x86F1 end 0x86F3 type worddata

86CB  DECODE-LEVEL_nfa: 
86CB defb 0x0C+0x80,"DECODE-LEVE","L"+0x80
; [DASMZ80 ZONE] DECODE-LEVEL_nfa: start 0x86CB end 0x86D8 type bytedata
86D8  DECODE-LEVEL_lfa: 
86D8 defw RECURSE_nfa
; [DASMZ80 ZONE] DECODE-LEVEL_lfa: start 0x86D8 end 0x86DA type pointers
86DA  DECODE-LEVEL_cfa: 
86DA defw 0x6362
; [DASMZ80 ZONE] DECODE-LEVEL_cfa: start 0x86DA end 0x86DC type pointers
86DC  DECODE-LEVEL_pfa: 
86DC defw 0x0000
; [DASMZ80 ZONE] DECODE-LEVEL_pfa: start 0x86DC end 0x86DE type worddata

86B5  RECURSE_nfa: 
86B5 defb 0x07+0x80+0x40,"RECURS","E"+0x80
; [DASMZ80 ZONE] RECURSE_nfa: start 0x86B5 end 0x86BD type bytedata
86BD  RECURSE_lfa: 
86BD defw DUMP_nfa
; [DASMZ80 ZONE] RECURSE_lfa: start 0x86BD end 0x86BF type pointers
86BF  RECURSE_cfa: 
86BF defw 0x6306
; [DASMZ80 ZONE] RECURSE_cfa: start 0x86BF end 0x86C1 type pointers
86C1  RECURSE_pfa: 
86C1 defw latest_cfa
86C3 defw pfa_cfa
86C5 defw cfa_cfa
86C7 defw comma_cfa
86C9 defw semicolon_s_cfa
; [DASMZ80 ZONE] RECURSE_pfa: start 0x86C1 end 0x86CB type pointers

8648  DUMP_nfa: 
8648 defb 0x04+0x80,"DUM","P"+0x80
; [DASMZ80 ZONE] DUMP_nfa: start 0x8648 end 0x864D type bytedata
864D  DUMP_lfa: 
864D defw STYPE_nfa
; [DASMZ80 ZONE] DUMP_lfa: start 0x864D end 0x864F type pointers
864F  DUMP_cfa: 
864F defw 0x6306
; [DASMZ80 ZONE] DUMP_cfa: start 0x864F end 0x8651 type pointers
8651  DUMP_pfa: 
8651 defw lit_cfa,0x0007
8655 defw plus_cfa
8657 defw lit_cfa,0xFFF8
865B defw and_cfa
865D defw lit_cfa,0x0008
8661 defw slash_cfa
8663 defw zero_cfa
8665 defw two_dup_cfa
8667 defw minus_cfa
8669 defw zero_branch_cfa,0x0044; to 0x86AF
866D defw paren_do_cfa
866F defw cr_cfa
8671 defw dup_cfa
8673 defw H._cfa
8675 defw lit_cfa,0x0008
8679 defw zero_cfa
867B defw paren_do_cfa
867D defw i_cfa
867F defw over_cfa
8681 defw plus_cfa
8683 defw fetch_cfa
8685 defw CSWAP_cfa
8687 defw H._cfa
8689 defw two_cfa
868B defw paren_plus_loop_cfa,0xFFF0; to 0x867D
868F defw dup_cfa
8691 defw BS_cfa
8693 defw lit_cfa,0x0008
8697 defw STYPE_cfa
8699 defw question_terminal_cfa
869B defw zero_branch_cfa,0x0004; to 0x86A1
869F defw leave_cfa
86A1 defw lit_cfa,0x0008
86A5 defw plus_cfa
86A7 defw paren_loop_cfa,0xFFC6; to 0x866F
86AB defw branch_cfa,0x0004; to 0x86B1
86AF defw two_drop_cfa
86B1 defw drop_cfa
86B3 defw semicolon_s_cfa
; [DASMZ80 ZONE] DUMP_pfa: start 0x8651 end 0x86B5 type pointers

8606  STYPE_nfa: 
8606 defb 0x05+0x80,"STYP","E"+0x80
; [DASMZ80 ZONE] STYPE_nfa: start 0x8606 end 0x860C type bytedata
860C  STYPE_lfa: 
860C defw H._nfa
; [DASMZ80 ZONE] STYPE_lfa: start 0x860C end 0x860E type pointers
860E  STYPE_cfa: 
860E defw 0x6306
; [DASMZ80 ZONE] STYPE_cfa: start 0x860E end 0x8610 type pointers
8610  STYPE_pfa: 
8610 defw zero_cfa
8612 defw two_dup_cfa
8614 defw minus_cfa
8616 defw zero_branch_cfa,0x002A; to 0x8642
861A defw paren_do_cfa
861C defw dup_cfa
861E defw c_fetch_cfa
8620 defw lit_cfa,0x007F
8624 defw and_cfa
8626 defw dup_cfa
8628 defw b_l_cfa
862A defw less_than_cfa
862C defw zero_branch_cfa,0x0008; to 0x8636
8630 defw drop_cfa
8632 defw lit_cfa,0x002E
8636 defw emit_cfa
8638 defw one_plus_cfa
863A defw paren_loop_cfa,0xFFE0; to 0x861C
863E defw branch_cfa,0x0004; to 0x8644
8642 defw two_drop_cfa
8644 defw drop_cfa
8646 defw semicolon_s_cfa
; [DASMZ80 ZONE] STYPE_pfa: start 0x8610 end 0x8648 type pointers

85DF  H._nfa: 
85DF defb 0x02+0x80,"H","."+0x80
; [DASMZ80 ZONE] H._nfa: start 0x85DF end 0x85E2 type bytedata
85E2  H._lfa: 
85E2 defw BS_nfa
; [DASMZ80 ZONE] H._lfa: start 0x85E2 end 0x85E4 type pointers
85E4  H._cfa: 
85E4 defw 0x6306
; [DASMZ80 ZONE] H._cfa: start 0x85E4 end 0x85E6 type pointers
85E6  H._pfa: 
85E6 defw base_cfa
85E8 defw fetch_cfa
85EA defw hex_cfa
85EC defw swap_cfa
85EE defw s_to_d_cfa
85F0 defw less_hash_cfa
85F2 defw hash_cfa
85F4 defw hash_cfa
85F6 defw hash_cfa
85F8 defw hash_cfa
85FA defw hash_greater_cfa
85FC defw type_cfa
85FE defw space_cfa
8600 defw base_cfa
8602 defw store_cfa
8604 defw semicolon_s_cfa
; [DASMZ80 ZONE] H._pfa: start 0x85E6 end 0x8606 type pointers

85D0  BS_nfa: 
85D0 defb 0x02+0x80,"B","S"+0x80
; [DASMZ80 ZONE] BS_nfa: start 0x85D0 end 0x85D3 type bytedata
85D3  BS_lfa: 
85D3 defw CSWAP_nfa
; [DASMZ80 ZONE] BS_lfa: start 0x85D3 end 0x85D5 type pointers
85D5  BS_cfa: 
85D5 defw 0x6306
; [DASMZ80 ZONE] BS_cfa: start 0x85D5 end 0x85D7 type pointers
85D7  BS_pfa: 
85D7 defw lit_cfa,0x0008
85DB defw emit_cfa
85DD defw semicolon_s_cfa
; [DASMZ80 ZONE] BS_pfa: start 0x85D7 end 0x85DF type pointers

85BF  CSWAP_nfa: 
85BF defb 0x05+0x80,"CSWA","P"+0x80
; [DASMZ80 ZONE] CSWAP_nfa: start 0x85BF end 0x85C5 type bytedata
85C5  CSWAP_lfa: 
85C5 defw .S_nfa
; [DASMZ80 ZONE] CSWAP_lfa: start 0x85C5 end 0x85C7 type pointers
85C7  CSWAP_cfa: 
85C7 defw CSWAP_pfa
; [DASMZ80 ZONE] CSWAP_cfa: start 0x85C7 end 0x85C9 type pointers
85C9  CSWAP_pfa: 
; [DASMZ80 ZONE] CSWAP_cfa: start 0x85C9 end 0x85D0 type code

857C  .S_nfa: 
857C defb 0x02+0x80,".","S"+0x80
; [DASMZ80 ZONE] .S_nfa: start 0x857C end 0x857F type bytedata
857F  .S_lfa: 
857F defw TURNKEY_nfa
; [DASMZ80 ZONE] .S_lfa: start 0x857F end 0x8581 type pointers
8581  .S_cfa: 
8581 defw 0x6306
; [DASMZ80 ZONE] .S_cfa: start 0x8581 end 0x8583 type pointers
8583  .S_pfa: 
8583 defw DEPTH_cfa
8585 defw dup_cfa
8587 defw s_to_d_cfa
8589 defw less_hash_cfa
858B defw lit_cfa,0x003E
858F defw hold_cfa
8591 defw hash_s_cfa
8593 defw lit_cfa,0x003C
8597 defw hold_cfa
8599 defw hash_greater_cfa
859B defw type_cfa
859D defw space_cfa
859F defw zero_branch_cfa,0x001C; to 0x85BD
85A3 defw sp_fetch_cfa
85A5 defw 2-_cfa
85A7 defw s0_cfa
85A9 defw fetch_cfa
85AB defw 2-_cfa
85AD defw paren_do_cfa
85AF defw i_cfa
85B1 defw fetch_cfa
85B3 defw dot_cfa
85B5 defw lit_cfa,0xFFFE
85B9 defw paren_plus_loop_cfa,0xFFF4; to 0x85AF
85BD defw semicolon_s_cfa
; [DASMZ80 ZONE] .S_pfa: start 0x8583 end 0x85BF type pointers

8568  TURNKEY_nfa: 
8568 defb 0x07+0x80,"TURNKE","Y"+0x80
; [DASMZ80 ZONE] TURNKEY_nfa: start 0x8568 end 0x8570 type bytedata
8570  TURNKEY_lfa: 
8570 defw SYSTEM_nfa
; [DASMZ80 ZONE] TURNKEY_lfa: start 0x8570 end 0x8572 type pointers
8572  TURNKEY_cfa: 
8572 defw 0x6306
; [DASMZ80 ZONE] TURNKEY_cfa: start 0x8572 end 0x8574 type pointers
8574  TURNKEY_pfa: 
8574 defw BOOT_cfa
8576 defw store_cfa
8578 defw SYSTEM_cfa
857A defw semicolon_s_cfa
; [DASMZ80 ZONE] TURNKEY_pfa: start 0x8574 end 0x857C type pointers

854D  SYSTEM_nfa: 
854D defb 0x06+0x80,"SYSTE","M"+0x80
; [DASMZ80 ZONE] SYSTEM_nfa: start 0x854D end 0x8554 type bytedata
8554  SYSTEM_lfa: 
8554 defw EXTEND_nfa
; [DASMZ80 ZONE] SYSTEM_lfa: start 0x8554 end 0x8556 type pointers
8556  SYSTEM_cfa: 
8556 defw 0x6306
; [DASMZ80 ZONE] SYSTEM_cfa: start 0x8556 end 0x8558 type pointers
8558  SYSTEM_pfa: 
8558 defw EXTEND_cfa
855A defw zero_cfa
855C defw plus_origin_cfa
855E defw size_cfa
8560 defw lit_cfa,0x000A
8564 defw plus_cfa
8566 defw semicolon_s_cfa
; [DASMZ80 ZONE] SYSTEM_pfa: start 0x8558 end 0x8568 type pointers

850A  EXTEND_nfa: 
850A defb 0x06+0x80,"EXTEN","D"+0x80
; [DASMZ80 ZONE] EXTEND_nfa: start 0x850A end 0x8511 type bytedata
8511  EXTEND_lfa: 
8511 defw NEEDS_nfa
; [DASMZ80 ZONE] EXTEND_lfa: start 0x8511 end 0x8513 type pointers
8513  EXTEND_cfa: 
8513 defw 0x6306
; [DASMZ80 ZONE] EXTEND_cfa: start 0x8513 end 0x8515 type pointers
8515  EXTEND_pfa: 
8515 defw latest_cfa
8517 defw lit_cfa,0x000C
851B defw plus_origin_cfa
851D defw store_cfa
851F defw here_cfa
8521 defw lit_cfa,0x001C
8525 defw plus_origin_cfa
8527 defw store_cfa
8529 defw here_cfa
852B defw lit_cfa,0x001E
852F defw plus_origin_cfa
8531 defw store_cfa
8533 defw here_cfa
8535 defw fence_cfa
8537 defw store_cfa
8539 defw lit_cfa,0x6CF4
853D defw lit_cfa,0x0008
8541 defw plus_cfa
8543 defw lit_cfa,0x0020
8547 defw plus_origin_cfa
8549 defw store_cfa
854B defw semicolon_s_cfa
; [DASMZ80 ZONE] EXTEND_pfa: start 0x8515 end 0x854D type pointers

84FA  NEEDS_nfa: 
84FA defb 0x05+0x80,"NEED","S"+0x80
; [DASMZ80 ZONE] NEEDS_nfa: start 0x84FA end 0x8500 type bytedata
8500  NEEDS_lfa: 
8500 defw ?NEEDS_nfa
; [DASMZ80 ZONE] NEEDS_lfa: start 0x8500 end 0x8502 type pointers
8502  NEEDS_cfa: 
8502 defw 0x6306
; [DASMZ80 ZONE] NEEDS_cfa: start 0x8502 end 0x8504 type pointers
8504  NEEDS_pfa: 
8504 defw [UNDEFINED]_cfa
8506 defw ?NEEDS_cfa
8508 defw semicolon_s_cfa
; [DASMZ80 ZONE] NEEDS_pfa: start 0x8504 end 0x850A type pointers

84EB  ?NEEDS_nfa: 
84EB defb 0x06+0x80,"?NEED","S"+0x80
; [DASMZ80 ZONE] ?NEEDS_nfa: start 0x84EB end 0x84F2 type bytedata
84F2  ?NEEDS_lfa: 
84F2 defw (NEEDS-TAPE)_nfa
; [DASMZ80 ZONE] ?NEEDS_lfa: start 0x84F2 end 0x84F4 type pointers
84F4  ?NEEDS_cfa: 
84F4 defw 0x6306
; [DASMZ80 ZONE] ?NEEDS_cfa: start 0x84F4 end 0x84F6 type pointers
84F6  ?NEEDS_pfa: 
84F6 defw (NEEDS-TAPE)_cfa
84F8 defw semicolon_s_cfa
; [DASMZ80 ZONE] ?NEEDS_pfa: start 0x84F6 end 0x84FA type pointers

84CE  (NEEDS-TAPE)_nfa: 
84CE defb 0x0C+0x80,"(NEEDS-TAPE",")"+0x80
; [DASMZ80 ZONE] (NEEDS-TAPE)_nfa: start 0x84CE end 0x84DB type bytedata
84DB  (NEEDS-TAPE)_lfa: 
84DB defw DISC-SCR_nfa
; [DASMZ80 ZONE] (NEEDS-TAPE)_lfa: start 0x84DB end 0x84DD type pointers
84DD  (NEEDS-TAPE)_cfa: 
84DD defw 0x6306
; [DASMZ80 ZONE] (NEEDS-TAPE)_cfa: start 0x84DD end 0x84DF type pointers
84DF  (NEEDS-TAPE)_pfa: 
84DF defw lit_cfa,0x001B
84E3 defw question_error_cfa
84E5 defw b_l_cfa
84E7 defw word_cfa
84E9 defw semicolon_s_cfa
; [DASMZ80 ZONE] (NEEDS-TAPE)_pfa: start 0x84DF end 0x84EB type pointers

84A7  DISC-SCR_nfa: 
84A7 defb 0x08+0x80,"DISC-SC","R"+0x80
; [DASMZ80 ZONE] DISC-SCR_nfa: start 0x84A7 end 0x84B0 type bytedata
84B0  DISC-SCR_lfa: 
84B0 defw SCR/DR_nfa
; [DASMZ80 ZONE] DISC-SCR_lfa: start 0x84B0 end 0x84B2 type pointers
84B2  DISC-SCR_cfa: 
84B2 defw 0x6306
; [DASMZ80 ZONE] DISC-SCR_cfa: start 0x84B2 end 0x84B4 type pointers
84B4  DISC-SCR_pfa: 
84B4 defw 1-_cfa
84B6 defw dup_cfa
84B8 defw SCR/DR_cfa
84BA defw u_less_than_cfa
84BC defw zero_equals_cfa
84BE defw lit_cfa,0x0006
84C2 defw question_error_cfa
84C4 defw /SCR_cfa
84C6 defw star_cfa
84C8 defw lo_cfa
84CA defw plus_cfa
84CC defw semicolon_s_cfa
; [DASMZ80 ZONE] DISC-SCR_pfa: start 0x84B4 end 0x84CE type pointers

849A  SCR/DR_nfa: 
849A defb 0x06+0x80,"SCR/D","R"+0x80
; [DASMZ80 ZONE] SCR/DR_nfa: start 0x849A end 0x84A1 type bytedata
84A1  SCR/DR_lfa: 
84A1 defw RUNT_nfa
; [DASMZ80 ZONE] SCR/DR_lfa: start 0x84A1 end 0x84A3 type pointers
84A3  SCR/DR_cfa: 
84A3 defw 0x6348
; [DASMZ80 ZONE] SCR/DR_cfa: start 0x84A3 end 0x84A5 type pointers
84A5  SCR/DR_pfa: 
84A5 defw 0x0010
; [DASMZ80 ZONE] SCR/DR_pfa: start 0x84A5 end 0x84A7 type worddata

848B  RUNT_nfa: 
848B defb 0x04+0x80,"RUN","T"+0x80
; [DASMZ80 ZONE] RUNT_nfa: start 0x848B end 0x8490 type bytedata
8490  RUNT_lfa: 
8490 defw /RUNT_nfa
; [DASMZ80 ZONE] RUNT_lfa: start 0x8490 end 0x8492 type pointers
8492  RUNT_cfa: 
8492 defw 0x6306
; [DASMZ80 ZONE] RUNT_cfa: start 0x8492 end 0x8494 type pointers
8494  RUNT_pfa: 
8494 defw one_cfa
8496 defw /RUNT_cfa
8498 defw semicolon_s_cfa
; [DASMZ80 ZONE] RUNT_pfa: start 0x8494 end 0x849A type pointers

8477  /RUNT_nfa: 
8477 defb 0x05+0x80,"/RUN","T"+0x80
; [DASMZ80 ZONE] /RUNT_nfa: start 0x8477 end 0x847D type bytedata
847D  /RUNT_lfa: 
847D defw +THRU_nfa
; [DASMZ80 ZONE] /RUNT_lfa: start 0x847D end 0x847F type pointers
847F  /RUNT_cfa: 
847F defw 0x6306
; [DASMZ80 ZONE] /RUNT_cfa: start 0x847F end 0x8481 type pointers
8481  /RUNT_pfa: 
8481 defw empty_buffers_cfa
8483 defw init_disc_cfa
8485 defw loadt_cfa
8487 defw load_cfa
8489 defw semicolon_s_cfa
; [DASMZ80 ZONE] /RUNT_pfa: start 0x8481 end 0x848B type pointers

845D  +THRU_nfa: 
845D defb 0x05+0x80,"+THR","U"+0x80
; [DASMZ80 ZONE] +THRU_nfa: start 0x845D end 0x8463 type bytedata
8463  +THRU_lfa: 
8463 defw +LOAD_nfa
; [DASMZ80 ZONE] +THRU_lfa: start 0x8463 end 0x8465 type pointers
8465  +THRU_cfa: 
8465 defw 0x6306
; [DASMZ80 ZONE] +THRU_cfa: start 0x8465 end 0x8467 type pointers
8467  +THRU_pfa: 
8467 defw one_plus_cfa
8469 defw swap_cfa
846B defw paren_do_cfa
846D defw i_cfa
846F defw +LOAD_cfa
8471 defw paren_loop_cfa,0xFFFA; to 0x846D
8475 defw semicolon_s_cfa
; [DASMZ80 ZONE] +THRU_pfa: start 0x8467 end 0x8477 type pointers

8445  +LOAD_nfa: 
8445 defb 0x05+0x80,"+LOA","D"+0x80
; [DASMZ80 ZONE] +LOAD_nfa: start 0x8445 end 0x844B type bytedata
844B  +LOAD_lfa: 
844B defw THRU_nfa
; [DASMZ80 ZONE] +LOAD_lfa: start 0x844B end 0x844D type pointers
844D  +LOAD_cfa: 
844D defw 0x6306
; [DASMZ80 ZONE] +LOAD_cfa: start 0x844D end 0x844F type pointers
844F  +LOAD_pfa: 
844F defw blk_cfa
8451 defw fetch_cfa
8453 defw b_slash_scr_cfa
8455 defw slash_cfa
8457 defw plus_cfa
8459 defw load_cfa
845B defw semicolon_s_cfa
; [DASMZ80 ZONE] +LOAD_pfa: start 0x844F end 0x845D type pointers

842C  THRU_nfa: 
842C defb 0x04+0x80,"THR","U"+0x80
; [DASMZ80 ZONE] THRU_nfa: start 0x842C end 0x8431 type bytedata
8431  THRU_lfa: 
8431 defw 0<>_nfa
; [DASMZ80 ZONE] THRU_lfa: start 0x8431 end 0x8433 type pointers
8433  THRU_cfa: 
8433 defw 0x6306
; [DASMZ80 ZONE] THRU_cfa: start 0x8433 end 0x8435 type pointers
8435  THRU_pfa: 
8435 defw one_plus_cfa
8437 defw swap_cfa
8439 defw paren_do_cfa
843B defw i_cfa
843D defw load_cfa
843F defw paren_loop_cfa,0xFFFA; to 0x843B
8443 defw semicolon_s_cfa
; [DASMZ80 ZONE] THRU_pfa: start 0x8435 end 0x8445 type pointers

8417  0<>_nfa: 
8417 defb 0x03+0x80,"0<",">"+0x80
; [DASMZ80 ZONE] 0<>_nfa: start 0x8417 end 0x841B type bytedata
841B  0<>_lfa: 
841B defw 2*_nfa
; [DASMZ80 ZONE] 0<>_lfa: start 0x841B end 0x841D type pointers
841D  0<>_cfa: 
841D defw 0<>_pfa
; [DASMZ80 ZONE] 0<>_cfa: start 0x841D end 0x841F type pointers
841F  0<>_pfa: 
; [DASMZ80 ZONE] 0<>_cfa: start 0x841F end 0x842C type code

840B  2*_nfa: 
840B defb 0x02+0x80,"2","*"+0x80
; [DASMZ80 ZONE] 2*_nfa: start 0x840B end 0x840E type bytedata
840E  2*_lfa: 
840E defw 2-_nfa
; [DASMZ80 ZONE] 2*_lfa: start 0x840E end 0x8410 type pointers
8410  2*_cfa: 
8410 defw 2*_pfa
; [DASMZ80 ZONE] 2*_cfa: start 0x8410 end 0x8412 type pointers
8412  2*_pfa: 
; [DASMZ80 ZONE] 2*_cfa: start 0x8412 end 0x8417 type code

83FE  2-_nfa: 
83FE defb 0x02+0x80,"2","-"+0x80
; [DASMZ80 ZONE] 2-_nfa: start 0x83FE end 0x8401 type bytedata
8401  2-_lfa: 
8401 defw 1-_nfa
; [DASMZ80 ZONE] 2-_lfa: start 0x8401 end 0x8403 type pointers
8403  2-_cfa: 
8403 defw 2-_pfa
; [DASMZ80 ZONE] 2-_cfa: start 0x8403 end 0x8405 type pointers
8405  2-_pfa: 
; [DASMZ80 ZONE] 2-_cfa: start 0x8405 end 0x840B type code

83F2  1-_nfa: 
83F2 defb 0x02+0x80,"1","-"+0x80
; [DASMZ80 ZONE] 1-_nfa: start 0x83F2 end 0x83F5 type bytedata
83F5  1-_lfa: 
83F5 defw BOUNDS_nfa
; [DASMZ80 ZONE] 1-_lfa: start 0x83F5 end 0x83F7 type pointers
83F7  1-_cfa: 
83F7 defw 1-_pfa
; [DASMZ80 ZONE] 1-_cfa: start 0x83F7 end 0x83F9 type pointers
83F9  1-_pfa: 
; [DASMZ80 ZONE] 1-_cfa: start 0x83F9 end 0x83FE type code

83DF  BOUNDS_nfa: 
83DF defb 0x06+0x80,"BOUND","S"+0x80
; [DASMZ80 ZONE] BOUNDS_nfa: start 0x83DF end 0x83E6 type bytedata
83E6  BOUNDS_lfa: 
83E6 defw (R/W)_nfa
; [DASMZ80 ZONE] BOUNDS_lfa: start 0x83E6 end 0x83E8 type pointers
83E8  BOUNDS_cfa: 
83E8 defw 0x6306
; [DASMZ80 ZONE] BOUNDS_cfa: start 0x83E8 end 0x83EA type pointers
83EA  BOUNDS_pfa: 
83EA defw over_cfa
83EC defw plus_cfa
83EE defw swap_cfa
83F0 defw semicolon_s_cfa
; [DASMZ80 ZONE] BOUNDS_pfa: start 0x83EA end 0x83F2 type pointers

83C1  (R/W)_nfa: 
83C1 defb 0x05+0x80,"(R/W",")"+0x80
; [DASMZ80 ZONE] (R/W)_nfa: start 0x83C1 end 0x83C7 type bytedata
83C7  (R/W)_lfa: 
83C7 defw DISC-BLOCK_nfa
; [DASMZ80 ZONE] (R/W)_lfa: start 0x83C7 end 0x83C9 type pointers
83C9  (R/W)_cfa: 
83C9 defw 0x6306
; [DASMZ80 ZONE] (R/W)_cfa: start 0x83C9 end 0x83CB type pointers
83CB  (R/W)_pfa: 
83CB defw zero_branch_cfa,0x0004; to 0x83D1
83CF defw swap_cfa
83D1 defw b_slash_buf_cfa
83D3 defw DISC-BANK_cfa
83D5 defw BANK_cfa
83D7 defw cmove_cfa
83D9 defw zero_cfa
83DB defw BANK_cfa
83DD defw semicolon_s_cfa
; [DASMZ80 ZONE] (R/W)_pfa: start 0x83CB end 0x83DF type pointers

8386  DISC-BLOCK_nfa: 
8386 defb 0x0A+0x80,"DISC-BLOC","K"+0x80
; [DASMZ80 ZONE] DISC-BLOCK_nfa: start 0x8386 end 0x8391 type bytedata
8391  DISC-BLOCK_lfa: 
8391 defw /SCR_nfa
; [DASMZ80 ZONE] DISC-BLOCK_lfa: start 0x8391 end 0x8393 type pointers
8393  DISC-BLOCK_cfa: 
8393 defw 0x6306
; [DASMZ80 ZONE] DISC-BLOCK_cfa: start 0x8393 end 0x8395 type pointers
8395  DISC-BLOCK_pfa: 
8395 defw offset_cfa
8397 defw fetch_cfa
8399 defw minus_cfa
839B defw b_slash_buf_cfa
839D defw star_cfa
839F defw dup_cfa
83A1 defw /SCR_cfa
83A3 defw u_less_than_cfa
83A5 defw lit_cfa,0x0006
83A9 defw question_error_cfa
83AB defw lo_cfa
83AD defw plus_cfa
83AF defw /SCR_cfa
83B1 defw minus_cfa
83B3 defw dup_cfa
83B5 defw hi_cfa
83B7 defw greater_than_cfa
83B9 defw lit_cfa,0x0006
83BD defw question_error_cfa
83BF defw semicolon_s_cfa
; [DASMZ80 ZONE] DISC-BLOCK_pfa: start 0x8395 end 0x83C1 type pointers

837B  /SCR_nfa: 
837B defb 0x04+0x80,"/SC","R"+0x80
; [DASMZ80 ZONE] /SCR_nfa: start 0x837B end 0x8380 type bytedata
8380  /SCR_lfa: 
8380 defw BOOT_nfa
; [DASMZ80 ZONE] /SCR_lfa: start 0x8380 end 0x8382 type pointers
8382  /SCR_cfa: 
8382 defw 0x6348
; [DASMZ80 ZONE] /SCR_cfa: start 0x8382 end 0x8384 type pointers
8384  /SCR_pfa: 
8384 defw 0x0400
; [DASMZ80 ZONE] /SCR_pfa: start 0x8384 end 0x8386 type worddata

8370  BOOT_nfa: 
8370 defb 0x04+0x80,"BOO","T"+0x80
; [DASMZ80 ZONE] BOOT_nfa: start 0x8370 end 0x8375 type bytedata
8375  BOOT_lfa: 
8375 defw CLS0_nfa
; [DASMZ80 ZONE] BOOT_lfa: start 0x8375 end 0x8377 type pointers
8377  BOOT_cfa: 
8377 defw 0x6348
; [DASMZ80 ZONE] BOOT_cfa: start 0x8377 end 0x8379 type pointers
8379  BOOT_pfa: 
8379 defw 0x6D68
; [DASMZ80 ZONE] BOOT_pfa: start 0x8379 end 0x837B type worddata

8361  CLS0_nfa: 
8361 defb 0x04+0x80,"CLS","0"+0x80
; [DASMZ80 ZONE] CLS0_nfa: start 0x8361 end 0x8366 type bytedata
8366  CLS0_lfa: 
8366 defw COLORS0_nfa
; [DASMZ80 ZONE] CLS0_lfa: start 0x8366 end 0x8368 type pointers
8368  CLS0_cfa: 
8368 defw 0x6306
; [DASMZ80 ZONE] CLS0_cfa: start 0x8368 end 0x836A type pointers
836A  CLS0_pfa: 
836A defw COLORS0_cfa
836C defw cls_cfa
836E defw semicolon_s_cfa
; [DASMZ80 ZONE] CLS0_pfa: start 0x836A end 0x8370 type pointers

8339  COLORS0_nfa: 
8339 defb 0x07+0x80,"COLORS","0"+0x80
; [DASMZ80 ZONE] COLORS0_nfa: start 0x8339 end 0x8341 type bytedata
8341  COLORS0_lfa: 
8341 defw GREETING_nfa
; [DASMZ80 ZONE] COLORS0_lfa: start 0x8341 end 0x8343 type pointers
8343  COLORS0_cfa: 
8343 defw 0x6306
; [DASMZ80 ZONE] COLORS0_cfa: start 0x8343 end 0x8345 type pointers
8345  COLORS0_pfa: 
8345 defw zero_cfa
8347 defw paper_cfa
8349 defw lit_cfa,0x0004
834D defw ink_cfa
834F defw zero_cfa
8351 defw bright_cfa
8353 defw zero_cfa
8355 defw flash_cfa
8357 defw zero_cfa
8359 defw inverse_cfa
835B defw zero_cfa
835D defw border_cfa
835F defw semicolon_s_cfa
; [DASMZ80 ZONE] COLORS0_pfa: start 0x8345 end 0x8361 type pointers

8322  GREETING_nfa: 
8322 defb 0x08+0x80,"GREETIN","G"+0x80
; [DASMZ80 ZONE] GREETING_nfa: start 0x8322 end 0x832B type bytedata
832B  GREETING_lfa: 
832B defw .SYS-AUTHOR_nfa
; [DASMZ80 ZONE] GREETING_lfa: start 0x832B end 0x832D type pointers
832D  GREETING_cfa: 
832D defw 0x6306
; [DASMZ80 ZONE] GREETING_cfa: start 0x832D end 0x832F type pointers
832F  GREETING_pfa: 
832F defw .SYS_cfa
8331 defw cr_cfa
8333 defw .SYS-AUTHOR_cfa
8335 defw cr_cfa
8337 defw semicolon_s_cfa
; [DASMZ80 ZONE] GREETING_pfa: start 0x832F end 0x8339 type pointers

82BD  .SYS-AUTHOR_nfa: 
82BD defb 0x0B+0x80,".SYS-AUTHO","R"+0x80
; [DASMZ80 ZONE] .SYS-AUTHOR_nfa: start 0x82BD end 0x82C9 type bytedata
82C9  .SYS-AUTHOR_lfa: 
82C9 defw .SYS_nfa
; [DASMZ80 ZONE] .SYS-AUTHOR_lfa: start 0x82C9 end 0x82CB type pointers
82CB  .SYS-AUTHOR_cfa: 
82CB defw 0x6306
; [DASMZ80 ZONE] .SYS-AUTHOR_cfa: start 0x82CB end 0x82CD type pointers
82CD  .SYS-AUTHOR_pfa: 
82CD defw paren_dot_quote_cfa
82CF defb 0x15,"v1.1A ? 1983 Abersoft"
82E5 defw cr_cfa
82E7 defw paren_dot_quote_cfa
82E9 defb 0x1E,"v1.1C+Afera ? 2015 Marcos Cruz"
8308 defw cr_cfa
830A defw paren_dot_quote_cfa
830C defb 0x13,"(programandala.net)"
8320 defw semicolon_s_cfa
; [DASMZ80 ZONE] .SYS-AUTHOR_pfa: start 0x82CD end 0x8322 type pointers

829D  .SYS_nfa: 
829D defb 0x04+0x80,".SY","S"+0x80
; [DASMZ80 ZONE] .SYS_nfa: start 0x829D end 0x82A2 type bytedata
82A2  .SYS_lfa: 
82A2 defw ?\_nfa
; [DASMZ80 ZONE] .SYS_lfa: start 0x82A2 end 0x82A4 type pointers
82A4  .SYS_cfa: 
82A4 defw 0x6306
; [DASMZ80 ZONE] .SYS_cfa: start 0x82A4 end 0x82A6 type pointers
82A6  .SYS_pfa: 
82A6 defw paren_dot_quote_cfa
82A8 defb 0x12,"Spectrum fig-Forth"
82BB defw semicolon_s_cfa
; [DASMZ80 ZONE] .SYS_pfa: start 0x82A6 end 0x82BD type pointers

828E  ?\_nfa: 
828E defb 0x02+0x80+0x40,"?","\"+0x80
; [DASMZ80 ZONE] ?\_nfa: start 0x828E end 0x8291 type bytedata
8291  ?\_lfa: 
8291 defw ?-->_nfa
; [DASMZ80 ZONE] ?\_lfa: start 0x8291 end 0x8293 type pointers
8293  ?\_cfa: 
8293 defw 0x6306
; [DASMZ80 ZONE] ?\_cfa: start 0x8293 end 0x8295 type pointers
8295  ?\_pfa: 
8295 defw zero_branch_cfa,0x0004; to 0x829B
8299 defw \_cfa
829B defw semicolon_s_cfa
; [DASMZ80 ZONE] ?\_pfa: start 0x8295 end 0x829D type pointers

827D  ?-->_nfa: 
827D defb 0x04+0x80+0x40,"?--",">"+0x80
; [DASMZ80 ZONE] ?-->_nfa: start 0x827D end 0x8282 type bytedata
8282  ?-->_lfa: 
8282 defw [UNDEFINED]_nfa
; [DASMZ80 ZONE] ?-->_lfa: start 0x8282 end 0x8284 type pointers
8284  ?-->_cfa: 
8284 defw 0x6306
; [DASMZ80 ZONE] ?-->_cfa: start 0x8284 end 0x8286 type pointers
8286  ?-->_pfa: 
8286 defw zero_branch_cfa,0x0004; to 0x828C
828A defw next_screen_cfa
828C defw semicolon_s_cfa
; [DASMZ80 ZONE] ?-->_pfa: start 0x8286 end 0x828E type pointers

8267  [UNDEFINED]_nfa: 
8267 defb 0x0B+0x80+0x40,"[UNDEFINED","]"+0x80
; [DASMZ80 ZONE] [UNDEFINED]_nfa: start 0x8267 end 0x8273 type bytedata
8273  [UNDEFINED]_lfa: 
8273 defw [DEFINED]_nfa
; [DASMZ80 ZONE] [UNDEFINED]_lfa: start 0x8273 end 0x8275 type pointers
8275  [UNDEFINED]_cfa: 
8275 defw 0x6306
; [DASMZ80 ZONE] [UNDEFINED]_cfa: start 0x8275 end 0x8277 type pointers
8277  [UNDEFINED]_pfa: 
8277 defw [DEFINED]_cfa
8279 defw zero_equals_cfa
827B defw semicolon_s_cfa
; [DASMZ80 ZONE] [UNDEFINED]_pfa: start 0x8277 end 0x827D type pointers

824B  [DEFINED]_nfa: 
824B defb 0x09+0x80+0x40,"[DEFINED","]"+0x80
; [DASMZ80 ZONE] [DEFINED]_nfa: start 0x824B end 0x8255 type bytedata
8255  [DEFINED]_lfa: 
8255 defw DEPTH_nfa
; [DASMZ80 ZONE] [DEFINED]_lfa: start 0x8255 end 0x8257 type pointers
8257  [DEFINED]_cfa: 
8257 defw 0x6306
; [DASMZ80 ZONE] [DEFINED]_cfa: start 0x8257 end 0x8259 type pointers
8259  [DEFINED]_pfa: 
8259 defw minus_find_cfa
825B defw dup_cfa
825D defw zero_branch_cfa,0x0006; to 0x8265
8261 defw NIP_cfa
8263 defw NIP_cfa
8265 defw semicolon_s_cfa
; [DASMZ80 ZONE] [DEFINED]_pfa: start 0x8259 end 0x8267 type pointers

8231  DEPTH_nfa: 
8231 defb 0x05+0x80,"DEPT","H"+0x80
; [DASMZ80 ZONE] DEPTH_nfa: start 0x8231 end 0x8237 type bytedata
8237  DEPTH_lfa: 
8237 defw TUCK_nfa
; [DASMZ80 ZONE] DEPTH_lfa: start 0x8237 end 0x8239 type pointers
8239  DEPTH_cfa: 
8239 defw 0x6306
; [DASMZ80 ZONE] DEPTH_cfa: start 0x8239 end 0x823B type pointers
823B  DEPTH_pfa: 
823B defw sp_fetch_cfa
823D defw s0_cfa
823F defw fetch_cfa
8241 defw minus_cfa
8243 defw lit_cfa,0xFFFE
8247 defw slash_cfa
8249 defw semicolon_s_cfa
; [DASMZ80 ZONE] DEPTH_pfa: start 0x823B end 0x824B type pointers

8222  TUCK_nfa: 
8222 defb 0x04+0x80,"TUC","K"+0x80
; [DASMZ80 ZONE] TUCK_nfa: start 0x8222 end 0x8227 type bytedata
8227  TUCK_lfa: 
8227 defw NIP_nfa
; [DASMZ80 ZONE] TUCK_lfa: start 0x8227 end 0x8229 type pointers
8229  TUCK_cfa: 
8229 defw TUCK_pfa
; [DASMZ80 ZONE] TUCK_cfa: start 0x8229 end 0x822B type pointers
822B  TUCK_pfa: 
; [DASMZ80 ZONE] TUCK_cfa: start 0x822B end 0x8231 type code

8215  NIP_nfa: 
8215 defb 0x03+0x80,"NI","P"+0x80
; [DASMZ80 ZONE] NIP_nfa: start 0x8215 end 0x8219 type bytedata
8219  NIP_lfa: 
8219 defw /DISC_nfa
; [DASMZ80 ZONE] NIP_lfa: start 0x8219 end 0x821B type pointers
821B  NIP_cfa: 
821B defw NIP_pfa
; [DASMZ80 ZONE] NIP_cfa: start 0x821B end 0x821D type pointers
821D  NIP_pfa: 
; [DASMZ80 ZONE] NIP_cfa: start 0x821D end 0x8222 type code

8209  /DISC_nfa: 
8209 defb 0x05+0x80,"/DIS","C"+0x80
; [DASMZ80 ZONE] /DISC_nfa: start 0x8209 end 0x820F type bytedata
820F  /DISC_lfa: 
820F defw .(_nfa
; [DASMZ80 ZONE] /DISC_lfa: start 0x820F end 0x8211 type pointers
8211  /DISC_cfa: 
8211 defw 0x6348
; [DASMZ80 ZONE] /DISC_cfa: start 0x8211 end 0x8213 type pointers
8213  /DISC_pfa: 
8213 defw 0x4000
; [DASMZ80 ZONE] /DISC_pfa: start 0x8213 end 0x8215 type worddata

81F4  .(_nfa: 
81F4 defb 0x02+0x80+0x40,".","("+0x80
; [DASMZ80 ZONE] .(_nfa: start 0x81F4 end 0x81F7 type bytedata
81F7  .(_lfa: 
81F7 defw \_nfa
; [DASMZ80 ZONE] .(_lfa: start 0x81F7 end 0x81F9 type pointers
81F9  .(_cfa: 
81F9 defw 0x6306
; [DASMZ80 ZONE] .(_cfa: start 0x81F9 end 0x81FB type pointers
81FB  .(_pfa: 
81FB defw lit_cfa,0x0029
81FF defw text_cfa
8201 defw pad_cfa
8203 defw count_cfa
8205 defw type_cfa
8207 defw semicolon_s_cfa
; [DASMZ80 ZONE] .(_pfa: start 0x81FB end 0x8209 type pointers

81DA  \_nfa: 
81DA defb 0x01+0x80+0x40,"\"+0x80
; [DASMZ80 ZONE] \_nfa: start 0x81DA end 0x81DC type bytedata
81DC  \_lfa: 
81DC defw [CHAR]_nfa
; [DASMZ80 ZONE] \_lfa: start 0x81DC end 0x81DE type pointers
81DE  \_cfa: 
81DE defw 0x6306
; [DASMZ80 ZONE] \_cfa: start 0x81DE end 0x81E0 type pointers
81E0  \_pfa: 
81E0 defw in_cfa
81E2 defw fetch_cfa
81E4 defw c_slash_l_cfa
81E6 defw mod_cfa
81E8 defw c_slash_l_cfa
81EA defw swap_cfa
81EC defw minus_cfa
81EE defw in_cfa
81F0 defw plus_store_cfa
81F2 defw semicolon_s_cfa
; [DASMZ80 ZONE] \_pfa: start 0x81E0 end 0x81F4 type pointers

81C9  [CHAR]_nfa: 
81C9 defb 0x06+0x80+0x40,"[CHAR","]"+0x80
; [DASMZ80 ZONE] [CHAR]_nfa: start 0x81C9 end 0x81D0 type bytedata
81D0  [CHAR]_lfa: 
81D0 defw CHAR_nfa
; [DASMZ80 ZONE] [CHAR]_lfa: start 0x81D0 end 0x81D2 type pointers
81D2  [CHAR]_cfa: 
81D2 defw 0x6306
; [DASMZ80 ZONE] [CHAR]_cfa: start 0x81D2 end 0x81D4 type pointers
81D4  [CHAR]_pfa: 
81D4 defw CHAR_cfa
81D6 defw literal_cfa
81D8 defw semicolon_s_cfa
; [DASMZ80 ZONE] [CHAR]_pfa: start 0x81D4 end 0x81DA type pointers

81B4  CHAR_nfa: 
81B4 defb 0x04+0x80,"CHA","R"+0x80
; [DASMZ80 ZONE] CHAR_nfa: start 0x81B4 end 0x81B9 type bytedata
81B9  CHAR_lfa: 
81B9 defw LOADER_nfa
; [DASMZ80 ZONE] CHAR_lfa: start 0x81B9 end 0x81BB type pointers
81BB  CHAR_cfa: 
81BB defw 0x6306
; [DASMZ80 ZONE] CHAR_cfa: start 0x81BB end 0x81BD type pointers
81BD  CHAR_pfa: 
81BD defw b_l_cfa
81BF defw word_cfa
81C1 defw here_cfa
81C3 defw one_plus_cfa
81C5 defw c_fetch_cfa
81C7 defw semicolon_s_cfa
; [DASMZ80 ZONE] CHAR_pfa: start 0x81BD end 0x81C9 type pointers

8167  LOADER_nfa: 
8167 defb 0x06+0x80,"LOADE","R"+0x80
; [DASMZ80 ZONE] LOADER_nfa: start 0x8167 end 0x816E type bytedata
816E  LOADER_lfa: 
816E defw LOADED?_nfa
; [DASMZ80 ZONE] LOADER_lfa: start 0x816E end 0x8170 type pointers
8170  LOADER_cfa: 
8170 defw 0x6306
; [DASMZ80 ZONE] LOADER_cfa: start 0x8170 end 0x8172 type pointers
8172  LOADER_pfa: 
8172 defw zero_cfa
8174 defw LOADED?_cfa
8176 defw store_cfa
8178 defw LOADED?_cfa
817A defw fetch_cfa
817C defw zero_equals_cfa
817E defw zero_branch_cfa,0x001A; to 0x819A
8182 defw lit_cfa,0x00FF
8186 defw lit_cfa,0x5C8C
818A defw c_store_cfa
818C defw empty_buffers_cfa
818E defw init_disc_cfa
8190 defw loadt_cfa
8192 defw one_cfa
8194 defw load_cfa
8196 defw branch_cfa,0xFFE0; to 0x8178
819A defw LOADED?_cfa
819C defw fetch_cfa
819E defw lit_cfa,0xFFFF
81A2 defw equals_cfa
81A4 defw zero_branch_cfa,0x000C; to 0x81B2
81A8 defw rp_store_cfa
81AA defw latest_cfa
81AC defw pfa_cfa
81AE defw cfa_cfa
81B0 defw execute_cfa
81B2 defw semicolon_s_cfa
; [DASMZ80 ZONE] LOADER_pfa: start 0x8172 end 0x81B4 type pointers

8159  LOADED?_nfa: 
8159 defb 0x07+0x80,"LOADED","?"+0x80
; [DASMZ80 ZONE] LOADED?_nfa: start 0x8159 end 0x8161 type bytedata
8161  LOADED?_lfa: 
8161 defw udg_nfa
; [DASMZ80 ZONE] LOADED?_lfa: start 0x8161 end 0x8163 type pointers
8163  LOADED?_cfa: 
8163 defw 0x6362
; [DASMZ80 ZONE] LOADED?_cfa: start 0x8163 end 0x8165 type pointers
8165  LOADED?_pfa: 
8165 defw 0x0000
; [DASMZ80 ZONE] LOADED?_pfa: start 0x8165 end 0x8167 type worddata

8149  udg_nfa: 
8149 defb 0x03+0x80,"UD","G"+0x80
; [DASMZ80 ZONE] udg_nfa: start 0x8149 end 0x814D type bytedata
814D  udg_lfa: 
814D defw init_disc_nfa
; [DASMZ80 ZONE] udg_lfa: start 0x814D end 0x814F type pointers
814F  udg_cfa: 
814F defw 0x6306
; [DASMZ80 ZONE] udg_cfa: start 0x814F end 0x8151 type pointers
8151  udg_pfa: 
8151 defw lit_cfa,0x5C7B
8155 defw fetch_cfa
8157 defw semicolon_s_cfa
; [DASMZ80 ZONE] udg_pfa: start 0x8151 end 0x8159 type pointers

812F  init_disc_nfa: 
812F defb 0x09+0x80,"INIT-DIS","C"+0x80
; [DASMZ80 ZONE] init_disc_nfa: start 0x812F end 0x8139 type bytedata
8139  init_disc_lfa: 
8139 defw inkey_nfa
; [DASMZ80 ZONE] init_disc_lfa: start 0x8139 end 0x813B type pointers
813B  init_disc_cfa: 
813B defw 0x6306
; [DASMZ80 ZONE] init_disc_cfa: start 0x813B end 0x813D type pointers
813D  init_disc_pfa: 
813D defw DISC-BANK_cfa
813F defw BANK_cfa
8141 defw (INIT-DISC)_cfa
8143 defw zero_cfa
8145 defw BANK_cfa
8147 defw semicolon_s_cfa
; [DASMZ80 ZONE] init_disc_pfa: start 0x813D end 0x8149 type pointers

810C  inkey_nfa: 
810C defb 0x05+0x80,"INKE","Y"+0x80
; [DASMZ80 ZONE] inkey_nfa: start 0x810C end 0x8112 type bytedata
8112  inkey_lfa: 
8112 defw endcase_nfa
; [DASMZ80 ZONE] inkey_lfa: start 0x8112 end 0x8114 type pointers
8114  inkey_cfa: 
8114 defw inkey_pfa
; [DASMZ80 ZONE] inkey_cfa: start 0x8114 end 0x8116 type pointers
8116  inkey_pfa: 
; [DASMZ80 ZONE] inkey_cfa: start 0x8116 end 0x812F type code

80DA  endcase_nfa: 
80DA defb 0x07+0x80+0x40,"ENDCAS","E"+0x80
; [DASMZ80 ZONE] endcase_nfa: start 0x80DA end 0x80E2 type bytedata
80E2  endcase_lfa: 
80E2 defw endof_nfa
; [DASMZ80 ZONE] endcase_lfa: start 0x80E2 end 0x80E4 type pointers
80E4  endcase_cfa: 
80E4 defw 0x6306
; [DASMZ80 ZONE] endcase_cfa: start 0x80E4 end 0x80E6 type pointers
80E6  endcase_pfa: 
80E6 defw lit_cfa,0x0004
80EA defw question_pairs_cfa
80EC defw compile_cfa,DROP_cfa
80F0 defw sp_fetch_cfa
80F2 defw csp_cfa
80F4 defw fetch_cfa
80F6 defw equals_cfa
80F8 defw zero_equals_cfa
80FA defw zero_branch_cfa,0x000A; to 0x8106
80FE defw two_cfa
8100 defw endif_cfa
8102 defw branch_cfa,0xFFEC; to 0x80F0
8106 defw csp_cfa
8108 defw store_cfa
810A defw semicolon_s_cfa
; [DASMZ80 ZONE] endcase_pfa: start 0x80E6 end 0x810C type pointers

80B4  endof_nfa: 
80B4 defb 0x05+0x80+0x40,"ENDO","F"+0x80
; [DASMZ80 ZONE] endof_nfa: start 0x80B4 end 0x80BA type bytedata
80BA  endof_lfa: 
80BA defw of_nfa
; [DASMZ80 ZONE] endof_lfa: start 0x80BA end 0x80BC type pointers
80BC  endof_cfa: 
80BC defw 0x6306
; [DASMZ80 ZONE] endof_cfa: start 0x80BC end 0x80BE type pointers
80BE  endof_pfa: 
80BE defw lit_cfa,0x0005
80C2 defw question_pairs_cfa
80C4 defw compile_cfa,BRANCH_cfa
80C8 defw here_cfa
80CA defw zero_cfa
80CC defw comma_cfa
80CE defw swap_cfa
80D0 defw two_cfa
80D2 defw endif_cfa
80D4 defw lit_cfa,0x0004
80D8 defw semicolon_s_cfa
; [DASMZ80 ZONE] endof_pfa: start 0x80BE end 0x80DA type pointers

808B  of_nfa: 
808B defb 0x02+0x80+0x40,"O","F"+0x80
; [DASMZ80 ZONE] of_nfa: start 0x808B end 0x808E type bytedata
808E  of_lfa: 
808E defw case_nfa
; [DASMZ80 ZONE] of_lfa: start 0x808E end 0x8090 type pointers
8090  of_cfa: 
8090 defw 0x6306
; [DASMZ80 ZONE] of_cfa: start 0x8090 end 0x8092 type pointers
8092  of_pfa: 
8092 defw lit_cfa,0x0004
8096 defw question_pairs_cfa
8098 defw compile_cfa,OVER_cfa
809C defw compile_cfa,=_cfa
80A0 defw compile_cfa,0BRANCH_cfa
80A4 defw here_cfa
80A6 defw zero_cfa
80A8 defw comma_cfa
80AA defw compile_cfa,DROP_cfa
80AE defw lit_cfa,0x0005
80B2 defw semicolon_s_cfa
; [DASMZ80 ZONE] of_pfa: start 0x8092 end 0x80B4 type pointers

8074  case_nfa: 
8074 defb 0x04+0x80+0x40,"CAS","E"+0x80
; [DASMZ80 ZONE] case_nfa: start 0x8074 end 0x8079 type bytedata
8079  case_lfa: 
8079 defw draw_nfa
; [DASMZ80 ZONE] case_lfa: start 0x8079 end 0x807B type pointers
807B  case_cfa: 
807B defw 0x6306
; [DASMZ80 ZONE] case_cfa: start 0x807B end 0x807D type pointers
807D  case_pfa: 
807D defw question_comp_cfa
807F defw csp_cfa
8081 defw fetch_cfa
8083 defw store_csp_cfa
8085 defw lit_cfa,0x0004
8089 defw semicolon_s_cfa
; [DASMZ80 ZONE] case_pfa: start 0x807D end 0x808B type pointers

7FB7  draw_nfa: 
7FB7 defb 0x04+0x80,"DRA","W"+0x80
; [DASMZ80 ZONE] draw_nfa: start 0x7FB7 end 0x7FBC type bytedata
7FBC  draw_lfa: 
7FBC defw incy_nfa
; [DASMZ80 ZONE] draw_lfa: start 0x7FBC end 0x7FBE type pointers
7FBE  draw_cfa: 
7FBE defw 0x6306
; [DASMZ80 ZONE] draw_cfa: start 0x7FBE end 0x7FC0 type pointers
7FC0  draw_pfa: 
7FC0 defw lit_cfa,0x5C7E
7FC4 defw c_fetch_cfa
7FC6 defw dup_cfa
7FC8 defw zero_cfa
7FCA defw swap_cfa
7FCC defw y1_cfa
7FCE defw two_store_cfa
7FD0 defw minus_cfa
7FD2 defw dup_cfa
7FD4 defw abs_cfa
7FD6 defw rot_cfa
7FD8 defw lit_cfa,0x5C7D
7FDC defw c_fetch_cfa
7FDE defw dup_cfa
7FE0 defw zero_cfa
7FE2 defw swap_cfa
7FE4 defw x1_cfa
7FE6 defw two_store_cfa
7FE8 defw minus_cfa
7FEA defw dup_cfa
7FEC defw abs_cfa
7FEE defw rot_cfa
7FF0 defw max_cfa
7FF2 defw to_r_cfa
7FF4 defw dup_cfa
7FF6 defw zero_less_than_cfa
7FF8 defw zero_branch_cfa,0x0012; to 0x800C
7FFC defw abs_cfa
7FFE defw zero_cfa
8000 defw swap_cfa
8002 defw r_cfa
8004 defw m_slash_mod_cfa
8006 defw dminus_cfa
8008 defw branch_cfa,0x000A; to 0x8014
800C defw zero_cfa
800E defw swap_cfa
8010 defw r_cfa
8012 defw m_slash_mod_cfa
8014 defw incx_cfa
8016 defw two_store_cfa
8018 defw drop_cfa
801A defw dup_cfa
801C defw zero_less_than_cfa
801E defw zero_branch_cfa,0x0012; to 0x8032
8022 defw abs_cfa
8024 defw zero_cfa
8026 defw swap_cfa
8028 defw r_cfa
802A defw m_slash_mod_cfa
802C defw dminus_cfa
802E defw branch_cfa,0x000A; to 0x803A
8032 defw zero_cfa
8034 defw swap_cfa
8036 defw r_cfa
8038 defw m_slash_mod_cfa
803A defw incy_cfa
803C defw two_store_cfa
803E defw drop_cfa
8040 defw from_r_cfa
8042 defw one_plus_cfa
8044 defw zero_cfa
8046 defw paren_do_cfa
8048 defw x1_cfa
804A defw fetch_cfa
804C defw y1_cfa
804E defw fetch_cfa
8050 defw plot_cfa
8052 defw x1_cfa
8054 defw two_fetch_cfa
8056 defw incx_cfa
8058 defw two_fetch_cfa
805A defw d_plus_cfa
805C defw x1_cfa
805E defw two_store_cfa
8060 defw y1_cfa
8062 defw two_fetch_cfa
8064 defw incy_cfa
8066 defw two_fetch_cfa
8068 defw d_plus_cfa
806A defw y1_cfa
806C defw two_store_cfa
806E defw paren_loop_cfa,0xFFD8; to 0x8048
8072 defw semicolon_s_cfa
; [DASMZ80 ZONE] draw_pfa: start 0x7FC0 end 0x8074 type pointers

7FAA  incy_nfa: 
7FAA defb 0x04+0x80,"INC","Y"+0x80
; [DASMZ80 ZONE] incy_nfa: start 0x7FAA end 0x7FAF type bytedata
7FAF  incy_lfa: 
7FAF defw incx_nfa
; [DASMZ80 ZONE] incy_lfa: start 0x7FAF end 0x7FB1 type pointers
7FB1  incy_cfa: 
7FB1 defw 0x7F23
; [DASMZ80 ZONE] incy_cfa: start 0x7FB1 end 0x7FB3 type pointers
7FB3  incy_pfa: 
7FB3 defw 0x0000,0x0000
; [DASMZ80 ZONE] incy_pfa: start 0x7FB3 end 0x7FB7 type worddata

7F9D  incx_nfa: 
7F9D defb 0x04+0x80,"INC","X"+0x80
; [DASMZ80 ZONE] incx_nfa: start 0x7F9D end 0x7FA2 type bytedata
7FA2  incx_lfa: 
7FA2 defw y1_nfa
; [DASMZ80 ZONE] incx_lfa: start 0x7FA2 end 0x7FA4 type pointers
7FA4  incx_cfa: 
7FA4 defw 0x7F23
; [DASMZ80 ZONE] incx_cfa: start 0x7FA4 end 0x7FA6 type pointers
7FA6  incx_pfa: 
7FA6 defw 0x0000,0x0000
; [DASMZ80 ZONE] incx_pfa: start 0x7FA6 end 0x7FAA type worddata

7F92  y1_nfa: 
7F92 defb 0x02+0x80,"Y","1"+0x80
; [DASMZ80 ZONE] y1_nfa: start 0x7F92 end 0x7F95 type bytedata
7F95  y1_lfa: 
7F95 defw x1_nfa
; [DASMZ80 ZONE] y1_lfa: start 0x7F95 end 0x7F97 type pointers
7F97  y1_cfa: 
7F97 defw 0x7F23
; [DASMZ80 ZONE] y1_cfa: start 0x7F97 end 0x7F99 type pointers
7F99  y1_pfa: 
7F99 defw 0x0000,0x0000
; [DASMZ80 ZONE] y1_pfa: start 0x7F99 end 0x7F9D type worddata

7F87  x1_nfa: 
7F87 defb 0x02+0x80,"X","1"+0x80
; [DASMZ80 ZONE] x1_nfa: start 0x7F87 end 0x7F8A type bytedata
7F8A  x1_lfa: 
7F8A defw plot_nfa
; [DASMZ80 ZONE] x1_lfa: start 0x7F8A end 0x7F8C type pointers
7F8C  x1_cfa: 
7F8C defw 0x7F23
; [DASMZ80 ZONE] x1_cfa: start 0x7F8C end 0x7F8E type pointers
7F8E  x1_pfa: 
7F8E defw 0x0000,0x0000
; [DASMZ80 ZONE] x1_pfa: start 0x7F8E end 0x7F92 type worddata

7F65  plot_nfa: 
7F65 defb 0x04+0x80,"PLO","T"+0x80
; [DASMZ80 ZONE] plot_nfa: start 0x7F65 end 0x7F6A type bytedata
7F6A  plot_lfa: 
7F6A defw exit_nfa
; [DASMZ80 ZONE] plot_lfa: start 0x7F6A end 0x7F6C type pointers
7F6C  plot_cfa: 
7F6C defw plot_pfa
; [DASMZ80 ZONE] plot_cfa: start 0x7F6C end 0x7F6E type pointers
7F6E  plot_pfa: 
; [DASMZ80 ZONE] plot_cfa: start 0x7F6E end 0x7F87 type code

7F54  exit_nfa: 
7F54 defb 0x04+0x80,"EXI","T"+0x80
; [DASMZ80 ZONE] exit_nfa: start 0x7F54 end 0x7F59 type bytedata
7F59  exit_lfa: 
7F59 defw two_over_nfa
; [DASMZ80 ZONE] exit_lfa: start 0x7F59 end 0x7F5B type pointers
7F5B  exit_cfa: 
7F5B defw 0x6306
; [DASMZ80 ZONE] exit_cfa: start 0x7F5B end 0x7F5D type pointers
7F5D  exit_pfa: 
7F5D defw from_r_cfa
7F5F defw drop_cfa
7F61 defw semicolon_s_cfa
; [DASMZ80 ZONE] exit_pfa: start 0x7F5D end 0x7F63 type pointers

7F3A  two_over_nfa: 
7F3A defb 0x05+0x80,"2OVE","R"+0x80
; [DASMZ80 ZONE] two_over_nfa: start 0x7F3A end 0x7F40 type bytedata
7F40  two_over_lfa: 
7F40 defw u_dot_r_nfa
; [DASMZ80 ZONE] two_over_lfa: start 0x7F40 end 0x7F42 type pointers
7F42  two_over_cfa: 
7F42 defw 0x6306
; [DASMZ80 ZONE] two_over_cfa: start 0x7F42 end 0x7F44 type pointers
7F44  two_over_pfa: 
7F44 defw two_swap_cfa
7F46 defw two_dup_cfa
7F48 defw to_r_cfa
7F4A defw to_r_cfa
7F4C defw two_swap_cfa
7F4E defw from_r_cfa
7F50 defw from_r_cfa
7F52 defw semicolon_s_cfa
; [DASMZ80 ZONE] two_over_pfa: start 0x7F44 end 0x7F54 type pointers

7F28  u_dot_r_nfa: 
7F28 defb 0x03+0x80,"U.","R"+0x80
; [DASMZ80 ZONE] u_dot_r_nfa: start 0x7F28 end 0x7F2C type bytedata
7F2C  u_dot_r_lfa: 
7F2C defw two_variable_nfa
; [DASMZ80 ZONE] u_dot_r_lfa: start 0x7F2C end 0x7F2E type pointers
7F2E  u_dot_r_cfa: 
7F2E defw 0x6306
; [DASMZ80 ZONE] u_dot_r_cfa: start 0x7F2E end 0x7F30 type pointers
7F30  u_dot_r_pfa: 
7F30 defw to_r_cfa
7F32 defw zero_cfa
7F34 defw from_r_cfa
7F36 defw d_dot_r_cfa
7F38 defw semicolon_s_cfa
; [DASMZ80 ZONE] u_dot_r_pfa: start 0x7F30 end 0x7F3A type pointers

7F11  two_variable_nfa: 
7F11 defb 0x09+0x80,"2VARIABL","E"+0x80
; [DASMZ80 ZONE] two_variable_nfa: start 0x7F11 end 0x7F1B type bytedata
7F1B  two_variable_lfa: 
7F1B defw two_constant_nfa
; [DASMZ80 ZONE] two_variable_lfa: start 0x7F1B end 0x7F1D type pointers
7F1D  two_variable_cfa: 
7F1D defw 0x6306
; [DASMZ80 ZONE] two_variable_cfa: start 0x7F1D end 0x7F1F type pointers
7F1F  two_variable_pfa: 
7F1F defw two_constant_cfa
7F21 defw paren_semicolon_code_cfa
; [DASMZ80 ZONE] two_variable_pfa: start 0x7F1F end 0x7F23 type pointers

7EE2  two_constant_nfa: 
7EE2 defb 0x09+0x80,"2CONSTAN","T"+0x80
; [DASMZ80 ZONE] two_constant_nfa: start 0x7EE2 end 0x7EEC type bytedata
7EEC  two_constant_lfa: 
7EEC defw j_nfa
; [DASMZ80 ZONE] two_constant_lfa: start 0x7EEC end 0x7EEE type pointers
7EEE  two_constant_cfa: 
7EEE defw 0x6306
; [DASMZ80 ZONE] two_constant_cfa: start 0x7EEE end 0x7EF0 type pointers
7EF0  two_constant_pfa: 
7EF0 defw create_cfa
7EF2 defw smudge_cfa
7EF4 defw here_cfa
7EF6 defw two_store_cfa
7EF8 defw lit_cfa,0x0004
7EFC defw allot_cfa
7EFE defw paren_semicolon_code_cfa
; [DASMZ80 ZONE] two_constant_pfa: start 0x7EF0 end 0x7F00 type pointers

7ECE  j_nfa: 
7ECE defb 0x01+0x80,"J"+0x80
; [DASMZ80 ZONE] j_nfa: start 0x7ECE end 0x7ED0 type bytedata
7ED0  j_lfa: 
7ED0 defw i_tick_nfa
; [DASMZ80 ZONE] j_lfa: start 0x7ED0 end 0x7ED2 type pointers
7ED2  j_cfa: 
7ED2 defw j_pfa
; [DASMZ80 ZONE] j_cfa: start 0x7ED2 end 0x7ED4 type pointers
7ED4  j_pfa: 
; [DASMZ80 ZONE] j_cfa: start 0x7ED4 end 0x7EE2 type code

7EBB  i_tick_nfa: 
7EBB defb 0x02+0x80,"I","'"+0x80
; [DASMZ80 ZONE] i_tick_nfa: start 0x7EBB end 0x7EBE type bytedata
7EBE  i_tick_lfa: 
7EBE defw not_nfa
; [DASMZ80 ZONE] i_tick_lfa: start 0x7EBE end 0x7EC0 type pointers
7EC0  i_tick_cfa: 
7EC0 defw i_tick_pfa
; [DASMZ80 ZONE] i_tick_cfa: start 0x7EC0 end 0x7EC2 type pointers
7EC2  i_tick_pfa: 
; [DASMZ80 ZONE] i_tick_cfa: start 0x7EC2 end 0x7ECE type code

7EAF  not_nfa: 
7EAF defb 0x03+0x80,"NO","T"+0x80
; [DASMZ80 ZONE] not_nfa: start 0x7EAF end 0x7EB3 type bytedata
7EB3  not_lfa: 
7EB3 defw inverse_nfa
; [DASMZ80 ZONE] not_lfa: start 0x7EB3 end 0x7EB5 type pointers
7EB5  not_cfa: 
7EB5 defw 0x6306
; [DASMZ80 ZONE] not_cfa: start 0x7EB5 end 0x7EB7 type pointers
7EB7  not_pfa: 
7EB7 defw zero_equals_cfa
7EB9 defw semicolon_s_cfa
; [DASMZ80 ZONE] not_pfa: start 0x7EB7 end 0x7EBB type pointers

7E75  inverse_nfa: 
7E75 defb 0x07+0x80,"INVERS","E"+0x80
; [DASMZ80 ZONE] inverse_nfa: start 0x7E75 end 0x7E7D type bytedata
7E7D  inverse_lfa: 
7E7D defw gover_nfa
; [DASMZ80 ZONE] inverse_lfa: start 0x7E7D end 0x7E7F type pointers
7E7F  inverse_cfa: 
7E7F defw 0x6306
; [DASMZ80 ZONE] inverse_cfa: start 0x7E7F end 0x7E81 type pointers
7E81  inverse_pfa: 
7E81 defw zero_branch_cfa,0x0018; to 0x7E9B
7E85 defw lit_cfa,0x5C91
7E89 defw c_fetch_cfa
7E8B defw lit_cfa,0x0008
7E8F defw or_cfa
7E91 defw lit_cfa,0x5C91
7E95 defw store_cfa
7E97 defw branch_cfa,0x0014; to 0x7EAD
7E9B defw lit_cfa,0x5C91
7E9F defw c_fetch_cfa
7EA1 defw lit_cfa,0x00F7
7EA5 defw and_cfa
7EA7 defw lit_cfa,0x5C91
7EAB defw store_cfa
7EAD defw semicolon_s_cfa
; [DASMZ80 ZONE] inverse_pfa: start 0x7E81 end 0x7EAF type pointers

7E3F  gover_nfa: 
7E3F defb 0x05+0x80,"GOVE","R"+0x80
; [DASMZ80 ZONE] gover_nfa: start 0x7E3F end 0x7E45 type bytedata
7E45  gover_lfa: 
7E45 defw bright_nfa
; [DASMZ80 ZONE] gover_lfa: start 0x7E45 end 0x7E47 type pointers
7E47  gover_cfa: 
7E47 defw 0x6306
; [DASMZ80 ZONE] gover_cfa: start 0x7E47 end 0x7E49 type pointers
7E49  gover_pfa: 
7E49 defw zero_branch_cfa,0x0016; to 0x7E61
7E4D defw lit_cfa,0x5C91
7E51 defw c_fetch_cfa
7E53 defw two_cfa
7E55 defw or_cfa
7E57 defw lit_cfa,0x5C91
7E5B defw store_cfa
7E5D defw branch_cfa,0x0014; to 0x7E73
7E61 defw lit_cfa,0x5C91
7E65 defw c_fetch_cfa
7E67 defw lit_cfa,0x00FD
7E6B defw and_cfa
7E6D defw lit_cfa,0x5C91
7E71 defw store_cfa
7E73 defw semicolon_s_cfa
; [DASMZ80 ZONE] gover_pfa: start 0x7E49 end 0x7E75 type pointers

7E06  bright_nfa: 
7E06 defb 0x06+0x80,"BRIGH","T"+0x80
; [DASMZ80 ZONE] bright_nfa: start 0x7E06 end 0x7E0D type bytedata
7E0D  bright_lfa: 
7E0D defw flash_nfa
; [DASMZ80 ZONE] bright_lfa: start 0x7E0D end 0x7E0F type pointers
7E0F  bright_cfa: 
7E0F defw 0x6306
; [DASMZ80 ZONE] bright_cfa: start 0x7E0F end 0x7E11 type pointers
7E11  bright_pfa: 
7E11 defw zero_branch_cfa,0x0018; to 0x7E2B
7E15 defw lit_cfa,0x5C8D
7E19 defw c_fetch_cfa
7E1B defw lit_cfa,0x0040
7E1F defw or_cfa
7E21 defw lit_cfa,0x5C8D
7E25 defw store_cfa
7E27 defw branch_cfa,0x0014; to 0x7E3D
7E2B defw lit_cfa,0x5C8D
7E2F defw c_fetch_cfa
7E31 defw lit_cfa,0x00BF
7E35 defw and_cfa
7E37 defw lit_cfa,0x5C8D
7E3B defw store_cfa
7E3D defw semicolon_s_cfa
; [DASMZ80 ZONE] bright_pfa: start 0x7E11 end 0x7E3F type pointers

7DCE  flash_nfa: 
7DCE defb 0x05+0x80,"FLAS","H"+0x80
; [DASMZ80 ZONE] flash_nfa: start 0x7DCE end 0x7DD4 type bytedata
7DD4  flash_lfa: 
7DD4 defw ink_nfa
; [DASMZ80 ZONE] flash_lfa: start 0x7DD4 end 0x7DD6 type pointers
7DD6  flash_cfa: 
7DD6 defw 0x6306
; [DASMZ80 ZONE] flash_cfa: start 0x7DD6 end 0x7DD8 type pointers
7DD8  flash_pfa: 
7DD8 defw zero_branch_cfa,0x0018; to 0x7DF2
7DDC defw lit_cfa,0x5C8D
7DE0 defw c_fetch_cfa
7DE2 defw lit_cfa,0x0080
7DE6 defw or_cfa
7DE8 defw lit_cfa,0x5C8D
7DEC defw store_cfa
7DEE defw branch_cfa,0x0014; to 0x7E04
7DF2 defw lit_cfa,0x5C8D
7DF6 defw c_fetch_cfa
7DF8 defw lit_cfa,0x007F
7DFC defw and_cfa
7DFE defw lit_cfa,0x5C8D
7E02 defw store_cfa
7E04 defw semicolon_s_cfa
; [DASMZ80 ZONE] flash_pfa: start 0x7DD8 end 0x7E06 type pointers

7D30  ink_nfa: 
7D30 defb 0x03+0x80,"IN","K"+0x80
; [DASMZ80 ZONE] ink_nfa: start 0x7D30 end 0x7D34 type bytedata
7D34  ink_lfa: 
7D34 defw point_nfa
; [DASMZ80 ZONE] ink_lfa: start 0x7D34 end 0x7D36 type pointers
7D36  ink_cfa: 
7D36 defw 0x6306
; [DASMZ80 ZONE] ink_cfa: start 0x7D36 end 0x7D38 type pointers
7D38  ink_pfa: 
7D38 defw abs_cfa
7D3A defw dup_cfa
7D3C defw lit_cfa,0x0009
7D40 defw greater_than_cfa
7D42 defw zero_branch_cfa,0x0008; to 0x7D4C
7D46 defw drop_cfa
7D48 defw branch_cfa,0x0082; to 0x7DCC
7D4C defw dup_cfa
7D4E defw lit_cfa,0x0009
7D52 defw equals_cfa
7D54 defw zero_branch_cfa,0x001A; to 0x7D70
7D58 defw lit_cfa,0x5C91
7D5C defw c_fetch_cfa
7D5E defw lit_cfa,0x0020
7D62 defw or_cfa
7D64 defw lit_cfa,0x5C91
7D68 defw c_store_cfa
7D6A defw drop_cfa
7D6C defw branch_cfa,0x005E; to 0x7DCC
7D70 defw dup_cfa
7D72 defw lit_cfa,0x0008
7D76 defw equals_cfa
7D78 defw zero_branch_cfa,0x001A; to 0x7D94
7D7C defw lit_cfa,0x5C8E
7D80 defw c_fetch_cfa
7D82 defw lit_cfa,0x0007
7D86 defw or_cfa
7D88 defw lit_cfa,0x5C8E
7D8C defw c_store_cfa
7D8E defw drop_cfa
7D90 defw branch_cfa,0x003A; to 0x7DCC
7D94 defw lit_cfa,0x5C8D
7D98 defw c_fetch_cfa
7D9A defw lit_cfa,0x00F8
7D9E defw and_cfa
7DA0 defw or_cfa
7DA2 defw lit_cfa,0x5C8D
7DA6 defw c_store_cfa
7DA8 defw lit_cfa,0x5C91
7DAC defw c_fetch_cfa
7DAE defw lit_cfa,0x00DF
7DB2 defw and_cfa
7DB4 defw lit_cfa,0x5C91
7DB8 defw store_cfa
7DBA defw lit_cfa,0x5C8E
7DBE defw c_fetch_cfa
7DC0 defw lit_cfa,0x00F8
7DC4 defw and_cfa
7DC6 defw lit_cfa,0x5C8E
7DCA defw store_cfa
7DCC defw semicolon_s_cfa
; [DASMZ80 ZONE] ink_pfa: start 0x7D38 end 0x7DCE type pointers

7D07  point_nfa: 
7D07 defb 0x05+0x80,"POIN","T"+0x80
; [DASMZ80 ZONE] point_nfa: start 0x7D07 end 0x7D0D type bytedata
7D0D  point_lfa: 
7D0D defw attr_nfa
; [DASMZ80 ZONE] point_lfa: start 0x7D0D end 0x7D0F type pointers
7D0F  point_cfa: 
7D0F defw point_pfa
; [DASMZ80 ZONE] point_cfa: start 0x7D0F end 0x7D11 type pointers
7D11  point_pfa: 
; [DASMZ80 ZONE] point_cfa: start 0x7D11 end 0x7D30 type code

7CE7  attr_nfa: 
7CE7 defb 0x04+0x80,"ATT","R"+0x80
; [DASMZ80 ZONE] attr_nfa: start 0x7CE7 end 0x7CEC type bytedata
7CEC  attr_lfa: 
7CEC defw paper_nfa
; [DASMZ80 ZONE] attr_lfa: start 0x7CEC end 0x7CEE type pointers
7CEE  attr_cfa: 
7CEE defw attr_pfa
; [DASMZ80 ZONE] attr_cfa: start 0x7CEE end 0x7CF0 type pointers
7CF0  attr_pfa: 
; [DASMZ80 ZONE] attr_cfa: start 0x7CF0 end 0x7D07 type code

7C41  paper_nfa: 
7C41 defb 0x05+0x80,"PAPE","R"+0x80
; [DASMZ80 ZONE] paper_nfa: start 0x7C41 end 0x7C47 type bytedata
7C47  paper_lfa: 
7C47 defw bleep_nfa
; [DASMZ80 ZONE] paper_lfa: start 0x7C47 end 0x7C49 type pointers
7C49  paper_cfa: 
7C49 defw 0x6306
; [DASMZ80 ZONE] paper_cfa: start 0x7C49 end 0x7C4B type pointers
7C4B  paper_pfa: 
7C4B defw abs_cfa
7C4D defw dup_cfa
7C4F defw lit_cfa,0x0009
7C53 defw greater_than_cfa
7C55 defw zero_branch_cfa,0x0008; to 0x7C5F
7C59 defw drop_cfa
7C5B defw branch_cfa,0x0088; to 0x7CE5
7C5F defw dup_cfa
7C61 defw lit_cfa,0x0009
7C65 defw equals_cfa
7C67 defw zero_branch_cfa,0x001A; to 0x7C83
7C6B defw lit_cfa,0x5C91
7C6F defw c_fetch_cfa
7C71 defw lit_cfa,0x0080
7C75 defw or_cfa
7C77 defw lit_cfa,0x5C91
7C7B defw c_store_cfa
7C7D defw drop_cfa
7C7F defw branch_cfa,0x0064; to 0x7CE5
7C83 defw dup_cfa
7C85 defw lit_cfa,0x0008
7C89 defw equals_cfa
7C8B defw zero_branch_cfa,0x001A; to 0x7CA7
7C8F defw lit_cfa,0x5C8E
7C93 defw c_fetch_cfa
7C95 defw lit_cfa,0x0038
7C99 defw or_cfa
7C9B defw lit_cfa,0x5C8E
7C9F defw c_store_cfa
7CA1 defw drop_cfa
7CA3 defw branch_cfa,0x0040; to 0x7CE5
7CA7 defw lit_cfa,0x0008
7CAB defw star_cfa
7CAD defw lit_cfa,0x5C8D
7CB1 defw c_fetch_cfa
7CB3 defw lit_cfa,0x00C7
7CB7 defw and_cfa
7CB9 defw or_cfa
7CBB defw lit_cfa,0x5C8D
7CBF defw c_store_cfa
7CC1 defw lit_cfa,0x5C91
7CC5 defw c_fetch_cfa
7CC7 defw lit_cfa,0x007F
7CCB defw and_cfa
7CCD defw lit_cfa,0x5C91
7CD1 defw store_cfa
7CD3 defw lit_cfa,0x5C8E
7CD7 defw c_fetch_cfa
7CD9 defw lit_cfa,0x00C7
7CDD defw and_cfa
7CDF defw lit_cfa,0x5C8E
7CE3 defw store_cfa
7CE5 defw semicolon_s_cfa
; [DASMZ80 ZONE] paper_pfa: start 0x7C4B end 0x7CE7 type pointers

7C29  bleep_nfa: 
7C29 defb 0x05+0x80,"BLEE","P"+0x80
; [DASMZ80 ZONE] bleep_nfa: start 0x7C29 end 0x7C2F type bytedata
7C2F  bleep_lfa: 
7C2F defw border_nfa
; [DASMZ80 ZONE] bleep_lfa: start 0x7C2F end 0x7C31 type pointers
7C31  bleep_cfa: 
7C31 defw bleep_pfa
; [DASMZ80 ZONE] bleep_cfa: start 0x7C31 end 0x7C33 type pointers
7C33  bleep_pfa: 
; [DASMZ80 ZONE] bleep_cfa: start 0x7C33 end 0x7C41 type code

7C14  border_nfa: 
7C14 defb 0x06+0x80,"BORDE","R"+0x80
; [DASMZ80 ZONE] border_nfa: start 0x7C14 end 0x7C1B type bytedata
7C1B  border_lfa: 
7C1B defw at_nfa
; [DASMZ80 ZONE] border_lfa: start 0x7C1B end 0x7C1D type pointers
7C1D  border_cfa: 
7C1D defw border_pfa
; [DASMZ80 ZONE] border_cfa: start 0x7C1D end 0x7C1F type pointers
7C1F  border_pfa: 
; [DASMZ80 ZONE] border_cfa: start 0x7C1F end 0x7C29 type code

7BD7  at_nfa: 
7BD7 defb 0x02+0x80,"A","T"+0x80
; [DASMZ80 ZONE] at_nfa: start 0x7BD7 end 0x7BDA type bytedata
7BDA  at_lfa: 
7BDA defw screen_nfa
; [DASMZ80 ZONE] at_lfa: start 0x7BDA end 0x7BDC type pointers
7BDC  at_cfa: 
7BDC defw 0x6306
; [DASMZ80 ZONE] at_cfa: start 0x7BDC end 0x7BDE type pointers
7BDE  at_pfa: 
7BDE defw abs_cfa
7BE0 defw dup_cfa
7BE2 defw lit_cfa,0x001F
7BE6 defw greater_than_cfa
7BE8 defw zero_branch_cfa,0x0008; to 0x7BF2
7BEC defw two_drop_cfa
7BEE defw branch_cfa,0x0022; to 0x7C12
7BF2 defw swap_cfa
7BF4 defw abs_cfa
7BF6 defw dup_cfa
7BF8 defw lit_cfa,0x0015
7BFC defw greater_than_cfa
7BFE defw zero_branch_cfa,0x0008; to 0x7C08
7C02 defw two_drop_cfa
7C04 defw branch_cfa,0x000C; to 0x7C12
7C08 defw lit_cfa,0x0016
7C0C defw emit_cfa
7C0E defw emit_cfa
7C10 defw emit_cfa
7C12 defw semicolon_s_cfa
; [DASMZ80 ZONE] at_pfa: start 0x7BDE end 0x7C14 type pointers

7BB4  screen_nfa: 
7BB4 defb 0x06+0x80,"SCREE","N"+0x80
; [DASMZ80 ZONE] screen_nfa: start 0x7BB4 end 0x7BBB type bytedata
7BBB  screen_lfa: 
7BBB defw outp_nfa
; [DASMZ80 ZONE] screen_lfa: start 0x7BBB end 0x7BBD type pointers
7BBD  screen_cfa: 
7BBD defw screen_pfa
; [DASMZ80 ZONE] screen_cfa: start 0x7BBD end 0x7BBF type pointers
7BBF  screen_pfa: 
; [DASMZ80 ZONE] screen_cfa: start 0x7BBF end 0x7BD7 type code

7B9F  outp_nfa: 
7B9F defb 0x04+0x80,"OUT","P"+0x80
; [DASMZ80 ZONE] outp_nfa: start 0x7B9F end 0x7BA4 type bytedata
7BA4  outp_lfa: 
7BA4 defw inp_nfa
; [DASMZ80 ZONE] outp_lfa: start 0x7BA4 end 0x7BA6 type pointers
7BA6  outp_cfa: 
7BA6 defw outp_pfa
; [DASMZ80 ZONE] outp_cfa: start 0x7BA6 end 0x7BA8 type pointers
7BA8  outp_pfa: 
; [DASMZ80 ZONE] outp_cfa: start 0x7BA8 end 0x7BB4 type code

7B89  inp_nfa: 
7B89 defb 0x03+0x80,"IN","P"+0x80
; [DASMZ80 ZONE] inp_nfa: start 0x7B89 end 0x7B8D type bytedata
7B8D  inp_lfa: 
7B8D defw pushde_nfa
; [DASMZ80 ZONE] inp_lfa: start 0x7B8D end 0x7B8F type pointers
7B8F  inp_cfa: 
7B8F defw inp_pfa
; [DASMZ80 ZONE] inp_cfa: start 0x7B8F end 0x7B91 type pointers
7B91  inp_pfa: 
; [DASMZ80 ZONE] inp_cfa: start 0x7B91 end 0x7B9F type code

7B7C  pushde_nfa: 
7B7C defb 0x06+0x80,"PUSHD","E"+0x80
; [DASMZ80 ZONE] pushde_nfa: start 0x7B7C end 0x7B83 type bytedata
7B83  pushde_lfa: 
7B83 defw pushhl_nfa
; [DASMZ80 ZONE] pushde_lfa: start 0x7B83 end 0x7B85 type pointers
7B85  pushde_cfa: 
7B85 defw 0x6348
; [DASMZ80 ZONE] pushde_cfa: start 0x7B85 end 0x7B87 type pointers
7B87  pushde_pfa: 
7B87 defw 0x5E6A
; [DASMZ80 ZONE] pushde_pfa: start 0x7B87 end 0x7B89 type worddata

7B6F  pushhl_nfa: 
7B6F defb 0x06+0x80,"PUSHH","L"+0x80
; [DASMZ80 ZONE] pushhl_nfa: start 0x7B6F end 0x7B76 type bytedata
7B76  pushhl_lfa: 
7B76 defw next_nfa
; [DASMZ80 ZONE] pushhl_lfa: start 0x7B76 end 0x7B78 type pointers
7B78  pushhl_cfa: 
7B78 defw 0x6348
; [DASMZ80 ZONE] pushhl_cfa: start 0x7B78 end 0x7B7A type pointers
7B7A  pushhl_pfa: 
7B7A defw 0x5E6B
; [DASMZ80 ZONE] pushhl_pfa: start 0x7B7A end 0x7B7C type worddata

7B64  next_nfa: 
7B64 defb 0x04+0x80,"NEX","T"+0x80
; [DASMZ80 ZONE] next_nfa: start 0x7B64 end 0x7B69 type bytedata
7B69  next_lfa: 
7B69 defw where_nfa
; [DASMZ80 ZONE] next_lfa: start 0x7B69 end 0x7B6B type pointers
7B6B  next_cfa: 
7B6B defw 0x6348
; [DASMZ80 ZONE] next_cfa: start 0x7B6B end 0x7B6D type pointers
7B6D  next_pfa: 
7B6D defw 0x5E6C
; [DASMZ80 ZONE] next_pfa: start 0x7B6D end 0x7B6F type worddata

77AE  where_nfa: 
77AE defb 0x05+0x80,"WHER","E"+0x80
; [DASMZ80 ZONE] where_nfa: start 0x77AE end 0x77B4 type bytedata
77B4  where_lfa: 
77B4 defw editor_nfa
; [DASMZ80 ZONE] where_lfa: start 0x77B4 end 0x77B6 type pointers
77B6  where_cfa: 
77B6 defw 0x6306
; [DASMZ80 ZONE] where_cfa: start 0x77B6 end 0x77B8 type pointers
77B8  where_pfa: 
77B8 defw dup_cfa
77BA defw b_slash_scr_cfa
77BC defw slash_cfa
77BE defw dup_cfa
77C0 defw scr_cfa
77C2 defw store_cfa
77C4 defw paren_dot_quote_cfa
77C6 defb 0x06,"SCR # "
77CD defw decimal_cfa
77CF defw dot_cfa
77D1 defw swap_cfa
77D3 defw c_slash_l_cfa
77D5 defw slash_mod_cfa
77D7 defw c_slash_l_cfa
77D9 defw star_cfa
77DB defw rot_cfa
77DD defw block_cfa
77DF defw plus_cfa
77E1 defw cr_cfa
77E3 defw c_slash_l_cfa
77E5 defw type_cfa
77E7 defw cr_cfa
77E9 defw here_cfa
77EB defw c_fetch_cfa
77ED defw minus_cfa
77EF defw spaces_cfa
77F1 defw lit_cfa,0x005E
77F5 defw emit_cfa
77F7 defw editor_cfa
77F9 defw quit_cfa
77FB defw semicolon_s_cfa
; [DASMZ80 ZONE] where_pfa: start 0x77B8 end 0x77FD type pointers

779B  editor_nfa: 
779B defb 0x06+0x80+0x40,"EDITO","R"+0x80
; [DASMZ80 ZONE] editor_nfa: start 0x779B end 0x77A2 type bytedata
77A2  editor_lfa: 
77A2 defw triad_nfa
; [DASMZ80 ZONE] editor_lfa: start 0x77A2 end 0x77A4 type pointers
77A4  editor_cfa: 
77A4 defw 0x67B8
; [DASMZ80 ZONE] editor_cfa: start 0x77A4 end 0x77A6 type pointers
77A6  editor_pfa: ; Word type not implemented.

7769  triad_nfa: 
7769 defb 0x05+0x80,"TRIA","D"+0x80
; [DASMZ80 ZONE] triad_nfa: start 0x7769 end 0x776F type bytedata
776F  triad_lfa: 
776F defw index_nfa
; [DASMZ80 ZONE] triad_lfa: start 0x776F end 0x7771 type pointers
7771  triad_cfa: 
7771 defw 0x6306
; [DASMZ80 ZONE] triad_cfa: start 0x7771 end 0x7773 type pointers
7773  triad_pfa: 
7773 defw cls_cfa
7775 defw three_cfa
7777 defw slash_cfa
7779 defw three_cfa
777B defw star_cfa
777D defw three_cfa
777F defw over_cfa
7781 defw plus_cfa
7783 defw swap_cfa
7785 defw paren_do_cfa
7787 defw cr_cfa
7789 defw i_cfa
778B defw list_cfa
778D defw question_terminal_cfa
778F defw zero_branch_cfa,0x0004; to 0x7795
7793 defw leave_cfa
7795 defw paren_loop_cfa,0xFFF0; to 0x7787
7799 defw semicolon_s_cfa
; [DASMZ80 ZONE] triad_pfa: start 0x7773 end 0x779B type pointers

7739  index_nfa: 
7739 defb 0x05+0x80,"INDE","X"+0x80
; [DASMZ80 ZONE] index_nfa: start 0x7739 end 0x773F type bytedata
773F  index_lfa: 
773F defw forget_nfa
; [DASMZ80 ZONE] index_lfa: start 0x773F end 0x7741 type pointers
7741  index_cfa: 
7741 defw 0x6306
; [DASMZ80 ZONE] index_cfa: start 0x7741 end 0x7743 type pointers
7743  index_pfa: 
7743 defw noop_cfa
7745 defw one_plus_cfa
7747 defw swap_cfa
7749 defw paren_do_cfa
774B defw cr_cfa
774D defw i_cfa
774F defw three_cfa
7751 defw dot_r_cfa
7753 defw space_cfa
7755 defw zero_cfa
7757 defw i_cfa
7759 defw dot_line_cfa
775B defw question_terminal_cfa
775D defw zero_branch_cfa,0x0004; to 0x7763
7761 defw leave_cfa
7763 defw paren_loop_cfa,0xFFE6; to 0x774B
7767 defw semicolon_s_cfa
; [DASMZ80 ZONE] index_pfa: start 0x7743 end 0x7769 type pointers

76FA  forget_nfa: 
76FA defb 0x06+0x80,"FORGE","T"+0x80
; [DASMZ80 ZONE] forget_nfa: start 0x76FA end 0x7701 type bytedata
7701  forget_lfa: 
7701 defw free_nfa
; [DASMZ80 ZONE] forget_lfa: start 0x7701 end 0x7703 type pointers
7703  forget_cfa: 
7703 defw 0x6306
; [DASMZ80 ZONE] forget_cfa: start 0x7703 end 0x7705 type pointers
7705  forget_pfa: 
7705 defw current_cfa
7707 defw fetch_cfa
7709 defw context_cfa
770B defw fetch_cfa
770D defw minus_cfa
770F defw lit_cfa,0x0018
7713 defw question_error_cfa
7715 defw tick_cfa
7717 defw dup_cfa
7719 defw fence_cfa
771B defw fetch_cfa
771D defw u_less_than_cfa
771F defw lit_cfa,0x0015
7723 defw question_error_cfa
7725 defw dup_cfa
7727 defw nfa_cfa
7729 defw dp_cfa
772B defw store_cfa
772D defw lfa_cfa
772F defw fetch_cfa
7731 defw current_cfa
7733 defw fetch_cfa
7735 defw store_cfa
7737 defw semicolon_s_cfa
; [DASMZ80 ZONE] forget_pfa: start 0x7705 end 0x7739 type pointers

76E9  free_nfa: 
76E9 defb 0x04+0x80,"FRE","E"+0x80
; [DASMZ80 ZONE] free_nfa: start 0x76E9 end 0x76EE type bytedata
76EE  free_lfa: 
76EE defw size_nfa
; [DASMZ80 ZONE] free_lfa: start 0x76EE end 0x76F0 type pointers
76F0  free_cfa: 
76F0 defw 0x6306
; [DASMZ80 ZONE] free_cfa: start 0x76F0 end 0x76F2 type pointers
76F2  free_pfa: 
76F2 defw zero_cfa
76F4 defw here_cfa
76F6 defw minus_cfa
76F8 defw semicolon_s_cfa
; [DASMZ80 ZONE] free_pfa: start 0x76F2 end 0x76FA type pointers

76D6  size_nfa: 
76D6 defb 0x04+0x80,"SIZ","E"+0x80
; [DASMZ80 ZONE] size_nfa: start 0x76D6 end 0x76DB type bytedata
76DB  size_lfa: 
76DB defw two_swap_nfa
; [DASMZ80 ZONE] size_lfa: start 0x76DB end 0x76DD type pointers
76DD  size_cfa: 
76DD defw 0x6306
; [DASMZ80 ZONE] size_cfa: start 0x76DD end 0x76DF type pointers
76DF  size_pfa: 
76DF defw here_cfa
76E1 defw zero_cfa
76E3 defw plus_origin_cfa
76E5 defw minus_cfa
76E7 defw semicolon_s_cfa
; [DASMZ80 ZONE] size_pfa: start 0x76DF end 0x76E9 type pointers

76C2  two_swap_nfa: 
76C2 defb 0x05+0x80,"2SWA","P"+0x80
; [DASMZ80 ZONE] two_swap_nfa: start 0x76C2 end 0x76C8 type bytedata
76C8  two_swap_lfa: 
76C8 defw two_drop_nfa
; [DASMZ80 ZONE] two_swap_lfa: start 0x76C8 end 0x76CA type pointers
76CA  two_swap_cfa: 
76CA defw 0x6306
; [DASMZ80 ZONE] two_swap_cfa: start 0x76CA end 0x76CC type pointers
76CC  two_swap_pfa: 
76CC defw rot_cfa
76CE defw to_r_cfa
76D0 defw rot_cfa
76D2 defw from_r_cfa
76D4 defw semicolon_s_cfa
; [DASMZ80 ZONE] two_swap_pfa: start 0x76CC end 0x76D6 type pointers

76B2  two_drop_nfa: 
76B2 defb 0x05+0x80,"2DRO","P"+0x80
; [DASMZ80 ZONE] two_drop_nfa: start 0x76B2 end 0x76B8 type bytedata
76B8  two_drop_lfa: 
76B8 defw verify_nfa
; [DASMZ80 ZONE] two_drop_lfa: start 0x76B8 end 0x76BA type pointers
76BA  two_drop_cfa: 
76BA defw 0x6306
; [DASMZ80 ZONE] two_drop_cfa: start 0x76BA end 0x76BC type pointers
76BC  two_drop_pfa: 
76BC defw drop_cfa
76BE defw drop_cfa
76C0 defw semicolon_s_cfa
; [DASMZ80 ZONE] two_drop_pfa: start 0x76BC end 0x76C2 type pointers

76A1  verify_nfa: 
76A1 defb 0x06+0x80,"VERIF","Y"+0x80
; [DASMZ80 ZONE] verify_nfa: start 0x76A1 end 0x76A8 type bytedata
76A8  verify_lfa: 
76A8 defw savet_nfa
; [DASMZ80 ZONE] verify_lfa: start 0x76A8 end 0x76AA type pointers
76AA  verify_cfa: 
76AA defw 0x6306
; [DASMZ80 ZONE] verify_cfa: start 0x76AA end 0x76AC type pointers
76AC  verify_pfa: 
76AC defw two_cfa
76AE defw (BANK-TAPE)_cfa
76B0 defw semicolon_s_cfa
; [DASMZ80 ZONE] verify_pfa: start 0x76AC end 0x76B2 type pointers

768F  savet_nfa: 
768F defb 0x05+0x80,"SAVE","T"+0x80
; [DASMZ80 ZONE] savet_nfa: start 0x768F end 0x7695 type bytedata
7695  savet_lfa: 
7695 defw loadt_nfa
; [DASMZ80 ZONE] savet_lfa: start 0x7695 end 0x7697 type pointers
7697  savet_cfa: 
7697 defw 0x6306
; [DASMZ80 ZONE] savet_cfa: start 0x7697 end 0x7699 type pointers
7699  savet_pfa: 
7699 defw flush_cfa
769B defw zero_cfa
769D defw (BANK-TAPE)_cfa
769F defw semicolon_s_cfa
; [DASMZ80 ZONE] savet_pfa: start 0x7699 end 0x76A1 type pointers

767F  loadt_nfa: 
767F defb 0x05+0x80,"LOAD","T"+0x80
; [DASMZ80 ZONE] loadt_nfa: start 0x767F end 0x7685 type bytedata
7685  loadt_lfa: 
7685 defw line_nfa
; [DASMZ80 ZONE] loadt_lfa: start 0x7685 end 0x7687 type pointers
7687  loadt_cfa: 
7687 defw 0x6306
; [DASMZ80 ZONE] loadt_cfa: start 0x7687 end 0x7689 type pointers
7689  loadt_pfa: 
7689 defw one_cfa
768B defw (BANK-TAPE)_cfa
768D defw semicolon_s_cfa
; [DASMZ80 ZONE] loadt_pfa: start 0x7689 end 0x768F type pointers

765E  line_nfa: 
765E defb 0x04+0x80,"LIN","E"+0x80
; [DASMZ80 ZONE] line_nfa: start 0x765E end 0x7663 type bytedata
7663  line_lfa: 
7663 defw text_nfa
; [DASMZ80 ZONE] line_lfa: start 0x7663 end 0x7665 type pointers
7665  line_cfa: 
7665 defw 0x6306
; [DASMZ80 ZONE] line_cfa: start 0x7665 end 0x7667 type pointers
7667  line_pfa: 
7667 defw dup_cfa
7669 defw lit_cfa,0xFFF0
766D defw and_cfa
766F defw lit_cfa,0x0017
7673 defw question_error_cfa
7675 defw scr_cfa
7677 defw fetch_cfa
7679 defw paren_line_cfa
767B defw drop_cfa
767D defw semicolon_s_cfa
; [DASMZ80 ZONE] line_pfa: start 0x7667 end 0x767F type pointers

763F  text_nfa: 
763F defb 0x04+0x80,"TEX","T"+0x80
; [DASMZ80 ZONE] text_nfa: start 0x763F end 0x7644 type bytedata
7644  text_lfa: 
7644 defw mon_nfa
; [DASMZ80 ZONE] text_lfa: start 0x7644 end 0x7646 type pointers
7646  text_cfa: 
7646 defw 0x6306
; [DASMZ80 ZONE] text_cfa: start 0x7646 end 0x7648 type pointers
7648  text_pfa: 
7648 defw here_cfa
764A defw c_slash_l_cfa
764C defw one_plus_cfa
764E defw blanks_cfa
7650 defw word_cfa
7652 defw here_cfa
7654 defw pad_cfa
7656 defw c_slash_l_cfa
7658 defw one_plus_cfa
765A defw cmove_cfa
765C defw semicolon_s_cfa
; [DASMZ80 ZONE] text_pfa: start 0x7648 end 0x765E type pointers

762B  mon_nfa: 
762B defb 0x03+0x80,"MO","N"+0x80
; [DASMZ80 ZONE] mon_nfa: start 0x762B end 0x762F type bytedata
762F  mon_lfa: 
762F defw paren_tape_nfa
; [DASMZ80 ZONE] mon_lfa: start 0x762F end 0x7631 type pointers
7631  mon_cfa: 
7631 defw 0x763D
; [DASMZ80 ZONE] mon_cfa: start 0x7631 end 0x7633 type pointers
7633  mon_pfa: ; Word type not implemented.

7608  paren_tape_nfa: 
7608 defb 0x06+0x80,"(TAPE",")"+0x80
; [DASMZ80 ZONE] paren_tape_nfa: start 0x7608 end 0x760F type bytedata
760F  paren_tape_lfa: 
760F defw dot_cpu_nfa
; [DASMZ80 ZONE] paren_tape_lfa: start 0x760F end 0x7611 type pointers
7611  paren_tape_cfa: 
7611 defw paren_tape_pfa
; [DASMZ80 ZONE] paren_tape_cfa: start 0x7611 end 0x7613 type pointers
7613  paren_tape_pfa: 
; [DASMZ80 ZONE] paren_tape_cfa: start 0x7613 end 0x762B type code

75CB  dot_cpu_nfa: 
75CB defb 0x04+0x80,".CP","U"+0x80
; [DASMZ80 ZONE] dot_cpu_nfa: start 0x75CB end 0x75D0 type bytedata
75D0  dot_cpu_lfa: 
75D0 defw cls_nfa
; [DASMZ80 ZONE] dot_cpu_lfa: start 0x75D0 end 0x75D2 type pointers
75D2  dot_cpu_cfa: 
75D2 defw 0x6306
; [DASMZ80 ZONE] dot_cpu_cfa: start 0x75D2 end 0x75D4 type pointers
75D4  dot_cpu_pfa: 
75D4 defw paren_dot_quote_cfa
75D6 defb 0x0B,"ZX Spectrum"
75E2 defw noop_cfa
75E4 defw semicolon_s_cfa
; [DASMZ80 ZONE] dot_cpu_pfa: start 0x75D4 end 0x75E6 type pointers

75B1  cls_nfa: 
75B1 defb 0x03+0x80,"CL","S"+0x80
; [DASMZ80 ZONE] cls_nfa: start 0x75B1 end 0x75B5 type bytedata
75B5  cls_lfa: 
75B5 defw link_nfa
; [DASMZ80 ZONE] cls_lfa: start 0x75B5 end 0x75B7 type pointers
75B7  cls_cfa: 
75B7 defw cls_pfa
; [DASMZ80 ZONE] cls_cfa: start 0x75B7 end 0x75B9 type pointers
75B9  cls_pfa: 
; [DASMZ80 ZONE] cls_cfa: start 0x75B9 end 0x75CB type code

759B  link_nfa: 
759B defb 0x04+0x80,"LIN","K"+0x80
; [DASMZ80 ZONE] link_nfa: start 0x759B end 0x75A0 type bytedata
75A0  link_lfa: 
75A0 defw list_nfa
; [DASMZ80 ZONE] link_lfa: start 0x75A0 end 0x75A2 type pointers
75A2  link_cfa: 
75A2 defw link_pfa
; [DASMZ80 ZONE] link_cfa: start 0x75A2 end 0x75A4 type pointers
75A4  link_pfa: 
; [DASMZ80 ZONE] link_cfa: start 0x75A4 end 0x75B1 type code

7551  list_nfa: 
7551 defb 0x04+0x80,"LIS","T"+0x80
; [DASMZ80 ZONE] list_nfa: start 0x7551 end 0x7556 type bytedata
7556  list_lfa: 
7556 defw vlist_nfa
; [DASMZ80 ZONE] list_lfa: start 0x7556 end 0x7558 type pointers
7558  list_cfa: 
7558 defw 0x6306
; [DASMZ80 ZONE] list_cfa: start 0x7558 end 0x755A type pointers
755A  list_pfa: 
755A defw noop_cfa
755C defw cr_cfa
755E defw dup_cfa
7560 defw scr_cfa
7562 defw store_cfa
7564 defw paren_dot_quote_cfa
7566 defb 0x06,"SCR # "
756D defw dot_cfa
756F defw lit_cfa,0x0010
7573 defw zero_cfa
7575 defw paren_do_cfa
7577 defw cr_cfa
7579 defw i_cfa
757B defw lit_cfa,0x0002
757F defw dot_r_cfa
7581 defw space_cfa
7583 defw i_cfa
7585 defw scr_cfa
7587 defw fetch_cfa
7589 defw dot_line_cfa
758B defw question_terminal_cfa
758D defw zero_branch_cfa,0x0004; to 0x7593
7591 defw leave_cfa
7593 defw paren_loop_cfa,0xFFE2; to 0x7577
7597 defw cr_cfa
7599 defw semicolon_s_cfa
; [DASMZ80 ZONE] list_pfa: start 0x755A end 0x759B type pointers

7503  vlist_nfa: 
7503 defb 0x05+0x80,"VLIS","T"+0x80
; [DASMZ80 ZONE] vlist_nfa: start 0x7503 end 0x7509 type bytedata
7509  vlist_lfa: 
7509 defw u_dot_nfa
; [DASMZ80 ZONE] vlist_lfa: start 0x7509 end 0x750B type pointers
750B  vlist_cfa: 
750B defw 0x6306
; [DASMZ80 ZONE] vlist_cfa: start 0x750B end 0x750D type pointers
750D  vlist_pfa: 
750D defw lit_cfa,0x0080
7511 defw out_cfa
7513 defw store_cfa
7515 defw context_cfa
7517 defw fetch_cfa
7519 defw fetch_cfa
751B defw out_cfa
751D defw fetch_cfa
751F defw lit_cfa,0x001F
7523 defw lit_cfa,0x0008
7527 defw minus_cfa
7529 defw greater_than_cfa
752B defw zero_branch_cfa,0x000A; to 0x7537
752F defw cr_cfa
7531 defw zero_cfa
7533 defw out_cfa
7535 defw store_cfa
7537 defw dup_cfa
7539 defw id_dot_cfa
753B defw pfa_cfa
753D defw lfa_cfa
753F defw fetch_cfa
7541 defw dup_cfa
7543 defw zero_equals_cfa
7545 defw question_terminal_cfa
7547 defw or_cfa
7549 defw zero_branch_cfa,0xFFD0; to 0x751B
754D defw drop_cfa
754F defw semicolon_s_cfa
; [DASMZ80 ZONE] vlist_pfa: start 0x750D end 0x7551 type pointers

74F6  u_dot_nfa: 
74F6 defb 0x02+0x80,"U","."+0x80
; [DASMZ80 ZONE] u_dot_nfa: start 0x74F6 end 0x74F9 type bytedata
74F9  u_dot_lfa: 
74F9 defw question_nfa
; [DASMZ80 ZONE] u_dot_lfa: start 0x74F9 end 0x74FB type pointers
74FB  u_dot_cfa: 
74FB defw 0x6306
; [DASMZ80 ZONE] u_dot_cfa: start 0x74FB end 0x74FD type pointers
74FD  u_dot_pfa: 
74FD defw zero_cfa
74FF defw d_dot_cfa
7501 defw semicolon_s_cfa
; [DASMZ80 ZONE] u_dot_pfa: start 0x74FD end 0x7503 type pointers

74EA  question_nfa: 
74EA defb 0x01+0x80,"?"+0x80
; [DASMZ80 ZONE] question_nfa: start 0x74EA end 0x74EC type bytedata
74EC  question_lfa: 
74EC defw dot_nfa
; [DASMZ80 ZONE] question_lfa: start 0x74EC end 0x74EE type pointers
74EE  question_cfa: 
74EE defw 0x6306
; [DASMZ80 ZONE] question_cfa: start 0x74EE end 0x74F0 type pointers
74F0  question_pfa: 
74F0 defw fetch_cfa
74F2 defw dot_cfa
74F4 defw semicolon_s_cfa
; [DASMZ80 ZONE] question_pfa: start 0x74F0 end 0x74F6 type pointers

74DE  dot_nfa: 
74DE defb 0x01+0x80,"."+0x80
; [DASMZ80 ZONE] dot_nfa: start 0x74DE end 0x74E0 type bytedata
74E0  dot_lfa: 
74E0 defw d_dot_nfa
; [DASMZ80 ZONE] dot_lfa: start 0x74E0 end 0x74E2 type pointers
74E2  dot_cfa: 
74E2 defw 0x6306
; [DASMZ80 ZONE] dot_cfa: start 0x74E2 end 0x74E4 type pointers
74E4  dot_pfa: 
74E4 defw s_to_d_cfa
74E6 defw d_dot_cfa
74E8 defw semicolon_s_cfa
; [DASMZ80 ZONE] dot_pfa: start 0x74E4 end 0x74EA type pointers

74CF  d_dot_nfa: 
74CF defb 0x02+0x80,"D","."+0x80
; [DASMZ80 ZONE] d_dot_nfa: start 0x74CF end 0x74D2 type bytedata
74D2  d_dot_lfa: 
74D2 defw dot_r_nfa
; [DASMZ80 ZONE] d_dot_lfa: start 0x74D2 end 0x74D4 type pointers
74D4  d_dot_cfa: 
74D4 defw 0x6306
; [DASMZ80 ZONE] d_dot_cfa: start 0x74D4 end 0x74D6 type pointers
74D6  d_dot_pfa: 
74D6 defw zero_cfa
74D8 defw d_dot_r_cfa
74DA defw space_cfa
74DC defw semicolon_s_cfa
; [DASMZ80 ZONE] d_dot_pfa: start 0x74D6 end 0x74DE type pointers

74BE  dot_r_nfa: 
74BE defb 0x02+0x80,".","R"+0x80
; [DASMZ80 ZONE] dot_r_nfa: start 0x74BE end 0x74C1 type bytedata
74C1  dot_r_lfa: 
74C1 defw d_dot_r_nfa
; [DASMZ80 ZONE] dot_r_lfa: start 0x74C1 end 0x74C3 type pointers
74C3  dot_r_cfa: 
74C3 defw 0x6306
; [DASMZ80 ZONE] dot_r_cfa: start 0x74C3 end 0x74C5 type pointers
74C5  dot_r_pfa: 
74C5 defw to_r_cfa
74C7 defw s_to_d_cfa
74C9 defw from_r_cfa
74CB defw d_dot_r_cfa
74CD defw semicolon_s_cfa
; [DASMZ80 ZONE] dot_r_pfa: start 0x74C5 end 0x74CF type pointers

749A  d_dot_r_nfa: 
749A defb 0x03+0x80,"D.","R"+0x80
; [DASMZ80 ZONE] d_dot_r_nfa: start 0x749A end 0x749E type bytedata
749E  d_dot_r_lfa: 
749E defw hash_s_nfa
; [DASMZ80 ZONE] d_dot_r_lfa: start 0x749E end 0x74A0 type pointers
74A0  d_dot_r_cfa: 
74A0 defw 0x6306
; [DASMZ80 ZONE] d_dot_r_cfa: start 0x74A0 end 0x74A2 type pointers
74A2  d_dot_r_pfa: 
74A2 defw to_r_cfa
74A4 defw swap_cfa
74A6 defw over_cfa
74A8 defw dabs_cfa
74AA defw less_hash_cfa
74AC defw hash_s_cfa
74AE defw sign_cfa
74B0 defw hash_greater_cfa
74B2 defw from_r_cfa
74B4 defw over_cfa
74B6 defw minus_cfa
74B8 defw spaces_cfa
74BA defw type_cfa
74BC defw semicolon_s_cfa
; [DASMZ80 ZONE] d_dot_r_pfa: start 0x74A2 end 0x74BE type pointers

7483  hash_s_nfa: 
7483 defb 0x02+0x80,"#","S"+0x80
; [DASMZ80 ZONE] hash_s_nfa: start 0x7483 end 0x7486 type bytedata
7486  hash_s_lfa: 
7486 defw hash_nfa
; [DASMZ80 ZONE] hash_s_lfa: start 0x7486 end 0x7488 type pointers
7488  hash_s_cfa: 
7488 defw 0x6306
; [DASMZ80 ZONE] hash_s_cfa: start 0x7488 end 0x748A type pointers
748A  hash_s_pfa: 
748A defw hash_cfa
748C defw over_cfa
748E defw over_cfa
7490 defw or_cfa
7492 defw zero_equals_cfa
7494 defw zero_branch_cfa,0xFFF4; to 0x748A
7498 defw semicolon_s_cfa
; [DASMZ80 ZONE] hash_s_pfa: start 0x748A end 0x749A type pointers

7459  hash_nfa: 
7459 defb 0x01+0x80,"#"+0x80
; [DASMZ80 ZONE] hash_nfa: start 0x7459 end 0x745B type bytedata
745B  hash_lfa: 
745B defw sign_nfa
; [DASMZ80 ZONE] hash_lfa: start 0x745B end 0x745D type pointers
745D  hash_cfa: 
745D defw 0x6306
; [DASMZ80 ZONE] hash_cfa: start 0x745D end 0x745F type pointers
745F  hash_pfa: 
745F defw base_cfa
7461 defw fetch_cfa
7463 defw m_slash_mod_cfa
7465 defw rot_cfa
7467 defw lit_cfa,0x0009
746B defw over_cfa
746D defw less_than_cfa
746F defw zero_branch_cfa,0x0008; to 0x7479
7473 defw lit_cfa,0x0007
7477 defw plus_cfa
7479 defw lit_cfa,0x0030
747D defw plus_cfa
747F defw hold_cfa
7481 defw semicolon_s_cfa
; [DASMZ80 ZONE] hash_pfa: start 0x745F end 0x7483 type pointers

7440  sign_nfa: 
7440 defb 0x04+0x80,"SIG","N"+0x80
; [DASMZ80 ZONE] sign_nfa: start 0x7440 end 0x7445 type bytedata
7445  sign_lfa: 
7445 defw hash_greater_nfa
; [DASMZ80 ZONE] sign_lfa: start 0x7445 end 0x7447 type pointers
7447  sign_cfa: 
7447 defw 0x6306
; [DASMZ80 ZONE] sign_cfa: start 0x7447 end 0x7449 type pointers
7449  sign_pfa: 
7449 defw rot_cfa
744B defw zero_less_than_cfa
744D defw zero_branch_cfa,0x0008; to 0x7457
7451 defw lit_cfa,0x002D
7455 defw hold_cfa
7457 defw semicolon_s_cfa
; [DASMZ80 ZONE] sign_pfa: start 0x7449 end 0x7459 type pointers

7429  hash_greater_nfa: 
7429 defb 0x02+0x80,"#",">"+0x80
; [DASMZ80 ZONE] hash_greater_nfa: start 0x7429 end 0x742C type bytedata
742C  hash_greater_lfa: 
742C defw less_hash_nfa
; [DASMZ80 ZONE] hash_greater_lfa: start 0x742C end 0x742E type pointers
742E  hash_greater_cfa: 
742E defw 0x6306
; [DASMZ80 ZONE] hash_greater_cfa: start 0x742E end 0x7430 type pointers
7430  hash_greater_pfa: 
7430 defw drop_cfa
7432 defw drop_cfa
7434 defw hld_cfa
7436 defw fetch_cfa
7438 defw pad_cfa
743A defw over_cfa
743C defw minus_cfa
743E defw semicolon_s_cfa
; [DASMZ80 ZONE] hash_greater_pfa: start 0x7430 end 0x7440 type pointers

741A  less_hash_nfa: 
741A defb 0x02+0x80,"<","#"+0x80
; [DASMZ80 ZONE] less_hash_nfa: start 0x741A end 0x741D type bytedata
741D  less_hash_lfa: 
741D defw spaces_nfa
; [DASMZ80 ZONE] less_hash_lfa: start 0x741D end 0x741F type pointers
741F  less_hash_cfa: 
741F defw 0x6306
; [DASMZ80 ZONE] less_hash_cfa: start 0x741F end 0x7421 type pointers
7421  less_hash_pfa: 
7421 defw pad_cfa
7423 defw hld_cfa
7425 defw store_cfa
7427 defw semicolon_s_cfa
; [DASMZ80 ZONE] less_hash_pfa: start 0x7421 end 0x7429 type pointers

73F9  spaces_nfa: 
73F9 defb 0x06+0x80,"SPACE","S"+0x80
; [DASMZ80 ZONE] spaces_nfa: start 0x73F9 end 0x7400 type bytedata
7400  spaces_lfa: 
7400 defw while_nfa
; [DASMZ80 ZONE] spaces_lfa: start 0x7400 end 0x7402 type pointers
7402  spaces_cfa: 
7402 defw 0x6306
; [DASMZ80 ZONE] spaces_cfa: start 0x7402 end 0x7404 type pointers
7404  spaces_pfa: 
7404 defw zero_cfa
7406 defw max_cfa
7408 defw minus_dup_cfa
740A defw zero_branch_cfa,0x000C; to 0x7418
740E defw zero_cfa
7410 defw paren_do_cfa
7412 defw space_cfa
7414 defw paren_loop_cfa,0xFFFC; to 0x7412
7418 defw semicolon_s_cfa
; [DASMZ80 ZONE] spaces_pfa: start 0x7404 end 0x741A type pointers

73E9  while_nfa: 
73E9 defb 0x05+0x80+0x40,"WHIL","E"+0x80
; [DASMZ80 ZONE] while_nfa: start 0x73E9 end 0x73EF type bytedata
73EF  while_lfa: 
73EF defw else_nfa
; [DASMZ80 ZONE] while_lfa: start 0x73EF end 0x73F1 type pointers
73F1  while_cfa: 
73F1 defw 0x6306
; [DASMZ80 ZONE] while_cfa: start 0x73F1 end 0x73F3 type pointers
73F3  while_pfa: 
73F3 defw if_cfa
73F5 defw two_plus_cfa
73F7 defw semicolon_s_cfa
; [DASMZ80 ZONE] while_pfa: start 0x73F3 end 0x73F9 type pointers

73C8  else_nfa: 
73C8 defb 0x04+0x80+0x40,"ELS","E"+0x80
; [DASMZ80 ZONE] else_nfa: start 0x73C8 end 0x73CD type bytedata
73CD  else_lfa: 
73CD defw if_nfa
; [DASMZ80 ZONE] else_lfa: start 0x73CD end 0x73CF type pointers
73CF  else_cfa: 
73CF defw 0x6306
; [DASMZ80 ZONE] else_cfa: start 0x73CF end 0x73D1 type pointers
73D1  else_pfa: 
73D1 defw two_cfa
73D3 defw question_pairs_cfa
73D5 defw compile_cfa,BRANCH_cfa
73D9 defw here_cfa
73DB defw zero_cfa
73DD defw comma_cfa
73DF defw swap_cfa
73E1 defw two_cfa
73E3 defw endif_cfa
73E5 defw two_cfa
73E7 defw semicolon_s_cfa
; [DASMZ80 ZONE] else_pfa: start 0x73D1 end 0x73E9 type pointers

73B3  if_nfa: 
73B3 defb 0x02+0x80+0x40,"I","F"+0x80
; [DASMZ80 ZONE] if_nfa: start 0x73B3 end 0x73B6 type bytedata
73B6  if_lfa: 
73B6 defw repeat_nfa
; [DASMZ80 ZONE] if_lfa: start 0x73B6 end 0x73B8 type pointers
73B8  if_cfa: 
73B8 defw 0x6306
; [DASMZ80 ZONE] if_cfa: start 0x73B8 end 0x73BA type pointers
73BA  if_pfa: 
73BA defw compile_cfa,0BRANCH_cfa
73BE defw here_cfa
73C0 defw zero_cfa
73C2 defw comma_cfa
73C4 defw two_cfa
73C6 defw semicolon_s_cfa
; [DASMZ80 ZONE] if_pfa: start 0x73BA end 0x73C8 type pointers

7396  repeat_nfa: 
7396 defb 0x06+0x80+0x40,"REPEA","T"+0x80
; [DASMZ80 ZONE] repeat_nfa: start 0x7396 end 0x739D type bytedata
739D  repeat_lfa: 
739D defw again_nfa
; [DASMZ80 ZONE] repeat_lfa: start 0x739D end 0x739F type pointers
739F  repeat_cfa: 
739F defw 0x6306
; [DASMZ80 ZONE] repeat_cfa: start 0x739F end 0x73A1 type pointers
73A1  repeat_pfa: 
73A1 defw to_r_cfa
73A3 defw to_r_cfa
73A5 defw again_cfa
73A7 defw from_r_cfa
73A9 defw from_r_cfa
73AB defw two_cfa
73AD defw minus_cfa
73AF defw endif_cfa
73B1 defw semicolon_s_cfa
; [DASMZ80 ZONE] repeat_pfa: start 0x73A1 end 0x73B3 type pointers

7380  again_nfa: 
7380 defb 0x05+0x80+0x40,"AGAI","N"+0x80
; [DASMZ80 ZONE] again_nfa: start 0x7380 end 0x7386 type bytedata
7386  again_lfa: 
7386 defw end_nfa
; [DASMZ80 ZONE] again_lfa: start 0x7386 end 0x7388 type pointers
7388  again_cfa: 
7388 defw 0x6306
; [DASMZ80 ZONE] again_cfa: start 0x7388 end 0x738A type pointers
738A  again_pfa: 
738A defw one_cfa
738C defw question_pairs_cfa
738E defw compile_cfa,BRANCH_cfa
7392 defw back_cfa
7394 defw semicolon_s_cfa
; [DASMZ80 ZONE] again_pfa: start 0x738A end 0x7396 type pointers

7374  end_nfa: 
7374 defb 0x03+0x80+0x40,"EN","D"+0x80
; [DASMZ80 ZONE] end_nfa: start 0x7374 end 0x7378 type bytedata
7378  end_lfa: 
7378 defw until_nfa
; [DASMZ80 ZONE] end_lfa: start 0x7378 end 0x737A type pointers
737A  end_cfa: 
737A defw 0x6306
; [DASMZ80 ZONE] end_cfa: start 0x737A end 0x737C type pointers
737C  end_pfa: 
737C defw until_cfa
737E defw semicolon_s_cfa
; [DASMZ80 ZONE] end_pfa: start 0x737C end 0x7380 type pointers

735E  until_nfa: 
735E defb 0x05+0x80+0x40,"UNTI","L"+0x80
; [DASMZ80 ZONE] until_nfa: start 0x735E end 0x7364 type bytedata
7364  until_lfa: 
7364 defw plus_loop_nfa
; [DASMZ80 ZONE] until_lfa: start 0x7364 end 0x7366 type pointers
7366  until_cfa: 
7366 defw 0x6306
; [DASMZ80 ZONE] until_cfa: start 0x7366 end 0x7368 type pointers
7368  until_pfa: 
7368 defw one_cfa
736A defw question_pairs_cfa
736C defw compile_cfa,0BRANCH_cfa
7370 defw back_cfa
7372 defw semicolon_s_cfa
; [DASMZ80 ZONE] until_pfa: start 0x7368 end 0x7374 type pointers

7348  plus_loop_nfa: 
7348 defb 0x05+0x80+0x40,"+LOO","P"+0x80
; [DASMZ80 ZONE] plus_loop_nfa: start 0x7348 end 0x734E type bytedata
734E  plus_loop_lfa: 
734E defw loop_nfa
; [DASMZ80 ZONE] plus_loop_lfa: start 0x734E end 0x7350 type pointers
7350  plus_loop_cfa: 
7350 defw 0x6306
; [DASMZ80 ZONE] plus_loop_cfa: start 0x7350 end 0x7352 type pointers
7352  plus_loop_pfa: 
7352 defw three_cfa
7354 defw question_pairs_cfa
7356 defw compile_cfa,(+LOOP)_cfa
735A defw back_cfa
735C defw semicolon_s_cfa
; [DASMZ80 ZONE] plus_loop_pfa: start 0x7352 end 0x735E type pointers

7333  loop_nfa: 
7333 defb 0x04+0x80+0x40,"LOO","P"+0x80
; [DASMZ80 ZONE] loop_nfa: start 0x7333 end 0x7338 type bytedata
7338  loop_lfa: 
7338 defw do_nfa
; [DASMZ80 ZONE] loop_lfa: start 0x7338 end 0x733A type pointers
733A  loop_cfa: 
733A defw 0x6306
; [DASMZ80 ZONE] loop_cfa: start 0x733A end 0x733C type pointers
733C  loop_pfa: 
733C defw three_cfa
733E defw question_pairs_cfa
7340 defw compile_cfa,(LOOP)_cfa
7344 defw back_cfa
7346 defw semicolon_s_cfa
; [DASMZ80 ZONE] loop_pfa: start 0x733C end 0x7348 type pointers

7322  do_nfa: 
7322 defb 0x02+0x80+0x40,"D","O"+0x80
; [DASMZ80 ZONE] do_nfa: start 0x7322 end 0x7325 type bytedata
7325  do_lfa: 
7325 defw then_nfa
; [DASMZ80 ZONE] do_lfa: start 0x7325 end 0x7327 type pointers
7327  do_cfa: 
7327 defw 0x6306
; [DASMZ80 ZONE] do_cfa: start 0x7327 end 0x7329 type pointers
7329  do_pfa: 
7329 defw compile_cfa,(DO)_cfa
732D defw here_cfa
732F defw three_cfa
7331 defw semicolon_s_cfa
; [DASMZ80 ZONE] do_pfa: start 0x7329 end 0x7333 type pointers

7315  then_nfa: 
7315 defb 0x04+0x80+0x40,"THE","N"+0x80
; [DASMZ80 ZONE] then_nfa: start 0x7315 end 0x731A type bytedata
731A  then_lfa: 
731A defw endif_nfa
; [DASMZ80 ZONE] then_lfa: start 0x731A end 0x731C type pointers
731C  then_cfa: 
731C defw 0x6306
; [DASMZ80 ZONE] then_cfa: start 0x731C end 0x731E type pointers
731E  then_pfa: 
731E defw endif_cfa
7320 defw semicolon_s_cfa
; [DASMZ80 ZONE] then_pfa: start 0x731E end 0x7322 type pointers

72F9  endif_nfa: 
72F9 defb 0x05+0x80+0x40,"ENDI","F"+0x80
; [DASMZ80 ZONE] endif_nfa: start 0x72F9 end 0x72FF type bytedata
72FF  endif_lfa: 
72FF defw begin_nfa
; [DASMZ80 ZONE] endif_lfa: start 0x72FF end 0x7301 type pointers
7301  endif_cfa: 
7301 defw 0x6306
; [DASMZ80 ZONE] endif_cfa: start 0x7301 end 0x7303 type pointers
7303  endif_pfa: 
7303 defw question_comp_cfa
7305 defw two_cfa
7307 defw question_pairs_cfa
7309 defw here_cfa
730B defw over_cfa
730D defw minus_cfa
730F defw swap_cfa
7311 defw store_cfa
7313 defw semicolon_s_cfa
; [DASMZ80 ZONE] endif_pfa: start 0x7303 end 0x7315 type pointers

72E7  begin_nfa: 
72E7 defb 0x05+0x80+0x40,"BEGI","N"+0x80
; [DASMZ80 ZONE] begin_nfa: start 0x72E7 end 0x72ED type bytedata
72ED  begin_lfa: 
72ED defw back_nfa
; [DASMZ80 ZONE] begin_lfa: start 0x72ED end 0x72EF type pointers
72EF  begin_cfa: 
72EF defw 0x6306
; [DASMZ80 ZONE] begin_cfa: start 0x72EF end 0x72F1 type pointers
72F1  begin_pfa: 
72F1 defw question_comp_cfa
72F3 defw here_cfa
72F5 defw one_cfa
72F7 defw semicolon_s_cfa
; [DASMZ80 ZONE] begin_pfa: start 0x72F1 end 0x72F9 type pointers

72D6  back_nfa: 
72D6 defb 0x04+0x80,"BAC","K"+0x80
; [DASMZ80 ZONE] back_nfa: start 0x72D6 end 0x72DB type bytedata
72DB  back_lfa: 
72DB defw tick_nfa
; [DASMZ80 ZONE] back_lfa: start 0x72DB end 0x72DD type pointers
72DD  back_cfa: 
72DD defw 0x6306
; [DASMZ80 ZONE] back_cfa: start 0x72DD end 0x72DF type pointers
72DF  back_pfa: 
72DF defw here_cfa
72E1 defw minus_cfa
72E3 defw comma_cfa
72E5 defw semicolon_s_cfa
; [DASMZ80 ZONE] back_pfa: start 0x72DF end 0x72E7 type pointers

72C2  tick_nfa: 
72C2 defb 0x01+0x80+0x40,"'"+0x80
; [DASMZ80 ZONE] tick_nfa: start 0x72C2 end 0x72C4 type bytedata
72C4  tick_lfa: 
72C4 defw next_screen_nfa
; [DASMZ80 ZONE] tick_lfa: start 0x72C4 end 0x72C6 type pointers
72C6  tick_cfa: 
72C6 defw 0x6306
; [DASMZ80 ZONE] tick_cfa: start 0x72C6 end 0x72C8 type pointers
72C8  tick_pfa: 
72C8 defw minus_find_cfa
72CA defw zero_equals_cfa
72CC defw zero_cfa
72CE defw question_error_cfa
72D0 defw drop_cfa
72D2 defw literal_cfa
72D4 defw semicolon_s_cfa
; [DASMZ80 ZONE] tick_pfa: start 0x72C8 end 0x72D6 type pointers

72A0  next_screen_nfa: 
72A0 defb 0x03+0x80+0x40,"--",">"+0x80
; [DASMZ80 ZONE] next_screen_nfa: start 0x72A0 end 0x72A4 type bytedata
72A4  next_screen_lfa: 
72A4 defw load_nfa
; [DASMZ80 ZONE] next_screen_lfa: start 0x72A4 end 0x72A6 type pointers
72A6  next_screen_cfa: 
72A6 defw 0x6306
; [DASMZ80 ZONE] next_screen_cfa: start 0x72A6 end 0x72A8 type pointers
72A8  next_screen_pfa: 
72A8 defw question_loading_cfa
72AA defw zero_cfa
72AC defw in_cfa
72AE defw store_cfa
72B0 defw b_slash_scr_cfa
72B2 defw blk_cfa
72B4 defw fetch_cfa
72B6 defw over_cfa
72B8 defw mod_cfa
72BA defw minus_cfa
72BC defw blk_cfa
72BE defw plus_store_cfa
72C0 defw semicolon_s_cfa
; [DASMZ80 ZONE] next_screen_pfa: start 0x72A8 end 0x72C2 type pointers

7261  load_nfa: 
7261 defb 0x04+0x80,"LOA","D"+0x80
; [DASMZ80 ZONE] load_nfa: start 0x7261 end 0x7266 type bytedata
7266  load_lfa: 
7266 defw flush_nfa
; [DASMZ80 ZONE] load_lfa: start 0x7266 end 0x7268 type pointers
7268  load_cfa: 
7268 defw 0x6306
; [DASMZ80 ZONE] load_cfa: start 0x7268 end 0x726A type pointers
726A  load_pfa: 
726A defw dup_cfa
726C defw zero_cfa
726E defw equals_cfa
7270 defw lit_cfa,0x0006
7274 defw question_error_cfa
7276 defw blk_cfa
7278 defw fetch_cfa
727A defw to_r_cfa
727C defw in_cfa
727E defw fetch_cfa
7280 defw to_r_cfa
7282 defw zero_cfa
7284 defw in_cfa
7286 defw store_cfa
7288 defw b_slash_scr_cfa
728A defw star_cfa
728C defw blk_cfa
728E defw store_cfa
7290 defw interpret_cfa
7292 defw from_r_cfa
7294 defw in_cfa
7296 defw store_cfa
7298 defw from_r_cfa
729A defw blk_cfa
729C defw store_cfa
729E defw semicolon_s_cfa
; [DASMZ80 ZONE] load_pfa: start 0x726A end 0x72A0 type pointers

7243  flush_nfa: 
7243 defb 0x05+0x80,"FLUS","H"+0x80
; [DASMZ80 ZONE] flush_nfa: start 0x7243 end 0x7249 type bytedata
7249  flush_lfa: 
7249 defw read_write_nfa
; [DASMZ80 ZONE] flush_lfa: start 0x7249 end 0x724B type pointers
724B  flush_cfa: 
724B defw 0x6306
; [DASMZ80 ZONE] flush_cfa: start 0x724B end 0x724D type pointers
724D  flush_pfa: 
724D defw hash_buff_cfa
724F defw one_plus_cfa
7251 defw zero_cfa
7253 defw paren_do_cfa
7255 defw zero_cfa
7257 defw buffer_cfa
7259 defw drop_cfa
725B defw paren_loop_cfa,0xFFF8; to 0x7255
725F defw semicolon_s_cfa
; [DASMZ80 ZONE] flush_pfa: start 0x724D end 0x7261 type pointers

7217  read_write_nfa: 
7217 defb 0x03+0x80,"R/","W"+0x80
; [DASMZ80 ZONE] read_write_nfa: start 0x7217 end 0x721B type bytedata
721B  read_write_lfa: 
721B defw hi_nfa
; [DASMZ80 ZONE] read_write_lfa: start 0x721B end 0x721D type pointers
721D  read_write_cfa: 
721D defw 0x6306
; [DASMZ80 ZONE] read_write_cfa: start 0x721D end 0x721F type pointers
721F  read_write_pfa: 
721F defw to_r_cfa
7221 defw DISC-BLOCK_cfa
7223 defw from_r_cfa
7225 defw (R/W)_cfa
7227 defw semicolon_s_cfa
; [DASMZ80 ZONE] read_write_pfa: start 0x721F end 0x7229 type pointers

720E  hi_nfa: 
720E defb 0x02+0x80,"H","I"+0x80
; [DASMZ80 ZONE] hi_nfa: start 0x720E end 0x7211 type bytedata
7211  hi_lfa: 
7211 defw lo_nfa
; [DASMZ80 ZONE] hi_lfa: start 0x7211 end 0x7213 type pointers
7213  hi_cfa: 
7213 defw 0x6348
; [DASMZ80 ZONE] hi_cfa: start 0x7213 end 0x7215 type pointers
7215  hi_pfa: 
7215 defw 0xFFFF
; [DASMZ80 ZONE] hi_pfa: start 0x7215 end 0x7217 type worddata

7205  lo_nfa: 
7205 defb 0x02+0x80,"L","O"+0x80
; [DASMZ80 ZONE] lo_nfa: start 0x7205 end 0x7208 type bytedata
7208  lo_lfa: 
7208 defw block_nfa
; [DASMZ80 ZONE] lo_lfa: start 0x7208 end 0x720A type pointers
720A  lo_cfa: 
720A defw 0x6348
; [DASMZ80 ZONE] lo_cfa: start 0x720A end 0x720C type pointers
720C  lo_pfa: 
720C defw 0xC000
; [DASMZ80 ZONE] lo_pfa: start 0x720C end 0x720E type worddata

71A5  block_nfa: 
71A5 defb 0x05+0x80,"BLOC","K"+0x80
; [DASMZ80 ZONE] block_nfa: start 0x71A5 end 0x71AB type bytedata
71AB  block_lfa: 
71AB defw buffer_nfa
; [DASMZ80 ZONE] block_lfa: start 0x71AB end 0x71AD type pointers
71AD  block_cfa: 
71AD defw 0x6306
; [DASMZ80 ZONE] block_cfa: start 0x71AD end 0x71AF type pointers
71AF  block_pfa: 
71AF defw offset_cfa
71B1 defw fetch_cfa
71B3 defw plus_cfa
71B5 defw to_r_cfa
71B7 defw prev_cfa
71B9 defw fetch_cfa
71BB defw dup_cfa
71BD defw fetch_cfa
71BF defw r_cfa
71C1 defw minus_cfa
71C3 defw dup_cfa
71C5 defw plus_cfa
71C7 defw zero_branch_cfa,0x0034; to 0x71FD
71CB defw plus_buf_cfa
71CD defw zero_equals_cfa
71CF defw zero_branch_cfa,0x0014; to 0x71E5
71D3 defw drop_cfa
71D5 defw r_cfa
71D7 defw buffer_cfa
71D9 defw dup_cfa
71DB defw r_cfa
71DD defw one_cfa
71DF defw read_write_cfa
71E1 defw two_cfa
71E3 defw minus_cfa
71E5 defw dup_cfa
71E7 defw fetch_cfa
71E9 defw r_cfa
71EB defw minus_cfa
71ED defw dup_cfa
71EF defw plus_cfa
71F1 defw zero_equals_cfa
71F3 defw zero_branch_cfa,0xFFD6; to 0x71CB
71F7 defw dup_cfa
71F9 defw prev_cfa
71FB defw store_cfa
71FD defw from_r_cfa
71FF defw drop_cfa
7201 defw two_plus_cfa
7203 defw semicolon_s_cfa
; [DASMZ80 ZONE] block_pfa: start 0x71AF end 0x7205 type pointers

715C  buffer_nfa: 
715C defb 0x06+0x80,"BUFFE","R"+0x80
; [DASMZ80 ZONE] buffer_nfa: start 0x715C end 0x7163 type bytedata
7163  buffer_lfa: 
7163 defw dr0_nfa
; [DASMZ80 ZONE] buffer_lfa: start 0x7163 end 0x7165 type pointers
7165  buffer_cfa: 
7165 defw 0x6306
; [DASMZ80 ZONE] buffer_cfa: start 0x7165 end 0x7167 type pointers
7167  buffer_pfa: 
7167 defw use_cfa
7169 defw fetch_cfa
716B defw dup_cfa
716D defw to_r_cfa
716F defw plus_buf_cfa
7171 defw zero_branch_cfa,0xFFFC; to 0x716F
7175 defw use_cfa
7177 defw store_cfa
7179 defw r_cfa
717B defw fetch_cfa
717D defw zero_less_than_cfa
717F defw zero_branch_cfa,0x0014; to 0x7195
7183 defw r_cfa
7185 defw two_plus_cfa
7187 defw r_cfa
7189 defw fetch_cfa
718B defw lit_cfa,0x7FFF
718F defw and_cfa
7191 defw zero_cfa
7193 defw read_write_cfa
7195 defw r_cfa
7197 defw store_cfa
7199 defw r_cfa
719B defw prev_cfa
719D defw store_cfa
719F defw from_r_cfa
71A1 defw two_plus_cfa
71A3 defw semicolon_s_cfa
; [DASMZ80 ZONE] buffer_pfa: start 0x7167 end 0x71A5 type pointers

714C  dr0_nfa: 
714C defb 0x03+0x80,"DR","0"+0x80
; [DASMZ80 ZONE] dr0_nfa: start 0x714C end 0x7150 type bytedata
7150  dr0_lfa: 
7150 defw empty_buffers_nfa
; [DASMZ80 ZONE] dr0_lfa: start 0x7150 end 0x7152 type pointers
7152  dr0_cfa: 
7152 defw 0x6306
; [DASMZ80 ZONE] dr0_cfa: start 0x7152 end 0x7154 type pointers
7154  dr0_pfa: 
7154 defw zero_cfa
7156 defw offset_cfa
7158 defw store_cfa
715A defw semicolon_s_cfa
; [DASMZ80 ZONE] dr0_pfa: start 0x7154 end 0x715C type pointers

7118  empty_buffers_nfa: 
7118 defb 0x0D+0x80,"EMPTY-BUFFER","S"+0x80
; [DASMZ80 ZONE] empty_buffers_nfa: start 0x7118 end 0x7126 type bytedata
7126  empty_buffers_lfa: 
7126 defw update_nfa
; [DASMZ80 ZONE] empty_buffers_lfa: start 0x7126 end 0x7128 type pointers
7128  empty_buffers_cfa: 
7128 defw 0x6306
; [DASMZ80 ZONE] empty_buffers_cfa: start 0x7128 end 0x712A type pointers
712A  empty_buffers_pfa: 
712A defw first_cfa
712C defw limit_cfa
712E defw over_cfa
7130 defw minus_cfa
7132 defw erase_cfa
7134 defw limit_cfa
7136 defw first_cfa
7138 defw paren_do_cfa
713A defw lit_cfa,0x7FFF
713E defw i_cfa
7140 defw store_cfa
7142 defw lit_cfa,0x0084
7146 defw paren_plus_loop_cfa,0xFFF2; to 0x713A
714A defw semicolon_s_cfa
; [DASMZ80 ZONE] empty_buffers_pfa: start 0x712A end 0x714C type pointers

70F9  update_nfa: 
70F9 defb 0x06+0x80,"UPDAT","E"+0x80
; [DASMZ80 ZONE] update_nfa: start 0x70F9 end 0x7100 type bytedata
7100  update_lfa: 
7100 defw plus_buf_nfa
; [DASMZ80 ZONE] update_lfa: start 0x7100 end 0x7102 type pointers
7102  update_cfa: 
7102 defw 0x6306
; [DASMZ80 ZONE] update_cfa: start 0x7102 end 0x7104 type pointers
7104  update_pfa: 
7104 defw prev_cfa
7106 defw fetch_cfa
7108 defw fetch_cfa
710A defw lit_cfa,0x8000
710E defw or_cfa
7110 defw prev_cfa
7112 defw fetch_cfa
7114 defw store_cfa
7116 defw semicolon_s_cfa
; [DASMZ80 ZONE] update_pfa: start 0x7104 end 0x7118 type pointers

70D2  plus_buf_nfa: 
70D2 defb 0x04+0x80,"+BU","F"+0x80
; [DASMZ80 ZONE] plus_buf_nfa: start 0x70D2 end 0x70D7 type bytedata
70D7  plus_buf_lfa: 
70D7 defw hash_buff_nfa
; [DASMZ80 ZONE] plus_buf_lfa: start 0x70D7 end 0x70D9 type pointers
70D9  plus_buf_cfa: 
70D9 defw 0x6306
; [DASMZ80 ZONE] plus_buf_cfa: start 0x70D9 end 0x70DB type pointers
70DB  plus_buf_pfa: 
70DB defw lit_cfa,0x0084
70DF defw plus_cfa
70E1 defw dup_cfa
70E3 defw limit_cfa
70E5 defw equals_cfa
70E7 defw zero_branch_cfa,0x0006; to 0x70EF
70EB defw drop_cfa
70ED defw first_cfa
70EF defw dup_cfa
70F1 defw prev_cfa
70F3 defw fetch_cfa
70F5 defw minus_cfa
70F7 defw semicolon_s_cfa
; [DASMZ80 ZONE] plus_buf_pfa: start 0x70DB end 0x70F9 type pointers

70C6  hash_buff_nfa: 
70C6 defb 0x05+0x80,"#BUF","F"+0x80
; [DASMZ80 ZONE] hash_buff_nfa: start 0x70C6 end 0x70CC type bytedata
70CC  hash_buff_lfa: 
70CC defw prev_nfa
; [DASMZ80 ZONE] hash_buff_lfa: start 0x70CC end 0x70CE type pointers
70CE  hash_buff_cfa: 
70CE defw 0x6348
; [DASMZ80 ZONE] hash_buff_cfa: start 0x70CE end 0x70D0 type pointers
70D0  hash_buff_pfa: 
70D0 defw 0x0008
; [DASMZ80 ZONE] hash_buff_pfa: start 0x70D0 end 0x70D2 type worddata

70BB  prev_nfa: 
70BB defb 0x04+0x80,"PRE","V"+0x80
; [DASMZ80 ZONE] prev_nfa: start 0x70BB end 0x70C0 type bytedata
70C0  prev_lfa: 
70C0 defw use_nfa
; [DASMZ80 ZONE] prev_lfa: start 0x70C0 end 0x70C2 type pointers
70C2  prev_cfa: 
70C2 defw 0x6362
; [DASMZ80 ZONE] prev_cfa: start 0x70C2 end 0x70C4 type pointers
70C4  prev_pfa: 
70C4 defw 0x8D30
; [DASMZ80 ZONE] prev_pfa: start 0x70C4 end 0x70C6 type worddata

70B1  use_nfa: 
70B1 defb 0x03+0x80,"US","E"+0x80
; [DASMZ80 ZONE] use_nfa: start 0x70B1 end 0x70B5 type bytedata
70B5  use_lfa: 
70B5 defw message_nfa
; [DASMZ80 ZONE] use_lfa: start 0x70B5 end 0x70B7 type pointers
70B7  use_cfa: 
70B7 defw 0x6362
; [DASMZ80 ZONE] use_cfa: start 0x70B7 end 0x70B9 type pointers
70B9  use_pfa: 
70B9 defw 0x8DB4
; [DASMZ80 ZONE] use_pfa: start 0x70B9 end 0x70BB type worddata

6F83  message_nfa: 
6F83 defb 0x07+0x80,"MESSAG","E"+0x80
; [DASMZ80 ZONE] message_nfa: start 0x6F83 end 0x6F8B type bytedata
6F8B  message_lfa: 
6F8B defw dot_line_nfa
; [DASMZ80 ZONE] message_lfa: start 0x6F8B end 0x6F8D type pointers
6F8D  message_cfa: 
6F8D defw 0x6306
; [DASMZ80 ZONE] message_cfa: start 0x6F8D end 0x6F8F type pointers
6F8F  message_pfa: 
6F8F defw warning_cfa
6F91 defw fetch_cfa
6F93 defw zero_branch_cfa,0x001E; to 0x6FB3
6F97 defw minus_dup_cfa
6F99 defw zero_branch_cfa,0x0014; to 0x6FAF
6F9D defw lit_cfa,0x0004
6FA1 defw offset_cfa
6FA3 defw fetch_cfa
6FA5 defw b_slash_scr_cfa
6FA7 defw slash_cfa
6FA9 defw minus_cfa
6FAB defw dot_line_cfa
6FAD defw space_cfa
6FAF defw branch_cfa,0x000D; to 0x6FBE
6FB3 defw paren_dot_quote_cfa
6FB5 defb 0x06,"MSG # "
6FBC defw dot_cfa
6FBE defw semicolon_s_cfa
; [DASMZ80 ZONE] message_pfa: start 0x6F8F end 0x6FC0 type pointers

6F71  dot_line_nfa: 
6F71 defb 0x05+0x80,".LIN","E"+0x80
; [DASMZ80 ZONE] dot_line_nfa: start 0x6F71 end 0x6F77 type bytedata
6F77  dot_line_lfa: 
6F77 defw paren_line_nfa
; [DASMZ80 ZONE] dot_line_lfa: start 0x6F77 end 0x6F79 type pointers
6F79  dot_line_cfa: 
6F79 defw 0x6306
; [DASMZ80 ZONE] dot_line_cfa: start 0x6F79 end 0x6F7B type pointers
6F7B  dot_line_pfa: 
6F7B defw paren_line_cfa
6F7D defw minus_trailing_cfa
6F7F defw type_cfa
6F81 defw semicolon_s_cfa
; [DASMZ80 ZONE] dot_line_pfa: start 0x6F7B end 0x6F83 type pointers

6F4A  paren_line_nfa: 
6F4A defb 0x06+0x80,"(LINE",")"+0x80
; [DASMZ80 ZONE] paren_line_nfa: start 0x6F4A end 0x6F51 type bytedata
6F51  paren_line_lfa: 
6F51 defw m_slash_mod_nfa
; [DASMZ80 ZONE] paren_line_lfa: start 0x6F51 end 0x6F53 type pointers
6F53  paren_line_cfa: 
6F53 defw 0x6306
; [DASMZ80 ZONE] paren_line_cfa: start 0x6F53 end 0x6F55 type pointers
6F55  paren_line_pfa: 
6F55 defw to_r_cfa
6F57 defw lit_cfa,0x0040
6F5B defw b_slash_buf_cfa
6F5D defw star_slash_mod_cfa
6F5F defw from_r_cfa
6F61 defw b_slash_scr_cfa
6F63 defw star_cfa
6F65 defw plus_cfa
6F67 defw block_cfa
6F69 defw plus_cfa
6F6B defw lit_cfa,0x0040
6F6F defw semicolon_s_cfa
; [DASMZ80 ZONE] paren_line_pfa: start 0x6F55 end 0x6F71 type pointers

6F2C  m_slash_mod_nfa: 
6F2C defb 0x05+0x80,"M/MO","D"+0x80
; [DASMZ80 ZONE] m_slash_mod_nfa: start 0x6F2C end 0x6F32 type bytedata
6F32  m_slash_mod_lfa: 
6F32 defw star_slash_nfa
; [DASMZ80 ZONE] m_slash_mod_lfa: start 0x6F32 end 0x6F34 type pointers
6F34  m_slash_mod_cfa: 
6F34 defw 0x6306
; [DASMZ80 ZONE] m_slash_mod_cfa: start 0x6F34 end 0x6F36 type pointers
6F36  m_slash_mod_pfa: 
6F36 defw to_r_cfa
6F38 defw zero_cfa
6F3A defw r_cfa
6F3C defw u_slash_mod_cfa
6F3E defw from_r_cfa
6F40 defw swap_cfa
6F42 defw to_r_cfa
6F44 defw u_slash_mod_cfa
6F46 defw from_r_cfa
6F48 defw semicolon_s_cfa
; [DASMZ80 ZONE] m_slash_mod_pfa: start 0x6F36 end 0x6F4A type pointers

6F1D  star_slash_nfa: 
6F1D defb 0x02+0x80,"*","/"+0x80
; [DASMZ80 ZONE] star_slash_nfa: start 0x6F1D end 0x6F20 type bytedata
6F20  star_slash_lfa: 
6F20 defw star_slash_mod_nfa
; [DASMZ80 ZONE] star_slash_lfa: start 0x6F20 end 0x6F22 type pointers
6F22  star_slash_cfa: 
6F22 defw 0x6306
; [DASMZ80 ZONE] star_slash_cfa: start 0x6F22 end 0x6F24 type pointers
6F24  star_slash_pfa: 
6F24 defw star_slash_mod_cfa
6F26 defw swap_cfa
6F28 defw drop_cfa
6F2A defw semicolon_s_cfa
; [DASMZ80 ZONE] star_slash_pfa: start 0x6F24 end 0x6F2C type pointers

6F09  star_slash_mod_nfa: 
6F09 defb 0x05+0x80,"*/MO","D"+0x80
; [DASMZ80 ZONE] star_slash_mod_nfa: start 0x6F09 end 0x6F0F type bytedata
6F0F  star_slash_mod_lfa: 
6F0F defw mod_nfa
; [DASMZ80 ZONE] star_slash_mod_lfa: start 0x6F0F end 0x6F11 type pointers
6F11  star_slash_mod_cfa: 
6F11 defw 0x6306
; [DASMZ80 ZONE] star_slash_mod_cfa: start 0x6F11 end 0x6F13 type pointers
6F13  star_slash_mod_pfa: 
6F13 defw to_r_cfa
6F15 defw m_star_cfa
6F17 defw from_r_cfa
6F19 defw m_slash_cfa
6F1B defw semicolon_s_cfa
; [DASMZ80 ZONE] star_slash_mod_pfa: start 0x6F13 end 0x6F1D type pointers

6EFB  mod_nfa: 
6EFB defb 0x03+0x80,"MO","D"+0x80
; [DASMZ80 ZONE] mod_nfa: start 0x6EFB end 0x6EFF type bytedata
6EFF  mod_lfa: 
6EFF defw slash_nfa
; [DASMZ80 ZONE] mod_lfa: start 0x6EFF end 0x6F01 type pointers
6F01  mod_cfa: 
6F01 defw 0x6306
; [DASMZ80 ZONE] mod_cfa: start 0x6F01 end 0x6F03 type pointers
6F03  mod_pfa: 
6F03 defw slash_mod_cfa
6F05 defw drop_cfa
6F07 defw semicolon_s_cfa
; [DASMZ80 ZONE] mod_pfa: start 0x6F03 end 0x6F09 type pointers

6EED  slash_nfa: 
6EED defb 0x01+0x80,"/"+0x80
; [DASMZ80 ZONE] slash_nfa: start 0x6EED end 0x6EEF type bytedata
6EEF  slash_lfa: 
6EEF defw slash_mod_nfa
; [DASMZ80 ZONE] slash_lfa: start 0x6EEF end 0x6EF1 type pointers
6EF1  slash_cfa: 
6EF1 defw 0x6306
; [DASMZ80 ZONE] slash_cfa: start 0x6EF1 end 0x6EF3 type pointers
6EF3  slash_pfa: 
6EF3 defw slash_mod_cfa
6EF5 defw swap_cfa
6EF7 defw drop_cfa
6EF9 defw semicolon_s_cfa
; [DASMZ80 ZONE] slash_pfa: start 0x6EF3 end 0x6EFB type pointers

6EDA  slash_mod_nfa: 
6EDA defb 0x04+0x80,"/MO","D"+0x80
; [DASMZ80 ZONE] slash_mod_nfa: start 0x6EDA end 0x6EDF type bytedata
6EDF  slash_mod_lfa: 
6EDF defw star_nfa
; [DASMZ80 ZONE] slash_mod_lfa: start 0x6EDF end 0x6EE1 type pointers
6EE1  slash_mod_cfa: 
6EE1 defw 0x6306
; [DASMZ80 ZONE] slash_mod_cfa: start 0x6EE1 end 0x6EE3 type pointers
6EE3  slash_mod_pfa: 
6EE3 defw to_r_cfa
6EE5 defw s_to_d_cfa
6EE7 defw from_r_cfa
6EE9 defw m_slash_cfa
6EEB defw semicolon_s_cfa
; [DASMZ80 ZONE] slash_mod_pfa: start 0x6EE3 end 0x6EED type pointers

6ECE  star_nfa: 
6ECE defb 0x01+0x80,"*"+0x80
; [DASMZ80 ZONE] star_nfa: start 0x6ECE end 0x6ED0 type bytedata
6ED0  star_lfa: 
6ED0 defw m_slash_nfa
; [DASMZ80 ZONE] star_lfa: start 0x6ED0 end 0x6ED2 type pointers
6ED2  star_cfa: 
6ED2 defw 0x6306
; [DASMZ80 ZONE] star_cfa: start 0x6ED2 end 0x6ED4 type pointers
6ED4  star_pfa: 
6ED4 defw m_star_cfa
6ED6 defw drop_cfa
6ED8 defw semicolon_s_cfa
; [DASMZ80 ZONE] star_pfa: start 0x6ED4 end 0x6EDA type pointers

6EA7  m_slash_nfa: 
6EA7 defb 0x02+0x80,"M","/"+0x80
; [DASMZ80 ZONE] m_slash_nfa: start 0x6EA7 end 0x6EAA type bytedata
6EAA  m_slash_lfa: 
6EAA defw m_star_nfa
; [DASMZ80 ZONE] m_slash_lfa: start 0x6EAA end 0x6EAC type pointers
6EAC  m_slash_cfa: 
6EAC defw 0x6306
; [DASMZ80 ZONE] m_slash_cfa: start 0x6EAC end 0x6EAE type pointers
6EAE  m_slash_pfa: 
6EAE defw over_cfa
6EB0 defw to_r_cfa
6EB2 defw to_r_cfa
6EB4 defw dabs_cfa
6EB6 defw r_cfa
6EB8 defw abs_cfa
6EBA defw u_slash_mod_cfa
6EBC defw from_r_cfa
6EBE defw r_cfa
6EC0 defw xor_cfa
6EC2 defw plus_minus_cfa
6EC4 defw swap_cfa
6EC6 defw from_r_cfa
6EC8 defw plus_minus_cfa
6ECA defw swap_cfa
6ECC defw semicolon_s_cfa
; [DASMZ80 ZONE] m_slash_pfa: start 0x6EAE end 0x6ECE type pointers

6E8C  m_star_nfa: 
6E8C defb 0x02+0x80,"M","*"+0x80
; [DASMZ80 ZONE] m_star_nfa: start 0x6E8C end 0x6E8F type bytedata
6E8F  m_star_lfa: 
6E8F defw max_nfa
; [DASMZ80 ZONE] m_star_lfa: start 0x6E8F end 0x6E91 type pointers
6E91  m_star_cfa: 
6E91 defw 0x6306
; [DASMZ80 ZONE] m_star_cfa: start 0x6E91 end 0x6E93 type pointers
6E93  m_star_pfa: 
6E93 defw two_dup_cfa
6E95 defw xor_cfa
6E97 defw to_r_cfa
6E99 defw abs_cfa
6E9B defw swap_cfa
6E9D defw abs_cfa
6E9F defw u_star_cfa
6EA1 defw from_r_cfa
6EA3 defw d_plus_minus_cfa
6EA5 defw semicolon_s_cfa
; [DASMZ80 ZONE] m_star_pfa: start 0x6E93 end 0x6EA7 type pointers

6E76  max_nfa: 
6E76 defb 0x03+0x80,"MA","X"+0x80
; [DASMZ80 ZONE] max_nfa: start 0x6E76 end 0x6E7A type bytedata
6E7A  max_lfa: 
6E7A defw min_nfa
; [DASMZ80 ZONE] max_lfa: start 0x6E7A end 0x6E7C type pointers
6E7C  max_cfa: 
6E7C defw 0x6306
; [DASMZ80 ZONE] max_cfa: start 0x6E7C end 0x6E7E type pointers
6E7E  max_pfa: 
6E7E defw two_dup_cfa
6E80 defw less_than_cfa
6E82 defw zero_branch_cfa,0x0004; to 0x6E88
6E86 defw swap_cfa
6E88 defw drop_cfa
6E8A defw semicolon_s_cfa
; [DASMZ80 ZONE] max_pfa: start 0x6E7E end 0x6E8C type pointers

6E60  min_nfa: 
6E60 defb 0x03+0x80,"MI","N"+0x80
; [DASMZ80 ZONE] min_nfa: start 0x6E60 end 0x6E64 type bytedata
6E64  min_lfa: 
6E64 defw dabs_nfa
; [DASMZ80 ZONE] min_lfa: start 0x6E64 end 0x6E66 type pointers
6E66  min_cfa: 
6E66 defw 0x6306
; [DASMZ80 ZONE] min_cfa: start 0x6E66 end 0x6E68 type pointers
6E68  min_pfa: 
6E68 defw two_dup_cfa
6E6A defw greater_than_cfa
6E6C defw zero_branch_cfa,0x0004; to 0x6E72
6E70 defw swap_cfa
6E72 defw drop_cfa
6E74 defw semicolon_s_cfa
; [DASMZ80 ZONE] min_pfa: start 0x6E68 end 0x6E76 type pointers

6E51  dabs_nfa: 
6E51 defb 0x04+0x80,"DAB","S"+0x80
; [DASMZ80 ZONE] dabs_nfa: start 0x6E51 end 0x6E56 type bytedata
6E56  dabs_lfa: 
6E56 defw abs_nfa
; [DASMZ80 ZONE] dabs_lfa: start 0x6E56 end 0x6E58 type pointers
6E58  dabs_cfa: 
6E58 defw 0x6306
; [DASMZ80 ZONE] dabs_cfa: start 0x6E58 end 0x6E5A type pointers
6E5A  dabs_pfa: 
6E5A defw dup_cfa
6E5C defw d_plus_minus_cfa
6E5E defw semicolon_s_cfa
; [DASMZ80 ZONE] dabs_pfa: start 0x6E5A end 0x6E60 type pointers

6E43  abs_nfa: 
6E43 defb 0x03+0x80,"AB","S"+0x80
; [DASMZ80 ZONE] abs_nfa: start 0x6E43 end 0x6E47 type bytedata
6E47  abs_lfa: 
6E47 defw d_plus_minus_nfa
; [DASMZ80 ZONE] abs_lfa: start 0x6E47 end 0x6E49 type pointers
6E49  abs_cfa: 
6E49 defw 0x6306
; [DASMZ80 ZONE] abs_cfa: start 0x6E49 end 0x6E4B type pointers
6E4B  abs_pfa: 
6E4B defw dup_cfa
6E4D defw plus_minus_cfa
6E4F defw semicolon_s_cfa
; [DASMZ80 ZONE] abs_pfa: start 0x6E4B end 0x6E51 type pointers

6E31  d_plus_minus_nfa: 
6E31 defb 0x03+0x80,"D+","-"+0x80
; [DASMZ80 ZONE] d_plus_minus_nfa: start 0x6E31 end 0x6E35 type bytedata
6E35  d_plus_minus_lfa: 
6E35 defw plus_minus_nfa
; [DASMZ80 ZONE] d_plus_minus_lfa: start 0x6E35 end 0x6E37 type pointers
6E37  d_plus_minus_cfa: 
6E37 defw 0x6306
; [DASMZ80 ZONE] d_plus_minus_cfa: start 0x6E37 end 0x6E39 type pointers
6E39  d_plus_minus_pfa: 
6E39 defw zero_less_than_cfa
6E3B defw zero_branch_cfa,0x0004; to 0x6E41
6E3F defw dminus_cfa
6E41 defw semicolon_s_cfa
; [DASMZ80 ZONE] d_plus_minus_pfa: start 0x6E39 end 0x6E43 type pointers

6E20  plus_minus_nfa: 
6E20 defb 0x02+0x80,"+","-"+0x80
; [DASMZ80 ZONE] plus_minus_nfa: start 0x6E20 end 0x6E23 type bytedata
6E23  plus_minus_lfa: 
6E23 defw s_to_d_nfa
; [DASMZ80 ZONE] plus_minus_lfa: start 0x6E23 end 0x6E25 type pointers
6E25  plus_minus_cfa: 
6E25 defw 0x6306
; [DASMZ80 ZONE] plus_minus_cfa: start 0x6E25 end 0x6E27 type pointers
6E27  plus_minus_pfa: 
6E27 defw zero_less_than_cfa
6E29 defw zero_branch_cfa,0x0004; to 0x6E2F
6E2D defw minus_cfa
6E2F defw semicolon_s_cfa
; [DASMZ80 ZONE] plus_minus_pfa: start 0x6E27 end 0x6E31 type pointers

6E0A  s_to_d_nfa: 
6E0A defb 0x04+0x80,"S->","D"+0x80
; [DASMZ80 ZONE] s_to_d_nfa: start 0x6E0A end 0x6E0F type bytedata
6E0F  s_to_d_lfa: 
6E0F defw cold_nfa
; [DASMZ80 ZONE] s_to_d_lfa: start 0x6E0F end 0x6E11 type pointers
6E11  s_to_d_cfa: 
6E11 defw s_to_d_pfa
; [DASMZ80 ZONE] s_to_d_cfa: start 0x6E11 end 0x6E13 type pointers
6E13  s_to_d_pfa: 
; [DASMZ80 ZONE] s_to_d_cfa: start 0x6E13 end 0x6E20 type code

6DC9  cold_nfa: 
6DC9 defb 0x04+0x80,"COL","D"+0x80
; [DASMZ80 ZONE] cold_nfa: start 0x6DC9 end 0x6DCE type bytedata
6DCE  cold_lfa: 
6DCE defw warm_nfa
; [DASMZ80 ZONE] cold_lfa: start 0x6DCE end 0x6DD0 type pointers
6DD0  cold_cfa: 
6DD0 defw 0x6306
; [DASMZ80 ZONE] cold_cfa: start 0x6DD0 end 0x6DD2 type pointers
6DD2  cold_pfa: 
6DD2 defw empty_buffers_cfa
6DD4 defw first_cfa
6DD6 defw use_cfa
6DD8 defw store_cfa
6DDA defw first_cfa
6DDC defw prev_cfa
6DDE defw store_cfa
6DE0 defw dr0_cfa
6DE2 defw lit_cfa,0x5E52
6DE6 defw lit_cfa,0x5E66
6DEA defw fetch_cfa
6DEC defw lit_cfa,0x0006
6DF0 defw plus_cfa
6DF2 defw lit_cfa,0x0010
6DF6 defw cmove_cfa
6DF8 defw lit_cfa,0x5E4C
6DFC defw fetch_cfa
6DFE defw lit_cfa,0x6CF8
6E02 defw store_cfa
6E04 defw abort_cfa
; [DASMZ80 ZONE] cold_pfa: start 0x6DD2 end 0x6E06 type pointers

6DA3  warm_nfa: 
6DA3 defb 0x04+0x80,"WAR","M"+0x80
; [DASMZ80 ZONE] warm_nfa: start 0x6DA3 end 0x6DA8 type bytedata
6DA8  warm_lfa: 
6DA8 defw abort_nfa
; [DASMZ80 ZONE] warm_lfa: start 0x6DA8 end 0x6DAA type pointers
6DAA  warm_cfa: 
6DAA defw 0x6306
; [DASMZ80 ZONE] warm_cfa: start 0x6DAA end 0x6DAC type pointers
6DAC  warm_pfa: 
6DAC defw empty_buffers_cfa
6DAE defw abort_cfa
; [DASMZ80 ZONE] warm_pfa: start 0x6DAC end 0x6DB0 type pointers

6D50  abort_nfa: 
6D50 defb 0x05+0x80,"ABOR","T"+0x80
; [DASMZ80 ZONE] abort_nfa: start 0x6D50 end 0x6D56 type bytedata
6D56  abort_lfa: 
6D56 defw quit_nfa
; [DASMZ80 ZONE] abort_lfa: start 0x6D56 end 0x6D58 type pointers
6D58  abort_cfa: 
6D58 defw 0x6306
; [DASMZ80 ZONE] abort_cfa: start 0x6D58 end 0x6D5A type pointers
6D5A  abort_pfa: 
6D5A defw sp_store_cfa
6D5C defw decimal_cfa
6D5E defw question_stack_cfa
6D60 defw CLS0_cfa
6D62 defw GREETING_cfa
6D64 defw forth_cfa
6D66 defw definitions_cfa
6D68 defw noop_cfa
6D6A defw quit_cfa
; [DASMZ80 ZONE] abort_pfa: start 0x6D5A end 0x6D6C type pointers

6D24  quit_nfa: 
6D24 defb 0x04+0x80,"QUI","T"+0x80
; [DASMZ80 ZONE] quit_nfa: start 0x6D24 end 0x6D29 type bytedata
6D29  quit_lfa: 
6D29 defw paren_nfa
; [DASMZ80 ZONE] quit_lfa: start 0x6D29 end 0x6D2B type pointers
6D2B  quit_cfa: 
6D2B defw 0x6306
; [DASMZ80 ZONE] quit_cfa: start 0x6D2B end 0x6D2D type pointers
6D2D  quit_pfa: 
6D2D defw zero_cfa
6D2F defw blk_cfa
6D31 defw store_cfa
6D33 defw left_bracket_cfa
6D35 defw rp_store_cfa
6D37 defw cr_cfa
6D39 defw query_cfa
6D3B defw interpret_cfa
6D3D defw state_cfa
6D3F defw fetch_cfa
6D41 defw zero_equals_cfa
6D43 defw zero_branch_cfa,0x0007; to 0x6D4C
6D47 defw paren_dot_quote_cfa
6D49 defb 0x02,"ok"
6D4C defw branch_cfa
; [DASMZ80 ZONE] quit_pfa: start 0x6D2D end 0x6D4E type pointers

6D16  paren_nfa: 
6D16 defb 0x01+0x80+0x40,"("+0x80
; [DASMZ80 ZONE] paren_nfa: start 0x6D16 end 0x6D18 type bytedata
6D18  paren_lfa: 
6D18 defw definitions_nfa
; [DASMZ80 ZONE] paren_lfa: start 0x6D18 end 0x6D1A type pointers
6D1A  paren_cfa: 
6D1A defw 0x6306
; [DASMZ80 ZONE] paren_cfa: start 0x6D1A end 0x6D1C type pointers
6D1C  paren_pfa: 
6D1C defw lit_cfa,0x0029
6D20 defw word_cfa
6D22 defw semicolon_s_cfa
; [DASMZ80 ZONE] paren_pfa: start 0x6D1C end 0x6D24 type pointers

6CFC  definitions_nfa: 
6CFC defb 0x0B+0x80,"DEFINITION","S"+0x80
; [DASMZ80 ZONE] definitions_nfa: start 0x6CFC end 0x6D08 type bytedata
6D08  definitions_lfa: 
6D08 defw forth_nfa
; [DASMZ80 ZONE] definitions_lfa: start 0x6D08 end 0x6D0A type pointers
6D0A  definitions_cfa: 
6D0A defw 0x6306
; [DASMZ80 ZONE] definitions_cfa: start 0x6D0A end 0x6D0C type pointers
6D0C  definitions_pfa: 
6D0C defw context_cfa
6D0E defw fetch_cfa
6D10 defw current_cfa
6D12 defw store_cfa
6D14 defw semicolon_s_cfa
; [DASMZ80 ZONE] definitions_pfa: start 0x6D0C end 0x6D16 type pointers

6CEA  forth_nfa: 
6CEA defb 0x05+0x80+0x40,"FORT","H"+0x80
; [DASMZ80 ZONE] forth_nfa: start 0x6CEA end 0x6CF0 type bytedata
6CF0  forth_lfa: 
6CF0 defw vocabulary_nfa
; [DASMZ80 ZONE] forth_lfa: start 0x6CF0 end 0x6CF2 type pointers
6CF2  forth_cfa: 
6CF2 defw 0x67B8
; [DASMZ80 ZONE] forth_cfa: start 0x6CF2 end 0x6CF4 type pointers
6CF4  forth_pfa: ; Word type not implemented.

6CB5  vocabulary_nfa: 
6CB5 defb 0x0A+0x80,"VOCABULAR","Y"+0x80
; [DASMZ80 ZONE] vocabulary_nfa: start 0x6CB5 end 0x6CC0 type bytedata
6CC0  vocabulary_lfa: 
6CC0 defw immediate_nfa
; [DASMZ80 ZONE] vocabulary_lfa: start 0x6CC0 end 0x6CC2 type pointers
6CC2  vocabulary_cfa: 
6CC2 defw 0x6306
; [DASMZ80 ZONE] vocabulary_cfa: start 0x6CC2 end 0x6CC4 type pointers
6CC4  vocabulary_pfa: 
6CC4 defw builds_cfa
6CC6 defw lit_cfa,0xA081
6CCA defw comma_cfa
6CCC defw current_cfa
6CCE defw fetch_cfa
6CD0 defw cfa_cfa
6CD2 defw comma_cfa
6CD4 defw here_cfa
6CD6 defw voc_link_cfa
6CD8 defw fetch_cfa
6CDA defw comma_cfa
6CDC defw voc_link_cfa
6CDE defw store_cfa
6CE0 defw does_cfa
6CE2 defw two_plus_cfa
6CE4 defw context_cfa
6CE6 defw store_cfa
6CE8 defw semicolon_s_cfa
; [DASMZ80 ZONE] vocabulary_pfa: start 0x6CC4 end 0x6CEA type pointers

6C9D  immediate_nfa: 
6C9D defb 0x09+0x80,"IMMEDIAT","E"+0x80
; [DASMZ80 ZONE] immediate_nfa: start 0x6C9D end 0x6CA7 type bytedata
6CA7  immediate_lfa: 
6CA7 defw interpret_nfa
; [DASMZ80 ZONE] immediate_lfa: start 0x6CA7 end 0x6CA9 type pointers
6CA9  immediate_cfa: 
6CA9 defw 0x6306
; [DASMZ80 ZONE] immediate_cfa: start 0x6CA9 end 0x6CAB type pointers
6CAB  immediate_pfa: 
6CAB defw latest_cfa
6CAD defw lit_cfa,0x0040
6CB1 defw toggle_cfa
6CB3 defw semicolon_s_cfa
; [DASMZ80 ZONE] immediate_pfa: start 0x6CAB end 0x6CB5 type pointers

6C4F  interpret_nfa: 
6C4F defb 0x09+0x80,"INTERPRE","T"+0x80
; [DASMZ80 ZONE] interpret_nfa: start 0x6C4F end 0x6C59 type bytedata
6C59  interpret_lfa: 
6C59 defw question_stack_nfa
; [DASMZ80 ZONE] interpret_lfa: start 0x6C59 end 0x6C5B type pointers
6C5B  interpret_cfa: 
6C5B defw 0x6306
; [DASMZ80 ZONE] interpret_cfa: start 0x6C5B end 0x6C5D type pointers
6C5D  interpret_pfa: 
6C5D defw minus_find_cfa
6C5F defw zero_branch_cfa,0x001E; to 0x6C7F
6C63 defw state_cfa
6C65 defw fetch_cfa
6C67 defw less_than_cfa
6C69 defw zero_branch_cfa,0x000A; to 0x6C75
6C6D defw cfa_cfa
6C6F defw comma_cfa
6C71 defw branch_cfa,0x0006; to 0x6C79
6C75 defw cfa_cfa
6C77 defw execute_cfa
6C79 defw question_stack_cfa
6C7B defw branch_cfa,0x001C; to 0x6C99
6C7F defw here_cfa
6C81 defw number_cfa
6C83 defw dpl_cfa
6C85 defw fetch_cfa
6C87 defw one_plus_cfa
6C89 defw zero_branch_cfa,0x0008; to 0x6C93
6C8D defw dliteral_cfa
6C8F defw branch_cfa,0x0006; to 0x6C97
6C93 defw drop_cfa
6C95 defw literal_cfa
6C97 defw question_stack_cfa
6C99 defw branch_cfa
; [DASMZ80 ZONE] interpret_pfa: start 0x6C5D end 0x6C9B type pointers

6C22  question_stack_nfa: 
6C22 defb 0x06+0x80,"?STAC","K"+0x80
; [DASMZ80 ZONE] question_stack_nfa: start 0x6C22 end 0x6C29 type bytedata
6C29  question_stack_lfa: 
6C29 defw dliteral_nfa
; [DASMZ80 ZONE] question_stack_lfa: start 0x6C29 end 0x6C2B type pointers
6C2B  question_stack_cfa: 
6C2B defw 0x6306
; [DASMZ80 ZONE] question_stack_cfa: start 0x6C2B end 0x6C2D type pointers
6C2D  question_stack_pfa: 
6C2D defw sp_fetch_cfa
6C2F defw s0_cfa
6C31 defw fetch_cfa
6C33 defw swap_cfa
6C35 defw u_less_than_cfa
6C37 defw one_cfa
6C39 defw question_error_cfa
6C3B defw sp_fetch_cfa
6C3D defw lit_cfa,0x89CE
6C41 defw less_than_cfa
6C43 defw lit_cfa,0x0007
6C47 defw question_error_cfa
6C49 defw semicolon_s_cfa
; [DASMZ80 ZONE] question_stack_pfa: start 0x6C2D end 0x6C4B type pointers

6C05  dliteral_nfa: 
6C05 defb 0x08+0x80+0x40,"DLITERA","L"+0x80
; [DASMZ80 ZONE] dliteral_nfa: start 0x6C05 end 0x6C0E type bytedata
6C0E  dliteral_lfa: 
6C0E defw literal_nfa
; [DASMZ80 ZONE] dliteral_lfa: start 0x6C0E end 0x6C10 type pointers
6C10  dliteral_cfa: 
6C10 defw 0x6306
; [DASMZ80 ZONE] dliteral_cfa: start 0x6C10 end 0x6C12 type pointers
6C12  dliteral_pfa: 
6C12 defw state_cfa
6C14 defw fetch_cfa
6C16 defw zero_branch_cfa,0x0008; to 0x6C20
6C1A defw swap_cfa
6C1C defw literal_cfa
6C1E defw literal_cfa
6C20 defw semicolon_s_cfa
; [DASMZ80 ZONE] dliteral_pfa: start 0x6C12 end 0x6C22 type pointers

6BE9  literal_nfa: 
6BE9 defb 0x07+0x80+0x40,"LITERA","L"+0x80
; [DASMZ80 ZONE] literal_nfa: start 0x6BE9 end 0x6BF1 type bytedata
6BF1  literal_lfa: 
6BF1 defw bracket_compile_[COMPILE]_fa
; [DASMZ80 ZONE] literal_lfa: start 0x6BF1 end 0x6BF3 type pointers
6BF3  literal_cfa: 
6BF3 defw 0x6306
; [DASMZ80 ZONE] literal_cfa: start 0x6BF3 end 0x6BF5 type pointers
6BF5  literal_pfa: 
6BF5 defw state_cfa
6BF7 defw fetch_cfa
6BF9 defw zero_branch_cfa,0x0008; to 0x6C03
6BFD defw compile_cfa,LIT_cfa
6C01 defw comma_cfa
6C03 defw semicolon_s_cfa
; [DASMZ80 ZONE] literal_pfa: start 0x6BF5 end 0x6C05 type pointers

6BCB  bracket_compile_[COMPILE]_fa: 
6BCB defb 0x09+0x80+0x40,"[COMPILE","]"+0x80
; [DASMZ80 ZONE] bracket_compile_[COMPILE]_fa: start 0x6BCB end 0x6BD5 type bytedata
6BD5  bracket_compile_[COMPILE]_fa: 
6BD5 defw create_nfa
; [DASMZ80 ZONE] bracket_compile_[COMPILE]_fa: start 0x6BD5 end 0x6BD7 type pointers
6BD7  bracket_compile_[COMPILE]_fa: 
6BD7 defw 0x6306
; [DASMZ80 ZONE] bracket_compile_[COMPILE]_fa: start 0x6BD7 end 0x6BD9 type pointers
6BD9  bracket_compile_[COMPILE]_fa: 
6BD9 defw minus_find_cfa
6BDB defw zero_equals_cfa
6BDD defw zero_cfa
6BDF defw question_error_cfa
6BE1 defw drop_cfa
6BE3 defw cfa_cfa
6BE5 defw comma_cfa
6BE7 defw semicolon_s_cfa
; [DASMZ80 ZONE] bracket_compile_[COMPILE]_fa: start 0x6BD9 end 0x6BE9 type pointers

6B76  create_nfa: 
6B76 defb 0x06+0x80,"CREAT","E"+0x80
; [DASMZ80 ZONE] create_nfa: start 0x6B76 end 0x6B7D type bytedata
6B7D  create_lfa: 
6B7D defw id_dot_nfa
; [DASMZ80 ZONE] create_lfa: start 0x6B7D end 0x6B7F type pointers
6B7F  create_cfa: 
6B7F defw 0x6306
; [DASMZ80 ZONE] create_cfa: start 0x6B7F end 0x6B81 type pointers
6B81  create_pfa: 
6B81 defw minus_find_cfa
6B83 defw zero_branch_cfa,0x0010; to 0x6B95
6B87 defw drop_cfa
6B89 defw nfa_cfa
6B8B defw id_dot_cfa
6B8D defw lit_cfa,0x0004
6B91 defw message_cfa
6B93 defw space_cfa
6B95 defw here_cfa
6B97 defw dup_cfa
6B99 defw c_fetch_cfa
6B9B defw width_cfa
6B9D defw fetch_cfa
6B9F defw min_cfa
6BA1 defw one_plus_cfa
6BA3 defw allot_cfa
6BA5 defw dup_cfa
6BA7 defw lit_cfa,0x00A0
6BAB defw toggle_cfa
6BAD defw here_cfa
6BAF defw one_cfa
6BB1 defw minus_cfa
6BB3 defw lit_cfa,0x0080
6BB7 defw toggle_cfa
6BB9 defw latest_cfa
6BBB defw comma_cfa
6BBD defw current_cfa
6BBF defw fetch_cfa
6BC1 defw store_cfa
6BC3 defw here_cfa
6BC5 defw two_plus_cfa
6BC7 defw comma_cfa
6BC9 defw semicolon_s_cfa
; [DASMZ80 ZONE] create_pfa: start 0x6B81 end 0x6BCB type pointers

6B2C  id_dot_nfa: 
6B2C defb 0x03+0x80,"ID","."+0x80
; [DASMZ80 ZONE] id_dot_nfa: start 0x6B2C end 0x6B30 type bytedata
6B30  id_dot_lfa: 
6B30 defw error_nfa
; [DASMZ80 ZONE] id_dot_lfa: start 0x6B30 end 0x6B32 type pointers
6B32  id_dot_cfa: 
6B32 defw 0x6306
; [DASMZ80 ZONE] id_dot_cfa: start 0x6B32 end 0x6B34 type pointers
6B34  id_dot_pfa: 
6B34 defw pad_cfa
6B36 defw lit_cfa,0x0020
6B3A defw lit_cfa,0x005F
6B3E defw fill_cfa
6B40 defw dup_cfa
6B42 defw pfa_cfa
6B44 defw lfa_cfa
6B46 defw over_cfa
6B48 defw minus_cfa
6B4A defw pad_cfa
6B4C defw swap_cfa
6B4E defw cmove_cfa
6B50 defw pad_cfa
6B52 defw count_cfa
6B54 defw lit_cfa,0x001F
6B58 defw and_cfa
6B5A defw two_dup_cfa
6B5C defw plus_cfa
6B5E defw one_cfa
6B60 defw minus_cfa
6B62 defw dup_cfa
6B64 defw fetch_cfa
6B66 defw lit_cfa,0xFF7F
6B6A defw and_cfa
6B6C defw swap_cfa
6B6E defw store_cfa
6B70 defw type_cfa
6B72 defw space_cfa
6B74 defw semicolon_s_cfa
; [DASMZ80 ZONE] id_dot_pfa: start 0x6B34 end 0x6B76 type pointers

6AF5  error_nfa: 
6AF5 defb 0x05+0x80,"ERRO","R"+0x80
; [DASMZ80 ZONE] error_nfa: start 0x6AF5 end 0x6AFB type bytedata
6AFB  error_lfa: 
6AFB defw paren_abort_nfa
; [DASMZ80 ZONE] error_lfa: start 0x6AFB end 0x6AFD type pointers
6AFD  error_cfa: 
6AFD defw 0x6306
; [DASMZ80 ZONE] error_cfa: start 0x6AFD end 0x6AFF type pointers
6AFF  error_pfa: 
6AFF defw warning_cfa
6B01 defw fetch_cfa
6B03 defw zero_less_than_cfa
6B05 defw zero_branch_cfa,0x0004; to 0x6B0B
6B09 defw paren_abort_cfa
6B0B defw here_cfa
6B0D defw count_cfa
6B0F defw type_cfa
6B11 defw paren_dot_quote_cfa
6B13 defb 0x02,"? "
6B16 defw message_cfa
6B18 defw sp_store_cfa
6B1A defw blk_cfa
6B1C defw fetch_cfa
6B1E defw minus_dup_cfa
6B20 defw zero_branch_cfa,0x0008; to 0x6B2A
6B24 defw in_cfa
6B26 defw fetch_cfa
6B28 defw swap_cfa
6B2A defw quit_cfa
; [DASMZ80 ZONE] error_pfa: start 0x6AFF end 0x6B2C type pointers

6AE5  paren_abort_nfa: 
6AE5 defb 0x07+0x80,"(ABORT",")"+0x80
; [DASMZ80 ZONE] paren_abort_nfa: start 0x6AE5 end 0x6AED type bytedata
6AED  paren_abort_lfa: 
6AED defw minus_find_nfa
; [DASMZ80 ZONE] paren_abort_lfa: start 0x6AED end 0x6AEF type pointers
6AEF  paren_abort_cfa: 
6AEF defw 0x6306
; [DASMZ80 ZONE] paren_abort_cfa: start 0x6AEF end 0x6AF1 type pointers
6AF1  paren_abort_pfa: 
6AF1 defw abort_cfa
6AF3 defw semicolon_s_cfa
; [DASMZ80 ZONE] paren_abort_pfa: start 0x6AF1 end 0x6AF5 type pointers

6ABB  minus_find_nfa: 
6ABB defb 0x05+0x80,"-FIN","D"+0x80
; [DASMZ80 ZONE] minus_find_nfa: start 0x6ABB end 0x6AC1 type bytedata
6AC1  minus_find_lfa: 
6AC1 defw number_nfa
; [DASMZ80 ZONE] minus_find_lfa: start 0x6AC1 end 0x6AC3 type pointers
6AC3  minus_find_cfa: 
6AC3 defw 0x6306
; [DASMZ80 ZONE] minus_find_cfa: start 0x6AC3 end 0x6AC5 type pointers
6AC5  minus_find_pfa: 
6AC5 defw b_l_cfa
6AC7 defw UPPER-WORD_cfa
6AC9 defw here_cfa
6ACB defw context_cfa
6ACD defw fetch_cfa
6ACF defw fetch_cfa
6AD1 defw paren_find_cfa
6AD3 defw dup_cfa
6AD5 defw zero_equals_cfa
6AD7 defw zero_branch_cfa,0x000A; to 0x6AE3
6ADB defw drop_cfa
6ADD defw here_cfa
6ADF defw latest_cfa
6AE1 defw paren_find_cfa
6AE3 defw semicolon_s_cfa
; [DASMZ80 ZONE] minus_find_pfa: start 0x6AC5 end 0x6AE5 type pointers

6A62  number_nfa: 
6A62 defb 0x06+0x80,"NUMBE","R"+0x80
; [DASMZ80 ZONE] number_nfa: start 0x6A62 end 0x6A69 type bytedata
6A69  number_lfa: 
6A69 defw paren_number_nfa
; [DASMZ80 ZONE] number_lfa: start 0x6A69 end 0x6A6B type pointers
6A6B  number_cfa: 
6A6B defw 0x6306
; [DASMZ80 ZONE] number_cfa: start 0x6A6B end 0x6A6D type pointers
6A6D  number_pfa: 
6A6D defw zero_cfa
6A6F defw zero_cfa
6A71 defw rot_cfa
6A73 defw dup_cfa
6A75 defw one_plus_cfa
6A77 defw c_fetch_cfa
6A79 defw lit_cfa,0x002D
6A7D defw equals_cfa
6A7F defw dup_cfa
6A81 defw to_r_cfa
6A83 defw plus_cfa
6A85 defw lit_cfa,0xFFFF
6A89 defw dpl_cfa
6A8B defw store_cfa
6A8D defw paren_number_cfa
6A8F defw dup_cfa
6A91 defw c_fetch_cfa
6A93 defw b_l_cfa
6A95 defw minus_cfa
6A97 defw zero_branch_cfa,0x0016; to 0x6AAF
6A9B defw dup_cfa
6A9D defw c_fetch_cfa
6A9F defw lit_cfa,0x002E
6AA3 defw minus_cfa
6AA5 defw zero_cfa
6AA7 defw question_error_cfa
6AA9 defw zero_cfa
6AAB defw branch_cfa,0xFFDC; to 0x6A89
6AAF defw drop_cfa
6AB1 defw from_r_cfa
6AB3 defw zero_branch_cfa,0x0004; to 0x6AB9
6AB7 defw dminus_cfa
6AB9 defw semicolon_s_cfa
; [DASMZ80 ZONE] number_pfa: start 0x6A6D end 0x6ABB type pointers

6A15  paren_number_nfa: 
6A15 defb 0x08+0x80,"(NUMBER",")"+0x80
; [DASMZ80 ZONE] paren_number_nfa: start 0x6A15 end 0x6A1E type bytedata
6A1E  paren_number_lfa: 
6A1E defw word_nfa
; [DASMZ80 ZONE] paren_number_lfa: start 0x6A1E end 0x6A20 type pointers
6A20  paren_number_cfa: 
6A20 defw 0x6306
; [DASMZ80 ZONE] paren_number_cfa: start 0x6A20 end 0x6A22 type pointers
6A22  paren_number_pfa: 
6A22 defw one_plus_cfa
6A24 defw dup_cfa
6A26 defw to_r_cfa
6A28 defw c_fetch_cfa
6A2A defw base_cfa
6A2C defw fetch_cfa
6A2E defw digit_cfa
6A30 defw zero_branch_cfa,0x002C; to 0x6A5E
6A34 defw swap_cfa
6A36 defw base_cfa
6A38 defw fetch_cfa
6A3A defw u_star_cfa
6A3C defw drop_cfa
6A3E defw rot_cfa
6A40 defw base_cfa
6A42 defw fetch_cfa
6A44 defw u_star_cfa
6A46 defw d_plus_cfa
6A48 defw dpl_cfa
6A4A defw fetch_cfa
6A4C defw one_plus_cfa
6A4E defw zero_branch_cfa,0x0008; to 0x6A58
6A52 defw one_cfa
6A54 defw dpl_cfa
6A56 defw plus_store_cfa
6A58 defw from_r_cfa
6A5A defw branch_cfa,0xFFC6; to 0x6A22
6A5E defw from_r_cfa
6A60 defw semicolon_s_cfa
; [DASMZ80 ZONE] paren_number_pfa: start 0x6A22 end 0x6A62 type pointers

69C8  word_nfa: 
69C8 defb 0x04+0x80,"WOR","D"+0x80
; [DASMZ80 ZONE] word_nfa: start 0x69C8 end 0x69CD type bytedata
69CD  word_lfa: 
69CD defw pad_nfa
; [DASMZ80 ZONE] word_lfa: start 0x69CD end 0x69CF type pointers
69CF  word_cfa: 
69CF defw 0x6306
; [DASMZ80 ZONE] word_cfa: start 0x69CF end 0x69D1 type pointers
69D1  word_pfa: 
69D1 defw blk_cfa
69D3 defw fetch_cfa
69D5 defw zero_branch_cfa,0x000C; to 0x69E3
69D9 defw blk_cfa
69DB defw fetch_cfa
69DD defw block_cfa
69DF defw branch_cfa,0x0006; to 0x69E7
69E3 defw tib_cfa
69E5 defw fetch_cfa
69E7 defw in_cfa
69E9 defw fetch_cfa
69EB defw plus_cfa
69ED defw swap_cfa
69EF defw enclose_cfa
69F1 defw here_cfa
69F3 defw lit_cfa,0x0022
69F7 defw blanks_cfa
69F9 defw in_cfa
69FB defw plus_store_cfa
69FD defw over_cfa
69FF defw minus_cfa
6A01 defw to_r_cfa
6A03 defw r_cfa
6A05 defw here_cfa
6A07 defw c_store_cfa
6A09 defw plus_cfa
6A0B defw here_cfa
6A0D defw one_plus_cfa
6A0F defw from_r_cfa
6A11 defw cmove_cfa
6A13 defw semicolon_s_cfa
; [DASMZ80 ZONE] word_pfa: start 0x69D1 end 0x6A15 type pointers

69B6  pad_nfa: 
69B6 defb 0x03+0x80,"PA","D"+0x80
; [DASMZ80 ZONE] pad_nfa: start 0x69B6 end 0x69BA type bytedata
69BA  pad_lfa: 
69BA defw hold_nfa
; [DASMZ80 ZONE] pad_lfa: start 0x69BA end 0x69BC type pointers
69BC  pad_cfa: 
69BC defw 0x6306
; [DASMZ80 ZONE] pad_cfa: start 0x69BC end 0x69BE type pointers
69BE  pad_pfa: 
69BE defw here_cfa
69C0 defw lit_cfa,0x0044
69C4 defw plus_cfa
69C6 defw semicolon_s_cfa
; [DASMZ80 ZONE] pad_pfa: start 0x69BE end 0x69C8 type pointers

699D  hold_nfa: 
699D defb 0x04+0x80,"HOL","D"+0x80
; [DASMZ80 ZONE] hold_nfa: start 0x699D end 0x69A2 type bytedata
69A2  hold_lfa: 
69A2 defw blanks_nfa
; [DASMZ80 ZONE] hold_lfa: start 0x69A2 end 0x69A4 type pointers
69A4  hold_cfa: 
69A4 defw 0x6306
; [DASMZ80 ZONE] hold_cfa: start 0x69A4 end 0x69A6 type pointers
69A6  hold_pfa: 
69A6 defw lit_cfa,0xFFFF
69AA defw hld_cfa
69AC defw plus_store_cfa
69AE defw hld_cfa
69B0 defw fetch_cfa
69B2 defw c_store_cfa
69B4 defw semicolon_s_cfa
; [DASMZ80 ZONE] hold_pfa: start 0x69A6 end 0x69B6 type pointers

698C  blanks_nfa: 
698C defb 0x06+0x80,"BLANK","S"+0x80
; [DASMZ80 ZONE] blanks_nfa: start 0x698C end 0x6993 type bytedata
6993  blanks_lfa: 
6993 defw erase_nfa
; [DASMZ80 ZONE] blanks_lfa: start 0x6993 end 0x6995 type pointers
6995  blanks_cfa: 
6995 defw 0x6306
; [DASMZ80 ZONE] blanks_cfa: start 0x6995 end 0x6997 type pointers
6997  blanks_pfa: 
6997 defw b_l_cfa
6999 defw fill_cfa
699B defw semicolon_s_cfa
; [DASMZ80 ZONE] blanks_pfa: start 0x6997 end 0x699D type pointers

697C  erase_nfa: 
697C defb 0x05+0x80,"ERAS","E"+0x80
; [DASMZ80 ZONE] erase_nfa: start 0x697C end 0x6982 type bytedata
6982  erase_lfa: 
6982 defw fill_nfa
; [DASMZ80 ZONE] erase_lfa: start 0x6982 end 0x6984 type pointers
6984  erase_cfa: 
6984 defw 0x6306
; [DASMZ80 ZONE] erase_cfa: start 0x6984 end 0x6986 type pointers
6986  erase_pfa: 
6986 defw zero_cfa
6988 defw fill_cfa
698A defw semicolon_s_cfa
; [DASMZ80 ZONE] erase_pfa: start 0x6986 end 0x698C type pointers

695F  fill_nfa: 
695F defb 0x04+0x80,"FIL","L"+0x80
; [DASMZ80 ZONE] fill_nfa: start 0x695F end 0x6964 type bytedata
6964  fill_lfa: 
6964 defw _nfa
; [DASMZ80 ZONE] fill_lfa: start 0x6964 end 0x6966 type pointers
6966  fill_cfa: 
6966 defw fill_pfa
; [DASMZ80 ZONE] fill_cfa: start 0x6966 end 0x6968 type pointers
6968  fill_pfa: 
; [DASMZ80 ZONE] fill_cfa: start 0x6968 end 0x697C type code

6923  _nfa: 
6923 defb 0x01+0x80+0x40,""+0x80
; [DASMZ80 ZONE] _nfa: start 0x6923 end 0x6925 type bytedata
6925  _lfa: 
6925 defw query_nfa
; [DASMZ80 ZONE] _lfa: start 0x6925 end 0x6927 type pointers
6927  _cfa: 
6927 defw 0x6306
; [DASMZ80 ZONE] _cfa: start 0x6927 end 0x6929 type pointers
6929  _pfa: 
6929 defw blk_cfa
692B defw fetch_cfa
692D defw zero_branch_cfa,0x002A; to 0x6959
6931 defw one_cfa
6933 defw blk_cfa
6935 defw plus_store_cfa
6937 defw zero_cfa
6939 defw in_cfa
693B defw store_cfa
693D defw blk_cfa
693F defw fetch_cfa
6941 defw b_slash_scr_cfa
6943 defw one_cfa
6945 defw minus_cfa
6947 defw and_cfa
6949 defw zero_equals_cfa
694B defw zero_branch_cfa,0x0008; to 0x6955
694F defw question_exec_cfa
6951 defw from_r_cfa
6953 defw drop_cfa
6955 defw branch_cfa,0x0006; to 0x695D
6959 defw from_r_cfa
695B defw drop_cfa
695D defw semicolon_s_cfa
; [DASMZ80 ZONE] _pfa: start 0x6929 end 0x695F type pointers

6907  query_nfa: 
6907 defb 0x05+0x80,"QUER","Y"+0x80
; [DASMZ80 ZONE] query_nfa: start 0x6907 end 0x690D type bytedata
690D  query_lfa: 
690D defw expect_nfa
; [DASMZ80 ZONE] query_lfa: start 0x690D end 0x690F type pointers
690F  query_cfa: 
690F defw 0x6306
; [DASMZ80 ZONE] query_cfa: start 0x690F end 0x6911 type pointers
6911  query_pfa: 
6911 defw tib_cfa
6913 defw fetch_cfa
6915 defw lit_cfa,0x0050
6919 defw expect_cfa
691B defw zero_cfa
691D defw in_cfa
691F defw store_cfa
6921 defw semicolon_s_cfa
; [DASMZ80 ZONE] query_pfa: start 0x6911 end 0x6923 type pointers

688A  expect_nfa: 
688A defb 0x06+0x80,"EXPEC","T"+0x80
; [DASMZ80 ZONE] expect_nfa: start 0x688A end 0x6891 type bytedata
6891  expect_lfa: 
6891 defw dot_quote_nfa
; [DASMZ80 ZONE] expect_lfa: start 0x6891 end 0x6893 type pointers
6893  expect_cfa: 
6893 defw 0x6306
; [DASMZ80 ZONE] expect_cfa: start 0x6893 end 0x6895 type pointers
6895  expect_pfa: 
6895 defw over_cfa
6897 defw plus_cfa
6899 defw over_cfa
689B defw paren_do_cfa
689D defw key_cfa
689F defw dup_cfa
68A1 defw lit_cfa,0x000E
68A5 defw plus_origin_cfa
68A7 defw fetch_cfa
68A9 defw equals_cfa
68AB defw zero_branch_cfa,0x002A; to 0x68D7
68AF defw drop_cfa
68B1 defw dup_cfa
68B3 defw i_cfa
68B5 defw equals_cfa
68B7 defw dup_cfa
68B9 defw from_r_cfa
68BB defw two_cfa
68BD defw minus_cfa
68BF defw plus_cfa
68C1 defw to_r_cfa
68C3 defw zero_branch_cfa,0x000A; to 0x68CF
68C7 defw noop_cfa
68C9 defw noop_cfa
68CB defw branch_cfa,0x0032; to 0x68FF
68CF defw lit_cfa,0x0008
68D3 defw branch_cfa,0x0028; to 0x68FD
68D7 defw dup_cfa
68D9 defw lit_cfa,0x000D
68DD defw equals_cfa
68DF defw zero_branch_cfa,0x000E; to 0x68EF
68E3 defw leave_cfa
68E5 defw drop_cfa
68E7 defw b_l_cfa
68E9 defw zero_cfa
68EB defw branch_cfa,0x0004; to 0x68F1
68EF defw dup_cfa
68F1 defw i_cfa
68F3 defw c_store_cfa
68F5 defw zero_cfa
68F7 defw i_cfa
68F9 defw one_plus_cfa
68FB defw store_cfa
68FD defw emit_cfa
68FF defw paren_loop_cfa,0xFF9C; to 0x689D
6903 defw drop_cfa
6905 defw semicolon_s_cfa
; [DASMZ80 ZONE] expect_pfa: start 0x6895 end 0x6907 type pointers

685B  dot_quote_nfa: 
685B defb 0x02+0x80+0x40,".","""+0x80
; [DASMZ80 ZONE] dot_quote_nfa: start 0x685B end 0x685E type bytedata
685E  dot_quote_lfa: 
685E defw paren_dot_quote_nfa
; [DASMZ80 ZONE] dot_quote_lfa: start 0x685E end 0x6860 type pointers
6860  dot_quote_cfa: 
6860 defw 0x6306
; [DASMZ80 ZONE] dot_quote_cfa: start 0x6860 end 0x6862 type pointers
6862  dot_quote_pfa: 
6862 defw lit_cfa,0x0022
6866 defw state_cfa
6868 defw fetch_cfa
686A defw zero_branch_cfa,0x0014; to 0x6880
686E defw compile_cfa,(.")_cfa
6872 defw word_cfa
6874 defw here_cfa
6876 defw c_fetch_cfa
6878 defw one_plus_cfa
687A defw allot_cfa
687C defw branch_cfa,0x000A; to 0x6888
6880 defw word_cfa
6882 defw here_cfa
6884 defw count_cfa
6886 defw type_cfa
6888 defw semicolon_s_cfa
; [DASMZ80 ZONE] dot_quote_pfa: start 0x6862 end 0x688A type pointers

6840  paren_dot_quote_nfa: 
6840 defb 0x04+0x80,"(."",")"+0x80
; [DASMZ80 ZONE] paren_dot_quote_nfa: start 0x6840 end 0x6845 type bytedata
6845  paren_dot_quote_lfa: 
6845 defw minus_trailing_nfa
; [DASMZ80 ZONE] paren_dot_quote_lfa: start 0x6845 end 0x6847 type pointers
6847  paren_dot_quote_cfa: 
6847 defw 0x6306
; [DASMZ80 ZONE] paren_dot_quote_cfa: start 0x6847 end 0x6849 type pointers
6849  paren_dot_quote_pfa: 
6849 defw r_cfa
684B defw count_cfa
684D defw dup_cfa
684F defw one_plus_cfa
6851 defw from_r_cfa
6853 defw plus_cfa
6855 defw to_r_cfa
6857 defw type_cfa
6859 defw semicolon_s_cfa
; [DASMZ80 ZONE] paren_dot_quote_pfa: start 0x6849 end 0x685B type pointers

6808  minus_trailing_nfa: 
6808 defb 0x09+0x80,"-TRAILIN","G"+0x80
; [DASMZ80 ZONE] minus_trailing_nfa: start 0x6808 end 0x6812 type bytedata
6812  minus_trailing_lfa: 
6812 defw type_nfa
; [DASMZ80 ZONE] minus_trailing_lfa: start 0x6812 end 0x6814 type pointers
6814  minus_trailing_cfa: 
6814 defw 0x6306
; [DASMZ80 ZONE] minus_trailing_cfa: start 0x6814 end 0x6816 type pointers
6816  minus_trailing_pfa: 
6816 defw dup_cfa
6818 defw zero_cfa
681A defw paren_do_cfa
681C defw over_cfa
681E defw over_cfa
6820 defw plus_cfa
6822 defw one_cfa
6824 defw minus_cfa
6826 defw c_fetch_cfa
6828 defw b_l_cfa
682A defw minus_cfa
682C defw zero_branch_cfa,0x0008; to 0x6836
6830 defw leave_cfa
6832 defw branch_cfa,0x0006; to 0x683A
6836 defw one_cfa
6838 defw minus_cfa
683A defw paren_loop_cfa,0xFFE0; to 0x681C
683E defw semicolon_s_cfa
; [DASMZ80 ZONE] minus_trailing_pfa: start 0x6816 end 0x6840 type pointers

67DF  type_nfa: 
67DF defb 0x04+0x80,"TYP","E"+0x80
; [DASMZ80 ZONE] type_nfa: start 0x67DF end 0x67E4 type bytedata
67E4  type_lfa: 
67E4 defw count_nfa
; [DASMZ80 ZONE] type_lfa: start 0x67E4 end 0x67E6 type pointers
67E6  type_cfa: 
67E6 defw 0x6306
; [DASMZ80 ZONE] type_cfa: start 0x67E6 end 0x67E8 type pointers
67E8  type_pfa: 
67E8 defw minus_dup_cfa
67EA defw zero_branch_cfa,0x0018; to 0x6804
67EE defw over_cfa
67F0 defw plus_cfa
67F2 defw swap_cfa
67F4 defw paren_do_cfa
67F6 defw i_cfa
67F8 defw c_fetch_cfa
67FA defw emit_cfa
67FC defw paren_loop_cfa,0xFFF8; to 0x67F6
6800 defw branch_cfa,0x0004; to 0x6806
6804 defw drop_cfa
6806 defw semicolon_s_cfa
; [DASMZ80 ZONE] type_pfa: start 0x67E8 end 0x6808 type pointers

67CB  count_nfa: 
67CB defb 0x05+0x80,"COUN","T"+0x80
; [DASMZ80 ZONE] count_nfa: start 0x67CB end 0x67D1 type bytedata
67D1  count_lfa: 
67D1 defw does_nfa
; [DASMZ80 ZONE] count_lfa: start 0x67D1 end 0x67D3 type pointers
67D3  count_cfa: 
67D3 defw 0x6306
; [DASMZ80 ZONE] count_cfa: start 0x67D3 end 0x67D5 type pointers
67D5  count_pfa: 
67D5 defw dup_cfa
67D7 defw one_plus_cfa
67D9 defw swap_cfa
67DB defw c_fetch_cfa
67DD defw semicolon_s_cfa
; [DASMZ80 ZONE] count_pfa: start 0x67D5 end 0x67DF type pointers

67A4  does_nfa: 
67A4 defb 0x05+0x80,"DOES",">"+0x80
; [DASMZ80 ZONE] does_nfa: start 0x67A4 end 0x67AA type bytedata
67AA  does_lfa: 
67AA defw builds_nfa
; [DASMZ80 ZONE] does_lfa: start 0x67AA end 0x67AC type pointers
67AC  does_cfa: 
67AC defw 0x6306
; [DASMZ80 ZONE] does_cfa: start 0x67AC end 0x67AE type pointers
67AE  does_pfa: 
67AE defw from_r_cfa
67B0 defw latest_cfa
67B2 defw pfa_cfa
67B4 defw store_cfa
67B6 defw paren_semicolon_code_cfa
; [DASMZ80 ZONE] does_pfa: start 0x67AE end 0x67B8 type pointers

6792  builds_nfa: 
6792 defb 0x07+0x80,"<BUILD","S"+0x80
; [DASMZ80 ZONE] builds_nfa: start 0x6792 end 0x679A type bytedata
679A  builds_lfa: 
679A defw semicolon_code_nfa
; [DASMZ80 ZONE] builds_lfa: start 0x679A end 0x679C type pointers
679C  builds_cfa: 
679C defw 0x6306
; [DASMZ80 ZONE] builds_cfa: start 0x679C end 0x679E type pointers
679E  builds_pfa: 
679E defw zero_cfa
67A0 defw constant_cfa
67A2 defw semicolon_s_cfa
; [DASMZ80 ZONE] builds_pfa: start 0x679E end 0x67A4 type pointers

677C  semicolon_code_nfa: 
677C defb 0x05+0x80+0x40,";COD","E"+0x80
; [DASMZ80 ZONE] semicolon_code_nfa: start 0x677C end 0x6782 type bytedata
6782  semicolon_code_lfa: 
6782 defw paren_semicolon_code_nfa
; [DASMZ80 ZONE] semicolon_code_lfa: start 0x6782 end 0x6784 type pointers
6784  semicolon_code_cfa: 
6784 defw 0x6306
; [DASMZ80 ZONE] semicolon_code_cfa: start 0x6784 end 0x6786 type pointers
6786  semicolon_code_pfa: 
6786 defw question_csp_cfa
6788 defw compile_cfa,(;CODE)_cfa
678C defw left_bracket_cfa
678E defw smudge_cfa
6790 defw semicolon_s_cfa
; [DASMZ80 ZONE] semicolon_code_pfa: start 0x6786 end 0x6792 type pointers

6764  paren_semicolon_code_nfa: 
6764 defb 0x07+0x80,"(;CODE",")"+0x80
; [DASMZ80 ZONE] paren_semicolon_code_nfa: start 0x6764 end 0x676C type bytedata
676C  paren_semicolon_code_lfa: 
676C defw decimal_nfa
; [DASMZ80 ZONE] paren_semicolon_code_lfa: start 0x676C end 0x676E type pointers
676E  paren_semicolon_code_cfa: 
676E defw 0x6306
; [DASMZ80 ZONE] paren_semicolon_code_cfa: start 0x676E end 0x6770 type pointers
6770  paren_semicolon_code_pfa: 
6770 defw from_r_cfa
6772 defw latest_cfa
6774 defw pfa_cfa
6776 defw cfa_cfa
6778 defw store_cfa
677A defw semicolon_s_cfa
; [DASMZ80 ZONE] paren_semicolon_code_pfa: start 0x6770 end 0x677C type pointers

674E  decimal_nfa: 
674E defb 0x07+0x80,"DECIMA","L"+0x80
; [DASMZ80 ZONE] decimal_nfa: start 0x674E end 0x6756 type bytedata
6756  decimal_lfa: 
6756 defw hex_nfa
; [DASMZ80 ZONE] decimal_lfa: start 0x6756 end 0x6758 type pointers
6758  decimal_cfa: 
6758 defw 0x6306
; [DASMZ80 ZONE] decimal_cfa: start 0x6758 end 0x675A type pointers
675A  decimal_pfa: 
675A defw lit_cfa,0x000A
675E defw base_cfa
6760 defw store_cfa
6762 defw semicolon_s_cfa
; [DASMZ80 ZONE] decimal_pfa: start 0x675A end 0x6764 type pointers

673C  hex_nfa: 
673C defb 0x03+0x80,"HE","X"+0x80
; [DASMZ80 ZONE] hex_nfa: start 0x673C end 0x6740 type bytedata
6740  hex_lfa: 
6740 defw smudge_nfa
; [DASMZ80 ZONE] hex_lfa: start 0x6740 end 0x6742 type pointers
6742  hex_cfa: 
6742 defw 0x6306
; [DASMZ80 ZONE] hex_cfa: start 0x6742 end 0x6744 type pointers
6744  hex_pfa: 
6744 defw lit_cfa,0x0010
6748 defw base_cfa
674A defw store_cfa
674C defw semicolon_s_cfa
; [DASMZ80 ZONE] hex_pfa: start 0x6744 end 0x674E type pointers

6727  smudge_nfa: 
6727 defb 0x06+0x80,"SMUDG","E"+0x80
; [DASMZ80 ZONE] smudge_nfa: start 0x6727 end 0x672E type bytedata
672E  smudge_lfa: 
672E defw right_bracket_nfa
; [DASMZ80 ZONE] smudge_lfa: start 0x672E end 0x6730 type pointers
6730  smudge_cfa: 
6730 defw 0x6306
; [DASMZ80 ZONE] smudge_cfa: start 0x6730 end 0x6732 type pointers
6732  smudge_pfa: 
6732 defw latest_cfa
6734 defw lit_cfa,0x0020
6738 defw toggle_cfa
673A defw semicolon_s_cfa
; [DASMZ80 ZONE] smudge_pfa: start 0x6732 end 0x673C type pointers

6717  right_bracket_nfa: 
6717 defb 0x01+0x80,"]"+0x80
; [DASMZ80 ZONE] right_bracket_nfa: start 0x6717 end 0x6719 type bytedata
6719  right_bracket_lfa: 
6719 defw left_bracket_nfa
; [DASMZ80 ZONE] right_bracket_lfa: start 0x6719 end 0x671B type pointers
671B  right_bracket_cfa: 
671B defw 0x6306
; [DASMZ80 ZONE] right_bracket_cfa: start 0x671B end 0x671D type pointers
671D  right_bracket_pfa: 
671D defw lit_cfa,0x00C0
6721 defw state_cfa
6723 defw store_cfa
6725 defw semicolon_s_cfa
; [DASMZ80 ZONE] right_bracket_pfa: start 0x671D end 0x6727 type pointers

6709  left_bracket_nfa: 
6709 defb 0x01+0x80+0x40,"["+0x80
; [DASMZ80 ZONE] left_bracket_nfa: start 0x6709 end 0x670B type bytedata
670B  left_bracket_lfa: 
670B defw compile_nfa
; [DASMZ80 ZONE] left_bracket_lfa: start 0x670B end 0x670D type pointers
670D  left_bracket_cfa: 
670D defw 0x6306
; [DASMZ80 ZONE] left_bracket_cfa: start 0x670D end 0x670F type pointers
670F  left_bracket_pfa: 
670F defw zero_cfa
6711 defw state_cfa
6713 defw store_cfa
6715 defw semicolon_s_cfa
; [DASMZ80 ZONE] left_bracket_pfa: start 0x670F end 0x6717 type pointers

66ED  compile_nfa: 
66ED defb 0x07+0x80,"COMPIL","E"+0x80
; [DASMZ80 ZONE] compile_nfa: start 0x66ED end 0x66F5 type bytedata
66F5  compile_lfa: 
66F5 defw question_loading_nfa
; [DASMZ80 ZONE] compile_lfa: start 0x66F5 end 0x66F7 type pointers
66F7  compile_cfa: 
66F7 defw 0x6306
; [DASMZ80 ZONE] compile_cfa: start 0x66F7 end 0x66F9 type pointers
66F9  compile_pfa: 
66F9 defw question_comp_cfa
66FB defw from_r_cfa
66FD defw dup_cfa
66FF defw two_plus_cfa
6701 defw to_r_cfa
6703 defw fetch_cfa
6705 defw comma_cfa
6707 defw semicolon_s_cfa
; [DASMZ80 ZONE] compile_pfa: start 0x66F9 end 0x6709 type pointers

66D2  question_loading_nfa: 
66D2 defb 0x08+0x80,"?LOADIN","G"+0x80
; [DASMZ80 ZONE] question_loading_nfa: start 0x66D2 end 0x66DB type bytedata
66DB  question_loading_lfa: 
66DB defw question_csp_nfa
; [DASMZ80 ZONE] question_loading_lfa: start 0x66DB end 0x66DD type pointers
66DD  question_loading_cfa: 
66DD defw 0x6306
; [DASMZ80 ZONE] question_loading_cfa: start 0x66DD end 0x66DF type pointers
66DF  question_loading_pfa: 
66DF defw blk_cfa
66E1 defw fetch_cfa
66E3 defw zero_equals_cfa
66E5 defw lit_cfa,0x0016
66E9 defw question_error_cfa
66EB defw semicolon_s_cfa
; [DASMZ80 ZONE] question_loading_pfa: start 0x66DF end 0x66ED type pointers

66B9  question_csp_nfa: 
66B9 defb 0x04+0x80,"?CS","P"+0x80
; [DASMZ80 ZONE] question_csp_nfa: start 0x66B9 end 0x66BE type bytedata
66BE  question_csp_lfa: 
66BE defw question_pairs_nfa
; [DASMZ80 ZONE] question_csp_lfa: start 0x66BE end 0x66C0 type pointers
66C0  question_csp_cfa: 
66C0 defw 0x6306
; [DASMZ80 ZONE] question_csp_cfa: start 0x66C0 end 0x66C2 type pointers
66C2  question_csp_pfa: 
66C2 defw sp_fetch_cfa
66C4 defw csp_cfa
66C6 defw fetch_cfa
66C8 defw minus_cfa
66CA defw lit_cfa,0x0014
66CE defw question_error_cfa
66D0 defw semicolon_s_cfa
; [DASMZ80 ZONE] question_csp_pfa: start 0x66C2 end 0x66D2 type pointers

66A4  question_pairs_nfa: 
66A4 defb 0x06+0x80,"?PAIR","S"+0x80
; [DASMZ80 ZONE] question_pairs_nfa: start 0x66A4 end 0x66AB type bytedata
66AB  question_pairs_lfa: 
66AB defw question_exec_nfa
; [DASMZ80 ZONE] question_pairs_lfa: start 0x66AB end 0x66AD type pointers
66AD  question_pairs_cfa: 
66AD defw 0x6306
; [DASMZ80 ZONE] question_pairs_cfa: start 0x66AD end 0x66AF type pointers
66AF  question_pairs_pfa: 
66AF defw minus_cfa
66B1 defw lit_cfa,0x0013
66B5 defw question_error_cfa
66B7 defw semicolon_s_cfa
; [DASMZ80 ZONE] question_pairs_pfa: start 0x66AF end 0x66B9 type pointers

668E  question_exec_nfa: 
668E defb 0x05+0x80,"?EXE","C"+0x80
; [DASMZ80 ZONE] question_exec_nfa: start 0x668E end 0x6694 type bytedata
6694  question_exec_lfa: 
6694 defw question_comp_nfa
; [DASMZ80 ZONE] question_exec_lfa: start 0x6694 end 0x6696 type pointers
6696  question_exec_cfa: 
6696 defw 0x6306
; [DASMZ80 ZONE] question_exec_cfa: start 0x6696 end 0x6698 type pointers
6698  question_exec_pfa: 
6698 defw state_cfa
669A defw fetch_cfa
669C defw lit_cfa,0x0012
66A0 defw question_error_cfa
66A2 defw semicolon_s_cfa
; [DASMZ80 ZONE] question_exec_pfa: start 0x6698 end 0x66A4 type pointers

6676  question_comp_nfa: 
6676 defb 0x05+0x80,"?COM","P"+0x80
; [DASMZ80 ZONE] question_comp_nfa: start 0x6676 end 0x667C type bytedata
667C  question_comp_lfa: 
667C defw question_error_nfa
; [DASMZ80 ZONE] question_comp_lfa: start 0x667C end 0x667E type pointers
667E  question_comp_cfa: 
667E defw 0x6306
; [DASMZ80 ZONE] question_comp_cfa: start 0x667E end 0x6680 type pointers
6680  question_comp_pfa: 
6680 defw state_cfa
6682 defw fetch_cfa
6684 defw zero_equals_cfa
6686 defw lit_cfa,0x0011
668A defw question_error_cfa
668C defw semicolon_s_cfa
; [DASMZ80 ZONE] question_comp_pfa: start 0x6680 end 0x668E type pointers

665B  question_error_nfa: 
665B defb 0x06+0x80,"?ERRO","R"+0x80
; [DASMZ80 ZONE] question_error_nfa: start 0x665B end 0x6662 type bytedata
6662  question_error_lfa: 
6662 defw store_csp_nfa
; [DASMZ80 ZONE] question_error_lfa: start 0x6662 end 0x6664 type pointers
6664  question_error_cfa: 
6664 defw 0x6306
; [DASMZ80 ZONE] question_error_cfa: start 0x6664 end 0x6666 type pointers
6666  question_error_pfa: 
6666 defw swap_cfa
6668 defw zero_branch_cfa,0x0008; to 0x6672
666C defw error_cfa
666E defw branch_cfa,0x0004; to 0x6674
6672 defw drop_cfa
6674 defw semicolon_s_cfa
; [DASMZ80 ZONE] question_error_pfa: start 0x6666 end 0x6676 type pointers

664A  store_csp_nfa: 
664A defb 0x04+0x80,"!CS","P"+0x80
; [DASMZ80 ZONE] store_csp_nfa: start 0x664A end 0x664F type bytedata
664F  store_csp_lfa: 
664F defw pfa_nfa
; [DASMZ80 ZONE] store_csp_lfa: start 0x664F end 0x6651 type pointers
6651  store_csp_cfa: 
6651 defw 0x6306
; [DASMZ80 ZONE] store_csp_cfa: start 0x6651 end 0x6653 type pointers
6653  store_csp_pfa: 
6653 defw sp_fetch_cfa
6655 defw csp_cfa
6657 defw store_cfa
6659 defw semicolon_s_cfa
; [DASMZ80 ZONE] store_csp_pfa: start 0x6653 end 0x665B type pointers

6636  pfa_nfa: 
6636 defb 0x03+0x80,"PF","A"+0x80
; [DASMZ80 ZONE] pfa_nfa: start 0x6636 end 0x663A type bytedata
663A  pfa_lfa: 
663A defw nfa_nfa
; [DASMZ80 ZONE] pfa_lfa: start 0x663A end 0x663C type pointers
663C  pfa_cfa: 
663C defw 0x6306
; [DASMZ80 ZONE] pfa_cfa: start 0x663C end 0x663E type pointers
663E  pfa_pfa: 
663E defw one_cfa
6640 defw traverse_cfa
6642 defw lit_cfa,0x0005
6646 defw plus_cfa
6648 defw semicolon_s_cfa
; [DASMZ80 ZONE] pfa_pfa: start 0x663E end 0x664A type pointers

6620  nfa_nfa: 
6620 defb 0x03+0x80,"NF","A"+0x80
; [DASMZ80 ZONE] nfa_nfa: start 0x6620 end 0x6624 type bytedata
6624  nfa_lfa: 
6624 defw cfa_nfa
; [DASMZ80 ZONE] nfa_lfa: start 0x6624 end 0x6626 type pointers
6626  nfa_cfa: 
6626 defw 0x6306
; [DASMZ80 ZONE] nfa_cfa: start 0x6626 end 0x6628 type pointers
6628  nfa_pfa: 
6628 defw lit_cfa,0x0005
662C defw minus_cfa
662E defw lit_cfa,0xFFFF
6632 defw traverse_cfa
6634 defw semicolon_s_cfa
; [DASMZ80 ZONE] nfa_pfa: start 0x6628 end 0x6636 type pointers

6612  cfa_nfa: 
6612 defb 0x03+0x80,"CF","A"+0x80
; [DASMZ80 ZONE] cfa_nfa: start 0x6612 end 0x6616 type bytedata
6616  cfa_lfa: 
6616 defw lfa_nfa
; [DASMZ80 ZONE] cfa_lfa: start 0x6616 end 0x6618 type pointers
6618  cfa_cfa: 
6618 defw 0x8405
; [DASMZ80 ZONE] cfa_cfa: start 0x6618 end 0x661A type pointers
661A  cfa_pfa: ; Word type not implemented.

6602  lfa_nfa: 
6602 defb 0x03+0x80,"LF","A"+0x80
; [DASMZ80 ZONE] lfa_nfa: start 0x6602 end 0x6606 type bytedata
6606  lfa_lfa: 
6606 defw latest_nfa
; [DASMZ80 ZONE] lfa_lfa: start 0x6606 end 0x6608 type pointers
6608  lfa_cfa: 
6608 defw 0x6306
; [DASMZ80 ZONE] lfa_cfa: start 0x6608 end 0x660A type pointers
660A  lfa_pfa: 
660A defw lit_cfa,0x0004
660E defw minus_cfa
6610 defw semicolon_s_cfa
; [DASMZ80 ZONE] lfa_pfa: start 0x660A end 0x6612 type pointers

65EF  latest_nfa: 
65EF defb 0x06+0x80,"LATES","T"+0x80
; [DASMZ80 ZONE] latest_nfa: start 0x65EF end 0x65F6 type bytedata
65F6  latest_lfa: 
65F6 defw traverse_nfa
; [DASMZ80 ZONE] latest_lfa: start 0x65F6 end 0x65F8 type pointers
65F8  latest_cfa: 
65F8 defw 0x6306
; [DASMZ80 ZONE] latest_cfa: start 0x65F8 end 0x65FA type pointers
65FA  latest_pfa: 
65FA defw current_cfa
65FC defw fetch_cfa
65FE defw fetch_cfa
6600 defw semicolon_s_cfa
; [DASMZ80 ZONE] latest_pfa: start 0x65FA end 0x6602 type pointers

65C8  traverse_nfa: 
65C8 defb 0x08+0x80,"TRAVERS","E"+0x80
; [DASMZ80 ZONE] traverse_nfa: start 0x65C8 end 0x65D1 type bytedata
65D1  traverse_lfa: 
65D1 defw minus_dup_nfa
; [DASMZ80 ZONE] traverse_lfa: start 0x65D1 end 0x65D3 type pointers
65D3  traverse_cfa: 
65D3 defw 0x6306
; [DASMZ80 ZONE] traverse_cfa: start 0x65D3 end 0x65D5 type pointers
65D5  traverse_pfa: 
65D5 defw swap_cfa
65D7 defw over_cfa
65D9 defw plus_cfa
65DB defw lit_cfa,0x007F
65DF defw over_cfa
65E1 defw c_fetch_cfa
65E3 defw less_than_cfa
65E5 defw zero_branch_cfa,0xFFF0; to 0x65D7
65E9 defw swap_cfa
65EB defw drop_cfa
65ED defw semicolon_s_cfa
; [DASMZ80 ZONE] traverse_pfa: start 0x65D5 end 0x65EF type pointers

65B5  minus_dup_nfa: 
65B5 defb 0x04+0x80,"-DU","P"+0x80
; [DASMZ80 ZONE] minus_dup_nfa: start 0x65B5 end 0x65BA type bytedata
65BA  minus_dup_lfa: 
65BA defw space_nfa
; [DASMZ80 ZONE] minus_dup_lfa: start 0x65BA end 0x65BC type pointers
65BC  minus_dup_cfa: 
65BC defw 0x6306
; [DASMZ80 ZONE] minus_dup_cfa: start 0x65BC end 0x65BE type pointers
65BE  minus_dup_pfa: 
65BE defw dup_cfa
65C0 defw zero_branch_cfa,0x0004; to 0x65C6
65C4 defw dup_cfa
65C6 defw semicolon_s_cfa
; [DASMZ80 ZONE] minus_dup_pfa: start 0x65BE end 0x65C8 type pointers

65A5  space_nfa: 
65A5 defb 0x05+0x80,"SPAC","E"+0x80
; [DASMZ80 ZONE] space_nfa: start 0x65A5 end 0x65AB type bytedata
65AB  space_lfa: 
65AB defw rot_nfa
; [DASMZ80 ZONE] space_lfa: start 0x65AB end 0x65AD type pointers
65AD  space_cfa: 
65AD defw 0x6306
; [DASMZ80 ZONE] space_cfa: start 0x65AD end 0x65AF type pointers
65AF  space_pfa: 
65AF defw b_l_cfa
65B1 defw emit_cfa
65B3 defw semicolon_s_cfa
; [DASMZ80 ZONE] space_pfa: start 0x65AF end 0x65B5 type pointers

6597  rot_nfa: 
6597 defb 0x03+0x80,"RO","T"+0x80
; [DASMZ80 ZONE] rot_nfa: start 0x6597 end 0x659B type bytedata
659B  rot_lfa: 
659B defw greater_than_nfa
; [DASMZ80 ZONE] rot_lfa: start 0x659B end 0x659D type pointers
659D  rot_cfa: 
659D defw rot_pfa
; [DASMZ80 ZONE] rot_cfa: start 0x659D end 0x659F type pointers
659F  rot_pfa: 
; [DASMZ80 ZONE] rot_cfa: start 0x659F end 0x65A5 type code

658B  greater_than_nfa: 
658B defb 0x01+0x80,">"+0x80
; [DASMZ80 ZONE] greater_than_nfa: start 0x658B end 0x658D type bytedata
658D  greater_than_lfa: 
658D defw u_less_than_nfa
; [DASMZ80 ZONE] greater_than_lfa: start 0x658D end 0x658F type pointers
658F  greater_than_cfa: 
658F defw 0x6306
; [DASMZ80 ZONE] greater_than_cfa: start 0x658F end 0x6591 type pointers
6591  greater_than_pfa: 
6591 defw swap_cfa
6593 defw less_than_cfa
6595 defw semicolon_s_cfa
; [DASMZ80 ZONE] greater_than_pfa: start 0x6591 end 0x6597 type pointers

656A  u_less_than_nfa: 
656A defb 0x02+0x80,"U","<"+0x80
; [DASMZ80 ZONE] u_less_than_nfa: start 0x656A end 0x656D type bytedata
656D  u_less_than_lfa: 
656D defw less_than_nfa
; [DASMZ80 ZONE] u_less_than_lfa: start 0x656D end 0x656F type pointers
656F  u_less_than_cfa: 
656F defw 0x6306
; [DASMZ80 ZONE] u_less_than_cfa: start 0x656F end 0x6571 type pointers
6571  u_less_than_pfa: 
6571 defw two_dup_cfa
6573 defw xor_cfa
6575 defw zero_less_than_cfa
6577 defw zero_branch_cfa,0x000C; to 0x6585
657B defw drop_cfa
657D defw zero_less_than_cfa
657F defw zero_equals_cfa
6581 defw branch_cfa,0x0006; to 0x6589
6585 defw minus_cfa
6587 defw zero_less_than_cfa
6589 defw semicolon_s_cfa
; [DASMZ80 ZONE] u_less_than_pfa: start 0x6571 end 0x658B type pointers

6549  less_than_nfa: 
6549 defb 0x01+0x80,"<"+0x80
; [DASMZ80 ZONE] less_than_nfa: start 0x6549 end 0x654B type bytedata
654B  less_than_lfa: 
654B defw equals_nfa
; [DASMZ80 ZONE] less_than_lfa: start 0x654B end 0x654D type pointers
654D  less_than_cfa: 
654D defw less_than_pfa
; [DASMZ80 ZONE] less_than_cfa: start 0x654D end 0x654F type pointers
654F  less_than_pfa: 
; [DASMZ80 ZONE] less_than_cfa: start 0x654F end 0x656A type code

653D  equals_nfa: 
653D defb 0x01+0x80,"="+0x80
; [DASMZ80 ZONE] equals_nfa: start 0x653D end 0x653F type bytedata
653F  equals_lfa: 
653F defw minus_nfa
; [DASMZ80 ZONE] equals_lfa: start 0x653F end 0x6541 type pointers
6541  equals_cfa: 
6541 defw 0x6306
; [DASMZ80 ZONE] equals_cfa: start 0x6541 end 0x6543 type pointers
6543  equals_pfa: 
6543 defw minus_cfa
6545 defw zero_equals_cfa
6547 defw semicolon_s_cfa
; [DASMZ80 ZONE] equals_pfa: start 0x6543 end 0x6549 type pointers

652F  minus_nfa: 
652F defb 0x01+0x80,"-"+0x80
; [DASMZ80 ZONE] minus_nfa: start 0x652F end 0x6531 type bytedata
6531  minus_lfa: 
6531 defw c_comma_nfa
; [DASMZ80 ZONE] minus_lfa: start 0x6531 end 0x6533 type pointers
6533  minus_cfa: 
6533 defw minus_pfa
; [DASMZ80 ZONE] minus_cfa: start 0x6533 end 0x6535 type pointers
6535  minus_pfa: 
; [DASMZ80 ZONE] minus_cfa: start 0x6535 end 0x653D type code

651E  c_comma_nfa: 
651E defb 0x02+0x80,"C",","+0x80
; [DASMZ80 ZONE] c_comma_nfa: start 0x651E end 0x6521 type bytedata
6521  c_comma_lfa: 
6521 defw comma_nfa
; [DASMZ80 ZONE] c_comma_lfa: start 0x6521 end 0x6523 type pointers
6523  c_comma_cfa: 
6523 defw 0x6306
; [DASMZ80 ZONE] c_comma_cfa: start 0x6523 end 0x6525 type pointers
6525  c_comma_pfa: 
6525 defw here_cfa
6527 defw c_store_cfa
6529 defw one_cfa
652B defw allot_cfa
652D defw semicolon_s_cfa
; [DASMZ80 ZONE] c_comma_pfa: start 0x6525 end 0x652F type pointers

650E  comma_nfa: 
650E defb 0x01+0x80,","+0x80
; [DASMZ80 ZONE] comma_nfa: start 0x650E end 0x6510 type bytedata
6510  comma_lfa: 
6510 defw allot_nfa
; [DASMZ80 ZONE] comma_lfa: start 0x6510 end 0x6512 type pointers
6512  comma_cfa: 
6512 defw 0x6306
; [DASMZ80 ZONE] comma_cfa: start 0x6512 end 0x6514 type pointers
6514  comma_pfa: 
6514 defw here_cfa
6516 defw store_cfa
6518 defw two_cfa
651A defw allot_cfa
651C defw semicolon_s_cfa
; [DASMZ80 ZONE] comma_pfa: start 0x6514 end 0x651E type pointers

64FE  allot_nfa: 
64FE defb 0x05+0x80,"ALLO","T"+0x80
; [DASMZ80 ZONE] allot_nfa: start 0x64FE end 0x6504 type bytedata
6504  allot_lfa: 
6504 defw here_nfa
; [DASMZ80 ZONE] allot_lfa: start 0x6504 end 0x6506 type pointers
6506  allot_cfa: 
6506 defw 0x6306
; [DASMZ80 ZONE] allot_cfa: start 0x6506 end 0x6508 type pointers
6508  allot_pfa: 
6508 defw dp_cfa
650A defw plus_store_cfa
650C defw semicolon_s_cfa
; [DASMZ80 ZONE] allot_pfa: start 0x6508 end 0x650E type pointers

64EF  here_nfa: 
64EF defb 0x04+0x80,"HER","E"+0x80
; [DASMZ80 ZONE] here_nfa: start 0x64EF end 0x64F4 type bytedata
64F4  here_lfa: 
64F4 defw two_plus_nfa
; [DASMZ80 ZONE] here_lfa: start 0x64F4 end 0x64F6 type pointers
64F6  here_cfa: 
64F6 defw 0x6306
; [DASMZ80 ZONE] here_cfa: start 0x64F6 end 0x64F8 type pointers
64F8  here_pfa: 
64F8 defw dp_cfa
64FA defw fetch_cfa
64FC defw semicolon_s_cfa
; [DASMZ80 ZONE] here_pfa: start 0x64F8 end 0x64FE type pointers

64E2  two_plus_nfa: 
64E2 defb 0x02+0x80,"2","+"+0x80
; [DASMZ80 ZONE] two_plus_nfa: start 0x64E2 end 0x64E5 type bytedata
64E5  two_plus_lfa: 
64E5 defw one_plus_nfa
; [DASMZ80 ZONE] two_plus_lfa: start 0x64E5 end 0x64E7 type pointers
64E7  two_plus_cfa: 
64E7 defw two_plus_pfa
; [DASMZ80 ZONE] two_plus_cfa: start 0x64E7 end 0x64E9 type pointers
64E9  two_plus_pfa: 
; [DASMZ80 ZONE] two_plus_cfa: start 0x64E9 end 0x64EF type code

64D5  one_plus_nfa: 
64D5 defb 0x02+0x80,"1","+"+0x80
; [DASMZ80 ZONE] one_plus_nfa: start 0x64D5 end 0x64D8 type bytedata
64D8  one_plus_lfa: 
64D8 defw hld_nfa
; [DASMZ80 ZONE] one_plus_lfa: start 0x64D8 end 0x64DA type pointers
64DA  one_plus_cfa: 
64DA defw one_plus_pfa
; [DASMZ80 ZONE] one_plus_cfa: start 0x64DA end 0x64DC type pointers
64DC  one_plus_pfa: 
; [DASMZ80 ZONE] one_plus_cfa: start 0x64DC end 0x64E2 type code

64CC  hld_nfa: 
64CC defb 0x03+0x80,"HL","D"+0x80
; [DASMZ80 ZONE] hld_nfa: start 0x64CC end 0x64D0 type bytedata
64D0  hld_lfa: 
64D0 defw r_hash_nfa
; [DASMZ80 ZONE] hld_lfa: start 0x64D0 end 0x64D2 type pointers
64D2  hld_cfa: 
64D2 defw 0x6374
; [DASMZ80 ZONE] hld_cfa: start 0x64D2 end 0x64D4 type pointers
64D4  hld_pfa: 
64D4 defw 0x8230
; [DASMZ80 ZONE] hld_pfa: start 0x64D4 end 0x64D6 type worddata

64C4  r_hash_nfa: 
64C4 defb 0x02+0x80,"R","#"+0x80
; [DASMZ80 ZONE] r_hash_nfa: start 0x64C4 end 0x64C7 type bytedata
64C7  r_hash_lfa: 
64C7 defw csp_nfa
; [DASMZ80 ZONE] r_hash_lfa: start 0x64C7 end 0x64C9 type pointers
64C9  r_hash_cfa: 
64C9 defw 0x6374
; [DASMZ80 ZONE] r_hash_cfa: start 0x64C9 end 0x64CB type pointers
64CB  r_hash_pfa: 
64CB defw 0x832E
; [DASMZ80 ZONE] r_hash_pfa: start 0x64CB end 0x64CD type worddata

64BB  csp_nfa: 
64BB defb 0x03+0x80,"CS","P"+0x80
; [DASMZ80 ZONE] csp_nfa: start 0x64BB end 0x64BF type bytedata
64BF  csp_lfa: 
64BF defw fld_nfa
; [DASMZ80 ZONE] csp_lfa: start 0x64BF end 0x64C1 type pointers
64C1  csp_cfa: 
64C1 defw 0x6374
; [DASMZ80 ZONE] csp_cfa: start 0x64C1 end 0x64C3 type pointers
64C3  csp_pfa: 
64C3 defw 0x822C
; [DASMZ80 ZONE] csp_pfa: start 0x64C3 end 0x64C5 type worddata

64B2  fld_nfa: 
64B2 defb 0x03+0x80,"FL","D"+0x80
; [DASMZ80 ZONE] fld_nfa: start 0x64B2 end 0x64B6 type bytedata
64B6  fld_lfa: 
64B6 defw dpl_nfa
; [DASMZ80 ZONE] fld_lfa: start 0x64B6 end 0x64B8 type pointers
64B8  fld_cfa: 
64B8 defw 0x6374
; [DASMZ80 ZONE] fld_cfa: start 0x64B8 end 0x64BA type pointers
64BA  fld_pfa: 
64BA defw 0x832A
; [DASMZ80 ZONE] fld_pfa: start 0x64BA end 0x64BC type worddata

64A9  dpl_nfa: 
64A9 defb 0x03+0x80,"DP","L"+0x80
; [DASMZ80 ZONE] dpl_nfa: start 0x64A9 end 0x64AD type bytedata
64AD  dpl_lfa: 
64AD defw base_nfa
; [DASMZ80 ZONE] dpl_lfa: start 0x64AD end 0x64AF type pointers
64AF  dpl_cfa: 
64AF defw 0x6374
; [DASMZ80 ZONE] dpl_cfa: start 0x64AF end 0x64B1 type pointers
64B1  dpl_pfa: 
64B1 defw 0x8328
; [DASMZ80 ZONE] dpl_pfa: start 0x64B1 end 0x64B3 type worddata

649F  base_nfa: 
649F defb 0x04+0x80,"BAS","E"+0x80
; [DASMZ80 ZONE] base_nfa: start 0x649F end 0x64A4 type bytedata
64A4  base_lfa: 
64A4 defw state_nfa
; [DASMZ80 ZONE] base_lfa: start 0x64A4 end 0x64A6 type pointers
64A6  base_cfa: 
64A6 defw 0x6374
; [DASMZ80 ZONE] base_cfa: start 0x64A6 end 0x64A8 type pointers
64A8  base_pfa: 
64A8 defw 0x8326
; [DASMZ80 ZONE] base_pfa: start 0x64A8 end 0x64AA type worddata

6494  state_nfa: 
6494 defb 0x05+0x80,"STAT","E"+0x80
; [DASMZ80 ZONE] state_nfa: start 0x6494 end 0x649A type bytedata
649A  state_lfa: 
649A defw current_nfa
; [DASMZ80 ZONE] state_lfa: start 0x649A end 0x649C type pointers
649C  state_cfa: 
649C defw 0x6374
; [DASMZ80 ZONE] state_cfa: start 0x649C end 0x649E type pointers
649E  state_pfa: 
649E defw 0x8424
; [DASMZ80 ZONE] state_pfa: start 0x649E end 0x64A0 type worddata

6487  current_nfa: 
6487 defb 0x07+0x80,"CURREN","T"+0x80
; [DASMZ80 ZONE] current_nfa: start 0x6487 end 0x648F type bytedata
648F  current_lfa: 
648F defw context_nfa
; [DASMZ80 ZONE] current_lfa: start 0x648F end 0x6491 type pointers
6491  current_cfa: 
6491 defw 0x6374
; [DASMZ80 ZONE] current_cfa: start 0x6491 end 0x6493 type pointers
6493  current_pfa: 
6493 defw 0x8522
; [DASMZ80 ZONE] current_pfa: start 0x6493 end 0x6495 type worddata

647A  context_nfa: 
647A defb 0x07+0x80,"CONTEX","T"+0x80
; [DASMZ80 ZONE] context_nfa: start 0x647A end 0x6482 type bytedata
6482  context_lfa: 
6482 defw offset_nfa
; [DASMZ80 ZONE] context_lfa: start 0x6482 end 0x6484 type pointers
6484  context_cfa: 
6484 defw 0x6374
; [DASMZ80 ZONE] context_cfa: start 0x6484 end 0x6486 type pointers
6486  context_pfa: 
6486 defw 0x8720
; [DASMZ80 ZONE] context_pfa: start 0x6486 end 0x6488 type worddata

646E  offset_nfa: 
646E defb 0x06+0x80,"OFFSE","T"+0x80
; [DASMZ80 ZONE] offset_nfa: start 0x646E end 0x6475 type bytedata
6475  offset_lfa: 
6475 defw scr_nfa
; [DASMZ80 ZONE] offset_lfa: start 0x6475 end 0x6477 type pointers
6477  offset_cfa: 
6477 defw 0x6374
; [DASMZ80 ZONE] offset_cfa: start 0x6477 end 0x6479 type pointers
6479  offset_pfa: 
6479 defw 0x871E
; [DASMZ80 ZONE] offset_pfa: start 0x6479 end 0x647B type worddata

6465  scr_nfa: 
6465 defb 0x03+0x80,"SC","R"+0x80
; [DASMZ80 ZONE] scr_nfa: start 0x6465 end 0x6469 type bytedata
6469  scr_lfa: 
6469 defw out_nfa
; [DASMZ80 ZONE] scr_lfa: start 0x6469 end 0x646B type pointers
646B  scr_cfa: 
646B defw 0x6374
; [DASMZ80 ZONE] scr_cfa: start 0x646B end 0x646D type pointers
646D  scr_pfa: 
646D defw 0x861C
; [DASMZ80 ZONE] scr_pfa: start 0x646D end 0x646F type worddata

645C  out_nfa: 
645C defb 0x03+0x80,"OU","T"+0x80
; [DASMZ80 ZONE] out_nfa: start 0x645C end 0x6460 type bytedata
6460  out_lfa: 
6460 defw in_nfa
; [DASMZ80 ZONE] out_lfa: start 0x6460 end 0x6462 type pointers
6462  out_cfa: 
6462 defw 0x6374
; [DASMZ80 ZONE] out_cfa: start 0x6462 end 0x6464 type pointers
6464  out_pfa: 
6464 defw 0x831A
; [DASMZ80 ZONE] out_pfa: start 0x6464 end 0x6466 type worddata

6454  in_nfa: 
6454 defb 0x02+0x80,"I","N"+0x80
; [DASMZ80 ZONE] in_nfa: start 0x6454 end 0x6457 type bytedata
6457  in_lfa: 
6457 defw blk_nfa
; [DASMZ80 ZONE] in_lfa: start 0x6457 end 0x6459 type pointers
6459  in_cfa: 
6459 defw 0x6374
; [DASMZ80 ZONE] in_cfa: start 0x6459 end 0x645B type pointers
645B  in_pfa: 
645B defw 0x8318
; [DASMZ80 ZONE] in_pfa: start 0x645B end 0x645D type worddata

644B  blk_nfa: 
644B defb 0x03+0x80,"BL","K"+0x80
; [DASMZ80 ZONE] blk_nfa: start 0x644B end 0x644F type bytedata
644F  blk_lfa: 
644F defw voc_link_nfa
; [DASMZ80 ZONE] blk_lfa: start 0x644F end 0x6451 type pointers
6451  blk_cfa: 
6451 defw 0x6374
; [DASMZ80 ZONE] blk_cfa: start 0x6451 end 0x6453 type pointers
6453  blk_pfa: 
6453 defw 0x8216
; [DASMZ80 ZONE] blk_pfa: start 0x6453 end 0x6455 type worddata

643D  voc_link_nfa: 
643D defb 0x08+0x80,"VOC-LIN","K"+0x80
; [DASMZ80 ZONE] voc_link_nfa: start 0x643D end 0x6446 type bytedata
6446  voc_link_lfa: 
6446 defw dp_nfa
; [DASMZ80 ZONE] voc_link_lfa: start 0x6446 end 0x6448 type pointers
6448  voc_link_cfa: 
6448 defw 0x6374
; [DASMZ80 ZONE] voc_link_cfa: start 0x6448 end 0x644A type pointers
644A  voc_link_pfa: 
644A defw 0x8314
; [DASMZ80 ZONE] voc_link_pfa: start 0x644A end 0x644C type worddata

6435  dp_nfa: 
6435 defb 0x02+0x80,"D","P"+0x80
; [DASMZ80 ZONE] dp_nfa: start 0x6435 end 0x6438 type bytedata
6438  dp_lfa: 
6438 defw fence_nfa
; [DASMZ80 ZONE] dp_lfa: start 0x6438 end 0x643A type pointers
643A  dp_cfa: 
643A defw 0x6374
; [DASMZ80 ZONE] dp_cfa: start 0x643A end 0x643C type pointers
643C  dp_pfa: 
643C defw 0x8812
; [DASMZ80 ZONE] dp_pfa: start 0x643C end 0x643E type worddata

642A  fence_nfa: 
642A defb 0x05+0x80,"FENC","E"+0x80
; [DASMZ80 ZONE] fence_nfa: start 0x642A end 0x6430 type bytedata
6430  fence_lfa: 
6430 defw warning_nfa
; [DASMZ80 ZONE] fence_lfa: start 0x6430 end 0x6432 type pointers
6432  fence_cfa: 
6432 defw 0x6374
; [DASMZ80 ZONE] fence_cfa: start 0x6432 end 0x6434 type pointers
6434  fence_pfa: 
6434 defw 0x8210
; [DASMZ80 ZONE] fence_pfa: start 0x6434 end 0x6436 type worddata

641D  warning_nfa: 
641D defb 0x07+0x80,"WARNIN","G"+0x80
; [DASMZ80 ZONE] warning_nfa: start 0x641D end 0x6425 type bytedata
6425  warning_lfa: 
6425 defw width_nfa
; [DASMZ80 ZONE] warning_lfa: start 0x6425 end 0x6427 type pointers
6427  warning_cfa: 
6427 defw 0x6374
; [DASMZ80 ZONE] warning_cfa: start 0x6427 end 0x6429 type pointers
6429  warning_pfa: 
6429 defw 0x850E
; [DASMZ80 ZONE] warning_pfa: start 0x6429 end 0x642B type worddata

6412  width_nfa: 
6412 defb 0x05+0x80,"WIDT","H"+0x80
; [DASMZ80 ZONE] width_nfa: start 0x6412 end 0x6418 type bytedata
6418  width_lfa: 
6418 defw tib_nfa
; [DASMZ80 ZONE] width_lfa: start 0x6418 end 0x641A type pointers
641A  width_cfa: 
641A defw 0x6374
; [DASMZ80 ZONE] width_cfa: start 0x641A end 0x641C type pointers
641C  width_pfa: 
641C defw 0x870C
; [DASMZ80 ZONE] width_pfa: start 0x641C end 0x641E type worddata

6409  tib_nfa: 
6409 defb 0x03+0x80,"TI","B"+0x80
; [DASMZ80 ZONE] tib_nfa: start 0x6409 end 0x640D type bytedata
640D  tib_lfa: 
640D defw r0_nfa
; [DASMZ80 ZONE] tib_lfa: start 0x640D end 0x640F type pointers
640F  tib_cfa: 
640F defw 0x6374
; [DASMZ80 ZONE] tib_cfa: start 0x640F end 0x6411 type pointers
6411  tib_pfa: 
6411 defw 0x850A
; [DASMZ80 ZONE] tib_pfa: start 0x6411 end 0x6413 type worddata

6400  r0_nfa: 
6400 defb 0x02+0x80,"R","0"+0x80
; [DASMZ80 ZONE] r0_nfa: start 0x6400 end 0x6403 type bytedata
6403  r0_lfa: 
6403 defw s0_nfa
; [DASMZ80 ZONE] r0_lfa: start 0x6403 end 0x6405 type pointers
6405  r0_cfa: 
6405 defw 0x6374
; [DASMZ80 ZONE] r0_cfa: start 0x6405 end 0x6407 type pointers
6407  r0_pfa: 
6407 defw 0x0008
; [DASMZ80 ZONE] r0_pfa: start 0x6407 end 0x6409 type worddata

63F7  s0_nfa: 
63F7 defb 0x02+0x80,"S","0"+0x80
; [DASMZ80 ZONE] s0_nfa: start 0x63F7 end 0x63FA type bytedata
63FA  s0_lfa: 
63FA defw plus_origin_nfa
; [DASMZ80 ZONE] s0_lfa: start 0x63FA end 0x63FC type pointers
63FC  s0_cfa: 
63FC defw 0x6374
; [DASMZ80 ZONE] s0_cfa: start 0x63FC end 0x63FE type pointers
63FE  s0_pfa: 
63FE defw 0x0006
; [DASMZ80 ZONE] s0_pfa: start 0x63FE end 0x6400 type worddata

63E3  plus_origin_nfa: 
63E3 defb 0x07+0x80,"+ORIGI","N"+0x80
; [DASMZ80 ZONE] plus_origin_nfa: start 0x63E3 end 0x63EB type bytedata
63EB  plus_origin_lfa: 
63EB defw b_slash_scr_nfa
; [DASMZ80 ZONE] plus_origin_lfa: start 0x63EB end 0x63ED type pointers
63ED  plus_origin_cfa: 
63ED defw 0x6306
; [DASMZ80 ZONE] plus_origin_cfa: start 0x63ED end 0x63EF type pointers
63EF  plus_origin_pfa: 
63EF defw lit_cfa,0x5E40
63F3 defw plus_cfa
63F5 defw semicolon_s_cfa
; [DASMZ80 ZONE] plus_origin_pfa: start 0x63EF end 0x63F7 type pointers

63D7  b_slash_scr_nfa: 
63D7 defb 0x05+0x80,"B/SC","R"+0x80
; [DASMZ80 ZONE] b_slash_scr_nfa: start 0x63D7 end 0x63DD type bytedata
63DD  b_slash_scr_lfa: 
63DD defw b_slash_buf_nfa
; [DASMZ80 ZONE] b_slash_scr_lfa: start 0x63DD end 0x63DF type pointers
63DF  b_slash_scr_cfa: 
63DF defw 0x6348
; [DASMZ80 ZONE] b_slash_scr_cfa: start 0x63DF end 0x63E1 type pointers
63E1  b_slash_scr_pfa: 
63E1 defw 0x0008
; [DASMZ80 ZONE] b_slash_scr_pfa: start 0x63E1 end 0x63E3 type worddata

63CB  b_slash_buf_nfa: 
63CB defb 0x05+0x80,"B/BU","F"+0x80
; [DASMZ80 ZONE] b_slash_buf_nfa: start 0x63CB end 0x63D1 type bytedata
63D1  b_slash_buf_lfa: 
63D1 defw limit_nfa
; [DASMZ80 ZONE] b_slash_buf_lfa: start 0x63D1 end 0x63D3 type pointers
63D3  b_slash_buf_cfa: 
63D3 defw 0x6348
; [DASMZ80 ZONE] b_slash_buf_cfa: start 0x63D3 end 0x63D5 type pointers
63D5  b_slash_buf_pfa: 
63D5 defw 0x0080
; [DASMZ80 ZONE] b_slash_buf_pfa: start 0x63D5 end 0x63D7 type worddata

63BF  limit_nfa: 
63BF defb 0x05+0x80,"LIMI","T"+0x80
; [DASMZ80 ZONE] limit_nfa: start 0x63BF end 0x63C5 type bytedata
63C5  limit_lfa: 
63C5 defw first_nfa
; [DASMZ80 ZONE] limit_lfa: start 0x63C5 end 0x63C7 type pointers
63C7  limit_cfa: 
63C7 defw 0x6348
; [DASMZ80 ZONE] limit_cfa: start 0x63C7 end 0x63C9 type pointers
63C9  limit_pfa: 
63C9 defw 0x8F40
; [DASMZ80 ZONE] limit_pfa: start 0x63C9 end 0x63CB type worddata

63B3  first_nfa: 
63B3 defb 0x05+0x80,"FIRS","T"+0x80
; [DASMZ80 ZONE] first_nfa: start 0x63B3 end 0x63B9 type bytedata
63B9  first_lfa: 
63B9 defw c_slash_l_nfa
; [DASMZ80 ZONE] first_lfa: start 0x63B9 end 0x63BB type pointers
63BB  first_cfa: 
63BB defw 0x6348
; [DASMZ80 ZONE] first_cfa: start 0x63BB end 0x63BD type pointers
63BD  first_pfa: 
63BD defw 0x8B20
; [DASMZ80 ZONE] first_pfa: start 0x63BD end 0x63BF type worddata

63A9  c_slash_l_nfa: 
63A9 defb 0x03+0x80,"C/","L"+0x80
; [DASMZ80 ZONE] c_slash_l_nfa: start 0x63A9 end 0x63AD type bytedata
63AD  c_slash_l_lfa: 
63AD defw b_l_nfa
; [DASMZ80 ZONE] c_slash_l_lfa: start 0x63AD end 0x63AF type pointers
63AF  c_slash_l_cfa: 
63AF defw 0x6348
; [DASMZ80 ZONE] c_slash_l_cfa: start 0x63AF end 0x63B1 type pointers
63B1  c_slash_l_pfa: 
63B1 defw 0x0040
; [DASMZ80 ZONE] c_slash_l_pfa: start 0x63B1 end 0x63B3 type worddata

63A0  b_l_nfa: 
63A0 defb 0x02+0x80,"B","L"+0x80
; [DASMZ80 ZONE] b_l_nfa: start 0x63A0 end 0x63A3 type bytedata
63A3  b_l_lfa: 
63A3 defw three_nfa
; [DASMZ80 ZONE] b_l_lfa: start 0x63A3 end 0x63A5 type pointers
63A5  b_l_cfa: 
63A5 defw 0x6348
; [DASMZ80 ZONE] b_l_cfa: start 0x63A5 end 0x63A7 type pointers
63A7  b_l_pfa: 
63A7 defw 0x0020
; [DASMZ80 ZONE] b_l_pfa: start 0x63A7 end 0x63A9 type worddata

6398  three_nfa: 
6398 defb 0x01+0x80,"3"+0x80
; [DASMZ80 ZONE] three_nfa: start 0x6398 end 0x639A type bytedata
639A  three_lfa: 
639A defw two_nfa
; [DASMZ80 ZONE] three_lfa: start 0x639A end 0x639C type pointers
639C  three_cfa: 
639C defw 0x6348
; [DASMZ80 ZONE] three_cfa: start 0x639C end 0x639E type pointers
639E  three_pfa: 
639E defw 0x0003
; [DASMZ80 ZONE] three_pfa: start 0x639E end 0x63A0 type worddata

6390  two_nfa: 
6390 defb 0x01+0x80,"2"+0x80
; [DASMZ80 ZONE] two_nfa: start 0x6390 end 0x6392 type bytedata
6392  two_lfa: 
6392 defw one_nfa
; [DASMZ80 ZONE] two_lfa: start 0x6392 end 0x6394 type pointers
6394  two_cfa: 
6394 defw 0x6348
; [DASMZ80 ZONE] two_cfa: start 0x6394 end 0x6396 type pointers
6396  two_pfa: 
6396 defw 0x0002
; [DASMZ80 ZONE] two_pfa: start 0x6396 end 0x6398 type worddata

6388  one_nfa: 
6388 defb 0x01+0x80,"1"+0x80
; [DASMZ80 ZONE] one_nfa: start 0x6388 end 0x638A type bytedata
638A  one_lfa: 
638A defw zero_nfa
; [DASMZ80 ZONE] one_lfa: start 0x638A end 0x638C type pointers
638C  one_cfa: 
638C defw 0x6348
; [DASMZ80 ZONE] one_cfa: start 0x638C end 0x638E type pointers
638E  one_pfa: 
638E defw 0x0001
; [DASMZ80 ZONE] one_pfa: start 0x638E end 0x6390 type worddata

6380  zero_nfa: 
6380 defb 0x01+0x80,"0"+0x80
; [DASMZ80 ZONE] zero_nfa: start 0x6380 end 0x6382 type bytedata
6382  zero_lfa: 
6382 defw user_nfa
; [DASMZ80 ZONE] zero_lfa: start 0x6382 end 0x6384 type pointers
6384  zero_cfa: 
6384 defw 0x6348
; [DASMZ80 ZONE] zero_cfa: start 0x6384 end 0x6386 type pointers
6386  zero_pfa: 
6386 defw 0x0000
; [DASMZ80 ZONE] zero_pfa: start 0x6386 end 0x6388 type worddata

6367  user_nfa: 
6367 defb 0x04+0x80,"USE","R"+0x80
; [DASMZ80 ZONE] user_nfa: start 0x6367 end 0x636C type bytedata
636C  user_lfa: 
636C defw variable_nfa
; [DASMZ80 ZONE] user_lfa: start 0x636C end 0x636E type pointers
636E  user_cfa: 
636E defw 0x6306
; [DASMZ80 ZONE] user_cfa: start 0x636E end 0x6370 type pointers
6370  user_pfa: 
6370 defw constant_cfa
6372 defw paren_semicolon_code_cfa
; [DASMZ80 ZONE] user_pfa: start 0x6370 end 0x6374 type pointers

6351  variable_nfa: 
6351 defb 0x08+0x80,"VARIABL","E"+0x80
; [DASMZ80 ZONE] variable_nfa: start 0x6351 end 0x635A type bytedata
635A  variable_lfa: 
635A defw constant_nfa
; [DASMZ80 ZONE] variable_lfa: start 0x635A end 0x635C type pointers
635C  variable_cfa: 
635C defw 0x6306
; [DASMZ80 ZONE] variable_cfa: start 0x635C end 0x635E type pointers
635E  variable_pfa: 
635E defw constant_cfa
6360 defw paren_semicolon_code_cfa
; [DASMZ80 ZONE] variable_pfa: start 0x635E end 0x6362 type pointers

6333  constant_nfa: 
6333 defb 0x08+0x80,"CONSTAN","T"+0x80
; [DASMZ80 ZONE] constant_nfa: start 0x6333 end 0x633C type bytedata
633C  constant_lfa: 
633C defw noop_nfa
; [DASMZ80 ZONE] constant_lfa: start 0x633C end 0x633E type pointers
633E  constant_cfa: 
633E defw 0x6306
; [DASMZ80 ZONE] constant_cfa: start 0x633E end 0x6340 type pointers
6340  constant_pfa: 
6340 defw create_cfa
6342 defw smudge_cfa
6344 defw comma_cfa
6346 defw paren_semicolon_code_cfa
; [DASMZ80 ZONE] constant_pfa: start 0x6340 end 0x6348 type pointers

6328  noop_nfa: 
6328 defb 0x04+0x80,"NOO","P"+0x80
; [DASMZ80 ZONE] noop_nfa: start 0x6328 end 0x632D type bytedata
632D  noop_lfa: 
632D defw semicolon_nfa
; [DASMZ80 ZONE] noop_lfa: start 0x632D end 0x632F type pointers
632F  noop_cfa: 
632F defw 0x6306
; [DASMZ80 ZONE] noop_cfa: start 0x632F end 0x6331 type pointers
6331  noop_pfa: 
6331 defw semicolon_s_cfa
; [DASMZ80 ZONE] noop_pfa: start 0x6331 end 0x6333 type pointers

6316  semicolon_nfa: 
6316 defb 0x01+0x80+0x40,";"+0x80
; [DASMZ80 ZONE] semicolon_nfa: start 0x6316 end 0x6318 type bytedata
6318  semicolon_lfa: 
6318 defw colon_nfa
; [DASMZ80 ZONE] semicolon_lfa: start 0x6318 end 0x631A type pointers
631A  semicolon_cfa: 
631A defw 0x6306
; [DASMZ80 ZONE] semicolon_cfa: start 0x631A end 0x631C type pointers
631C  semicolon_pfa: 
631C defw question_csp_cfa
631E defw compile_cfa,;S_cfa
6322 defw smudge_cfa
6324 defw left_bracket_cfa
6326 defw semicolon_s_cfa
; [DASMZ80 ZONE] semicolon_pfa: start 0x631C end 0x6328 type pointers

62EE  colon_nfa: 
62EE defb 0x01+0x80+0x40,":"+0x80
; [DASMZ80 ZONE] colon_nfa: start 0x62EE end 0x62F0 type bytedata
62F0  colon_lfa: 
62F0 defw two_store_nfa
; [DASMZ80 ZONE] colon_lfa: start 0x62F0 end 0x62F2 type pointers
62F2  colon_cfa: 
62F2 defw 0x6306
; [DASMZ80 ZONE] colon_cfa: start 0x62F2 end 0x62F4 type pointers
62F4  colon_pfa: 
62F4 defw question_exec_cfa
62F6 defw store_csp_cfa
62F8 defw current_cfa
62FA defw fetch_cfa
62FC defw context_cfa
62FE defw store_cfa
6300 defw create_cfa
6302 defw right_bracket_cfa
6304 defw paren_semicolon_code_cfa
; [DASMZ80 ZONE] colon_pfa: start 0x62F4 end 0x6306 type pointers

62DA  two_store_nfa: 
62DA defb 0x02+0x80,"2","!"+0x80
; [DASMZ80 ZONE] two_store_nfa: start 0x62DA end 0x62DD type bytedata
62DD  two_store_lfa: 
62DD defw c_store_nfa
; [DASMZ80 ZONE] two_store_lfa: start 0x62DD end 0x62DF type pointers
62DF  two_store_cfa: 
62DF defw two_store_pfa
; [DASMZ80 ZONE] two_store_cfa: start 0x62DF end 0x62E1 type pointers
62E1  two_store_pfa: 
; [DASMZ80 ZONE] two_store_cfa: start 0x62E1 end 0x62EE type code

62CD  c_store_nfa: 
62CD defb 0x02+0x80,"C","!"+0x80
; [DASMZ80 ZONE] c_store_nfa: start 0x62CD end 0x62D0 type bytedata
62D0  c_store_lfa: 
62D0 defw store_nfa
; [DASMZ80 ZONE] c_store_lfa: start 0x62D0 end 0x62D2 type pointers
62D2  c_store_cfa: 
62D2 defw c_store_pfa
; [DASMZ80 ZONE] c_store_cfa: start 0x62D2 end 0x62D4 type pointers
62D4  c_store_pfa: 
; [DASMZ80 ZONE] c_store_cfa: start 0x62D4 end 0x62DA type code

62BF  store_nfa: 
62BF defb 0x01+0x80,"!"+0x80
; [DASMZ80 ZONE] store_nfa: start 0x62BF end 0x62C1 type bytedata
62C1  store_lfa: 
62C1 defw two_fetch_nfa
; [DASMZ80 ZONE] store_lfa: start 0x62C1 end 0x62C3 type pointers
62C3  store_cfa: 
62C3 defw store_pfa
; [DASMZ80 ZONE] store_cfa: start 0x62C3 end 0x62C5 type pointers
62C5  store_pfa: 
; [DASMZ80 ZONE] store_cfa: start 0x62C5 end 0x62CD type code

62A8  two_fetch_nfa: 
62A8 defb 0x02+0x80,"2","@"+0x80
; [DASMZ80 ZONE] two_fetch_nfa: start 0x62A8 end 0x62AB type bytedata
62AB  two_fetch_lfa: 
62AB defw c_fetch_nfa
; [DASMZ80 ZONE] two_fetch_lfa: start 0x62AB end 0x62AD type pointers
62AD  two_fetch_cfa: 
62AD defw two_fetch_pfa
; [DASMZ80 ZONE] two_fetch_cfa: start 0x62AD end 0x62AF type pointers
62AF  two_fetch_pfa: 
; [DASMZ80 ZONE] two_fetch_cfa: start 0x62AF end 0x62BF type code

629A  c_fetch_nfa: 
629A defb 0x02+0x80,"C","@"+0x80
; [DASMZ80 ZONE] c_fetch_nfa: start 0x629A end 0x629D type bytedata
629D  c_fetch_lfa: 
629D defw fetch_nfa
; [DASMZ80 ZONE] c_fetch_lfa: start 0x629D end 0x629F type pointers
629F  c_fetch_cfa: 
629F defw c_fetch_pfa
; [DASMZ80 ZONE] c_fetch_cfa: start 0x629F end 0x62A1 type pointers
62A1  c_fetch_pfa: 
; [DASMZ80 ZONE] c_fetch_cfa: start 0x62A1 end 0x62A8 type code

628C  fetch_nfa: 
628C defb 0x01+0x80,"@"+0x80
; [DASMZ80 ZONE] fetch_nfa: start 0x628C end 0x628E type bytedata
628E  fetch_lfa: 
628E defw toggle_nfa
; [DASMZ80 ZONE] fetch_lfa: start 0x628E end 0x6290 type pointers
6290  fetch_cfa: 
6290 defw fetch_pfa
; [DASMZ80 ZONE] fetch_cfa: start 0x6290 end 0x6292 type pointers
6292  fetch_pfa: 
; [DASMZ80 ZONE] fetch_cfa: start 0x6292 end 0x629A type code

6279  toggle_nfa: 
6279 defb 0x06+0x80,"TOGGL","E"+0x80
; [DASMZ80 ZONE] toggle_nfa: start 0x6279 end 0x6280 type bytedata
6280  toggle_lfa: 
6280 defw plus_store_nfa
; [DASMZ80 ZONE] toggle_lfa: start 0x6280 end 0x6282 type pointers
6282  toggle_cfa: 
6282 defw toggle_pfa
; [DASMZ80 ZONE] toggle_cfa: start 0x6282 end 0x6284 type pointers
6284  toggle_pfa: 
; [DASMZ80 ZONE] toggle_cfa: start 0x6284 end 0x628C type code

6266  plus_store_nfa: 
6266 defb 0x02+0x80,"+","!"+0x80
; [DASMZ80 ZONE] plus_store_nfa: start 0x6266 end 0x6269 type bytedata
6269  plus_store_lfa: 
6269 defw two_dup_nfa
; [DASMZ80 ZONE] plus_store_lfa: start 0x6269 end 0x626B type pointers
626B  plus_store_cfa: 
626B defw plus_store_pfa
; [DASMZ80 ZONE] plus_store_cfa: start 0x626B end 0x626D type pointers
626D  plus_store_pfa: 
; [DASMZ80 ZONE] plus_store_cfa: start 0x626D end 0x6279 type code

6256  two_dup_nfa: 
6256 defb 0x04+0x80,"2DU","P"+0x80
; [DASMZ80 ZONE] two_dup_nfa: start 0x6256 end 0x625B type bytedata
625B  two_dup_lfa: 
625B defw dup_nfa
; [DASMZ80 ZONE] two_dup_lfa: start 0x625B end 0x625D type pointers
625D  two_dup_cfa: 
625D defw two_dup_pfa
; [DASMZ80 ZONE] two_dup_cfa: start 0x625D end 0x625F type pointers
625F  two_dup_pfa: 
; [DASMZ80 ZONE] two_dup_cfa: start 0x625F end 0x6266 type code

6249  dup_nfa: 
6249 defb 0x03+0x80,"DU","P"+0x80
; [DASMZ80 ZONE] dup_nfa: start 0x6249 end 0x624D type bytedata
624D  dup_lfa: 
624D defw swap_nfa
; [DASMZ80 ZONE] dup_lfa: start 0x624D end 0x624F type pointers
624F  dup_cfa: 
624F defw dup_pfa
; [DASMZ80 ZONE] dup_cfa: start 0x624F end 0x6251 type pointers
6251  dup_pfa: 
; [DASMZ80 ZONE] dup_cfa: start 0x6251 end 0x6256 type code

623B  swap_nfa: 
623B defb 0x04+0x80,"SWA","P"+0x80
; [DASMZ80 ZONE] swap_nfa: start 0x623B end 0x6240 type bytedata
6240  swap_lfa: 
6240 defw drop_nfa
; [DASMZ80 ZONE] swap_lfa: start 0x6240 end 0x6242 type pointers
6242  swap_cfa: 
6242 defw swap_pfa
; [DASMZ80 ZONE] swap_cfa: start 0x6242 end 0x6244 type pointers
6244  swap_pfa: 
; [DASMZ80 ZONE] swap_cfa: start 0x6244 end 0x6249 type code

622E  drop_nfa: 
622E defb 0x04+0x80,"DRO","P"+0x80
; [DASMZ80 ZONE] drop_nfa: start 0x622E end 0x6233 type bytedata
6233  drop_lfa: 
6233 defw over_nfa
; [DASMZ80 ZONE] drop_lfa: start 0x6233 end 0x6235 type pointers
6235  drop_cfa: 
6235 defw drop_pfa
; [DASMZ80 ZONE] drop_cfa: start 0x6235 end 0x6237 type pointers
6237  drop_pfa: 
; [DASMZ80 ZONE] drop_cfa: start 0x6237 end 0x623B type code

621F  over_nfa: 
621F defb 0x04+0x80,"OVE","R"+0x80
; [DASMZ80 ZONE] over_nfa: start 0x621F end 0x6224 type bytedata
6224  over_lfa: 
6224 defw dminus_nfa
; [DASMZ80 ZONE] over_lfa: start 0x6224 end 0x6226 type pointers
6226  over_cfa: 
6226 defw over_pfa
; [DASMZ80 ZONE] over_cfa: start 0x6226 end 0x6228 type pointers
6228  over_pfa: 
; [DASMZ80 ZONE] over_cfa: start 0x6228 end 0x622E type code

61FF  dminus_nfa: 
61FF defb 0x06+0x80,"DMINU","S"+0x80
; [DASMZ80 ZONE] dminus_nfa: start 0x61FF end 0x6206 type bytedata
6206  dminus_lfa: 
6206 defw minus_nfa
; [DASMZ80 ZONE] dminus_lfa: start 0x6206 end 0x6208 type pointers
6208  dminus_cfa: 
6208 defw dminus_pfa
; [DASMZ80 ZONE] dminus_cfa: start 0x6208 end 0x620A type pointers
620A  dminus_pfa: 
; [DASMZ80 ZONE] dminus_cfa: start 0x620A end 0x621F type code

61EB  minus_nfa: 
61EB defb 0x05+0x80,"MINU","S"+0x80
; [DASMZ80 ZONE] minus_nfa: start 0x61EB end 0x61F1 type bytedata
61F1  minus_lfa: 
61F1 defw d_plus_nfa
; [DASMZ80 ZONE] minus_lfa: start 0x61F1 end 0x61F3 type pointers
61F3  minus_cfa: 
61F3 defw minus_pfa
; [DASMZ80 ZONE] minus_cfa: start 0x61F3 end 0x61F5 type pointers
61F5  minus_pfa: 
; [DASMZ80 ZONE] minus_cfa: start 0x61F5 end 0x61FF type code

61CF  d_plus_nfa: 
61CF defb 0x02+0x80,"D","+"+0x80
; [DASMZ80 ZONE] d_plus_nfa: start 0x61CF end 0x61D2 type bytedata
61D2  d_plus_lfa: 
61D2 defw plus_nfa
; [DASMZ80 ZONE] d_plus_lfa: start 0x61D2 end 0x61D4 type pointers
61D4  d_plus_cfa: 
61D4 defw d_plus_pfa
; [DASMZ80 ZONE] d_plus_cfa: start 0x61D4 end 0x61D6 type pointers
61D6  d_plus_pfa: 
; [DASMZ80 ZONE] d_plus_cfa: start 0x61D6 end 0x61EB type code

61C3  plus_nfa: 
61C3 defb 0x01+0x80,"+"+0x80
; [DASMZ80 ZONE] plus_nfa: start 0x61C3 end 0x61C5 type bytedata
61C5  plus_lfa: 
61C5 defw zero_less_than_nfa
; [DASMZ80 ZONE] plus_lfa: start 0x61C5 end 0x61C7 type pointers
61C7  plus_cfa: 
61C7 defw plus_pfa
; [DASMZ80 ZONE] plus_cfa: start 0x61C7 end 0x61C9 type pointers
61C9  plus_pfa: 
; [DASMZ80 ZONE] plus_cfa: start 0x61C9 end 0x61CF type code

61B1  zero_less_than_nfa: 
61B1 defb 0x02+0x80,"0","<"+0x80
; [DASMZ80 ZONE] zero_less_than_nfa: start 0x61B1 end 0x61B4 type bytedata
61B4  zero_less_than_lfa: 
61B4 defw zero_equals_nfa
; [DASMZ80 ZONE] zero_less_than_lfa: start 0x61B4 end 0x61B6 type pointers
61B6  zero_less_than_cfa: 
61B6 defw zero_less_than_pfa
; [DASMZ80 ZONE] zero_less_than_cfa: start 0x61B6 end 0x61B8 type pointers
61B8  zero_less_than_pfa: 
; [DASMZ80 ZONE] zero_less_than_cfa: start 0x61B8 end 0x61C3 type code

619E  zero_equals_nfa: 
619E defb 0x02+0x80,"0","="+0x80
; [DASMZ80 ZONE] zero_equals_nfa: start 0x619E end 0x61A1 type bytedata
61A1  zero_equals_lfa: 
61A1 defw r_nfa
; [DASMZ80 ZONE] zero_equals_lfa: start 0x61A1 end 0x61A3 type pointers
61A3  zero_equals_cfa: 
61A3 defw zero_equals_pfa
; [DASMZ80 ZONE] zero_equals_cfa: start 0x61A3 end 0x61A5 type pointers
61A5  zero_equals_pfa: 
; [DASMZ80 ZONE] zero_equals_cfa: start 0x61A5 end 0x61B1 type code

6198  r_nfa: 
6198 defb 0x01+0x80,"R"+0x80
; [DASMZ80 ZONE] r_nfa: start 0x6198 end 0x619A type bytedata
619A  r_lfa: 
619A defw from_r_nfa
; [DASMZ80 ZONE] r_lfa: start 0x619A end 0x619C type pointers
619C  r_cfa: 
619C defw 0x5F32
; [DASMZ80 ZONE] r_cfa: start 0x619C end 0x619E type pointers
619E  r_pfa: ; Word type not implemented.

6183  from_r_nfa: 
6183 defb 0x02+0x80,"R",">"+0x80
; [DASMZ80 ZONE] from_r_nfa: start 0x6183 end 0x6186 type bytedata
6186  from_r_lfa: 
6186 defw to_r_nfa
; [DASMZ80 ZONE] from_r_lfa: start 0x6186 end 0x6188 type pointers
6188  from_r_cfa: 
6188 defw from_r_pfa
; [DASMZ80 ZONE] from_r_cfa: start 0x6188 end 0x618A type pointers
618A  from_r_pfa: 
; [DASMZ80 ZONE] from_r_cfa: start 0x618A end 0x6198 type code

616E  to_r_nfa: 
616E defb 0x02+0x80,">","R"+0x80
; [DASMZ80 ZONE] to_r_nfa: start 0x616E end 0x6171 type bytedata
6171  to_r_lfa: 
6171 defw leave_nfa
; [DASMZ80 ZONE] to_r_lfa: start 0x6171 end 0x6173 type pointers
6173  to_r_cfa: 
6173 defw to_r_pfa
; [DASMZ80 ZONE] to_r_cfa: start 0x6173 end 0x6175 type pointers
6175  to_r_pfa: 
; [DASMZ80 ZONE] to_r_cfa: start 0x6175 end 0x6183 type code

6157  leave_nfa: 
6157 defb 0x05+0x80,"LEAV","E"+0x80
; [DASMZ80 ZONE] leave_nfa: start 0x6157 end 0x615D type bytedata
615D  leave_lfa: 
615D defw semicolon_s_nfa
; [DASMZ80 ZONE] leave_lfa: start 0x615D end 0x615F type pointers
615F  leave_cfa: 
615F defw leave_pfa
; [DASMZ80 ZONE] leave_cfa: start 0x615F end 0x6161 type pointers
6161  leave_pfa: 
; [DASMZ80 ZONE] leave_cfa: start 0x6161 end 0x616E type code

6143  semicolon_s_nfa: 
6143 defb 0x02+0x80,";","S"+0x80
; [DASMZ80 ZONE] semicolon_s_nfa: start 0x6143 end 0x6146 type bytedata
6146  semicolon_s_lfa: 
6146 defw rp_store_nfa
; [DASMZ80 ZONE] semicolon_s_lfa: start 0x6146 end 0x6148 type pointers
6148  semicolon_s_cfa: 
6148 defw semicolon_s_pfa
; [DASMZ80 ZONE] semicolon_s_cfa: start 0x6148 end 0x614A type pointers
614A  semicolon_s_pfa: 
; [DASMZ80 ZONE] semicolon_s_cfa: start 0x614A end 0x6157 type code

612E  rp_store_nfa: 
612E defb 0x03+0x80,"RP","!"+0x80
; [DASMZ80 ZONE] rp_store_nfa: start 0x612E end 0x6132 type bytedata
6132  rp_store_lfa: 
6132 defw rp_fetch_nfa
; [DASMZ80 ZONE] rp_store_lfa: start 0x6132 end 0x6134 type pointers
6134  rp_store_cfa: 
6134 defw rp_store_pfa
; [DASMZ80 ZONE] rp_store_cfa: start 0x6134 end 0x6136 type pointers
6136  rp_store_pfa: 
; [DASMZ80 ZONE] rp_store_cfa: start 0x6136 end 0x6143 type code

6120  rp_fetch_nfa: 
6120 defb 0x03+0x80,"RP","@"+0x80
; [DASMZ80 ZONE] rp_fetch_nfa: start 0x6120 end 0x6124 type bytedata
6124  rp_fetch_lfa: 
6124 defw sp_store_nfa
; [DASMZ80 ZONE] rp_fetch_lfa: start 0x6124 end 0x6126 type pointers
6126  rp_fetch_cfa: 
6126 defw rp_fetch_pfa
; [DASMZ80 ZONE] rp_fetch_cfa: start 0x6126 end 0x6128 type pointers
6128  rp_fetch_pfa: 
; [DASMZ80 ZONE] rp_fetch_cfa: start 0x6128 end 0x612E type code

610D  sp_store_nfa: 
610D defb 0x03+0x80,"SP","!"+0x80
; [DASMZ80 ZONE] sp_store_nfa: start 0x610D end 0x6111 type bytedata
6111  sp_store_lfa: 
6111 defw sp_fetch_nfa
; [DASMZ80 ZONE] sp_store_lfa: start 0x6111 end 0x6113 type pointers
6113  sp_store_cfa: 
6113 defw sp_store_pfa
; [DASMZ80 ZONE] sp_store_cfa: start 0x6113 end 0x6115 type pointers
6115  sp_store_pfa: 
; [DASMZ80 ZONE] sp_store_cfa: start 0x6115 end 0x6120 type code

60FE  sp_fetch_nfa: 
60FE defb 0x03+0x80,"SP","@"+0x80
; [DASMZ80 ZONE] sp_fetch_nfa: start 0x60FE end 0x6102 type bytedata
6102  sp_fetch_lfa: 
6102 defw xor_nfa
; [DASMZ80 ZONE] sp_fetch_lfa: start 0x6102 end 0x6104 type pointers
6104  sp_fetch_cfa: 
6104 defw sp_fetch_pfa
; [DASMZ80 ZONE] sp_fetch_cfa: start 0x6104 end 0x6106 type pointers
6106  sp_fetch_pfa: 
; [DASMZ80 ZONE] sp_fetch_cfa: start 0x6106 end 0x610D type code

60EB  xor_nfa: 
60EB defb 0x03+0x80,"XO","R"+0x80
; [DASMZ80 ZONE] xor_nfa: start 0x60EB end 0x60EF type bytedata
60EF  xor_lfa: 
60EF defw or_nfa
; [DASMZ80 ZONE] xor_lfa: start 0x60EF end 0x60F1 type pointers
60F1  xor_cfa: 
60F1 defw xor_pfa
; [DASMZ80 ZONE] xor_cfa: start 0x60F1 end 0x60F3 type pointers
60F3  xor_pfa: 
; [DASMZ80 ZONE] xor_cfa: start 0x60F3 end 0x60FE type code

60D9  or_nfa: 
60D9 defb 0x02+0x80,"O","R"+0x80
; [DASMZ80 ZONE] or_nfa: start 0x60D9 end 0x60DC type bytedata
60DC  or_lfa: 
60DC defw and_nfa
; [DASMZ80 ZONE] or_lfa: start 0x60DC end 0x60DE type pointers
60DE  or_cfa: 
60DE defw or_pfa
; [DASMZ80 ZONE] or_cfa: start 0x60DE end 0x60E0 type pointers
60E0  or_pfa: 
; [DASMZ80 ZONE] or_cfa: start 0x60E0 end 0x60EB type code

60C6  and_nfa: 
60C6 defb 0x03+0x80,"AN","D"+0x80
; [DASMZ80 ZONE] and_nfa: start 0x60C6 end 0x60CA type bytedata
60CA  and_lfa: 
60CA defw u_slash_mod_nfa
; [DASMZ80 ZONE] and_lfa: start 0x60CA end 0x60CC type pointers
60CC  and_cfa: 
60CC defw and_pfa
; [DASMZ80 ZONE] and_cfa: start 0x60CC end 0x60CE type pointers
60CE  and_pfa: 
; [DASMZ80 ZONE] and_cfa: start 0x60CE end 0x60D9 type code

607D  u_slash_mod_nfa: 
607D defb 0x05+0x80,"U/MO","D"+0x80
; [DASMZ80 ZONE] u_slash_mod_nfa: start 0x607D end 0x6083 type bytedata
6083  u_slash_mod_lfa: 
6083 defw u_star_nfa
; [DASMZ80 ZONE] u_slash_mod_lfa: start 0x6083 end 0x6085 type pointers
6085  u_slash_mod_cfa: 
6085 defw u_slash_mod_pfa
; [DASMZ80 ZONE] u_slash_mod_cfa: start 0x6085 end 0x6087 type pointers
6087  u_slash_mod_pfa: 
; [DASMZ80 ZONE] u_slash_mod_cfa: start 0x6087 end 0x60C6 type code

604A  u_star_nfa: 
604A defb 0x02+0x80,"U","*"+0x80
; [DASMZ80 ZONE] u_star_nfa: start 0x604A end 0x604D type bytedata
604D  u_star_lfa: 
604D defw cmove_nfa
; [DASMZ80 ZONE] u_star_lfa: start 0x604D end 0x604F type pointers
604F  u_star_cfa: 
604F defw u_star_pfa
; [DASMZ80 ZONE] u_star_cfa: start 0x604F end 0x6051 type pointers
6051  u_star_pfa: 
; [DASMZ80 ZONE] u_star_cfa: start 0x6051 end 0x607D type code

6031  cmove_nfa: 
6031 defb 0x05+0x80,"CMOV","E"+0x80
; [DASMZ80 ZONE] cmove_nfa: start 0x6031 end 0x6037 type bytedata
6037  cmove_lfa: 
6037 defw cr_nfa
; [DASMZ80 ZONE] cmove_lfa: start 0x6037 end 0x6039 type pointers
6039  cmove_cfa: 
6039 defw cmove_pfa
; [DASMZ80 ZONE] cmove_cfa: start 0x6039 end 0x603B type pointers
603B  cmove_pfa: 
; [DASMZ80 ZONE] cmove_cfa: start 0x603B end 0x604A type code

6027  cr_nfa: 
6027 defb 0x02+0x80,"C","R"+0x80
; [DASMZ80 ZONE] cr_nfa: start 0x6027 end 0x602A type bytedata
602A  cr_lfa: 
602A defw question_terminal_nfa
; [DASMZ80 ZONE] cr_lfa: start 0x602A end 0x602C type pointers
602C  cr_cfa: 
602C defw cr_pfa
; [DASMZ80 ZONE] cr_cfa: start 0x602C end 0x602E type pointers
602E  cr_pfa: 
; [DASMZ80 ZONE] cr_cfa: start 0x602E end 0x6031 type code

6013  question_terminal_nfa: 
6013 defb 0x09+0x80,"?TERMINA","L"+0x80
; [DASMZ80 ZONE] question_terminal_nfa: start 0x6013 end 0x601D type bytedata
601D  question_terminal_lfa: 
601D defw key_nfa
; [DASMZ80 ZONE] question_terminal_lfa: start 0x601D end 0x601F type pointers
601F  question_terminal_cfa: 
601F defw question_terminal_pfa
; [DASMZ80 ZONE] question_terminal_cfa: start 0x601F end 0x6021 type pointers
6021  question_terminal_pfa: 
; [DASMZ80 ZONE] question_terminal_cfa: start 0x6021 end 0x6027 type code

6008  key_nfa: 
6008 defb 0x03+0x80,"KE","Y"+0x80
; [DASMZ80 ZONE] key_nfa: start 0x6008 end 0x600C type bytedata
600C  key_lfa: 
600C defw emit_nfa
; [DASMZ80 ZONE] key_lfa: start 0x600C end 0x600E type pointers
600E  key_cfa: 
600E defw key_pfa
; [DASMZ80 ZONE] key_cfa: start 0x600E end 0x6010 type pointers
6010  key_pfa: 
; [DASMZ80 ZONE] key_cfa: start 0x6010 end 0x6013 type code

5FF5  emit_nfa: 
5FF5 defb 0x04+0x80,"EMI","T"+0x80
; [DASMZ80 ZONE] emit_nfa: start 0x5FF5 end 0x5FFA type bytedata
5FFA  emit_lfa: 
5FFA defw enclose_nfa
; [DASMZ80 ZONE] emit_lfa: start 0x5FFA end 0x5FFC type pointers
5FFC  emit_cfa: 
5FFC defw 0x6306
; [DASMZ80 ZONE] emit_cfa: start 0x5FFC end 0x5FFE type pointers
5FFE  emit_pfa: 
5FFE defw k^_cfa
6000 defw one_cfa
6002 defw out_cfa
6004 defw plus_store_cfa
6006 defw semicolon_s_cfa
; [DASMZ80 ZONE] emit_pfa: start 0x5FFE end 0x6008 type pointers

5FB2  enclose_nfa: 
5FB2 defb 0x07+0x80,"ENCLOS","E"+0x80
; [DASMZ80 ZONE] enclose_nfa: start 0x5FB2 end 0x5FBA type bytedata
5FBA  enclose_lfa: 
5FBA defw paren_find_nfa
; [DASMZ80 ZONE] enclose_lfa: start 0x5FBA end 0x5FBC type pointers
5FBC  enclose_cfa: 
5FBC defw enclose_pfa
; [DASMZ80 ZONE] enclose_cfa: start 0x5FBC end 0x5FBE type pointers
5FBE  enclose_pfa: 
; [DASMZ80 ZONE] enclose_cfa: start 0x5FBE end 0x5FF5 type code

5F69  paren_find_nfa: 
5F69 defb 0x06+0x80,"(FIND",")"+0x80
; [DASMZ80 ZONE] paren_find_nfa: start 0x5F69 end 0x5F70 type bytedata
5F70  paren_find_lfa: 
5F70 defw digit_nfa
; [DASMZ80 ZONE] paren_find_lfa: start 0x5F70 end 0x5F72 type pointers
5F72  paren_find_cfa: 
5F72 defw paren_find_pfa
; [DASMZ80 ZONE] paren_find_cfa: start 0x5F72 end 0x5F74 type pointers
5F74  paren_find_pfa: 
; [DASMZ80 ZONE] paren_find_cfa: start 0x5F74 end 0x5FB2 type code

5F3C  digit_nfa: 
5F3C defb 0x05+0x80,"DIGI","T"+0x80
; [DASMZ80 ZONE] digit_nfa: start 0x5F3C end 0x5F42 type bytedata
5F42  digit_lfa: 
5F42 defw i_nfa
; [DASMZ80 ZONE] digit_lfa: start 0x5F42 end 0x5F44 type pointers
5F44  digit_cfa: 
5F44 defw digit_pfa
; [DASMZ80 ZONE] digit_cfa: start 0x5F44 end 0x5F46 type pointers
5F46  digit_pfa: 
; [DASMZ80 ZONE] digit_cfa: start 0x5F46 end 0x5F69 type code

5F2C  i_nfa: 
5F2C defb 0x01+0x80,"I"+0x80
; [DASMZ80 ZONE] i_nfa: start 0x5F2C end 0x5F2E type bytedata
5F2E  i_lfa: 
5F2E defw paren_do_nfa
; [DASMZ80 ZONE] i_lfa: start 0x5F2E end 0x5F30 type pointers
5F30  i_cfa: 
5F30 defw i_pfa
; [DASMZ80 ZONE] i_cfa: start 0x5F30 end 0x5F32 type pointers
5F32  i_pfa: 
; [DASMZ80 ZONE] i_cfa: start 0x5F32 end 0x5F3C type code

5F0D  paren_do_nfa: 
5F0D defb 0x04+0x80,"(DO",")"+0x80
; [DASMZ80 ZONE] paren_do_nfa: start 0x5F0D end 0x5F12 type bytedata
5F12  paren_do_lfa: 
5F12 defw paren_plus_loop_nfa
; [DASMZ80 ZONE] paren_do_lfa: start 0x5F12 end 0x5F14 type pointers
5F14  paren_do_cfa: 
5F14 defw paren_do_pfa
; [DASMZ80 ZONE] paren_do_cfa: start 0x5F14 end 0x5F16 type pointers
5F16  paren_do_pfa: 
; [DASMZ80 ZONE] paren_do_cfa: start 0x5F16 end 0x5F2C type code

5EFE  paren_plus_loop_nfa: 
5EFE defb 0x07+0x80,"(+LOOP",")"+0x80
; [DASMZ80 ZONE] paren_plus_loop_nfa: start 0x5EFE end 0x5F06 type bytedata
5F06  paren_plus_loop_lfa: 
5F06 defw paren_loop_nfa
; [DASMZ80 ZONE] paren_plus_loop_lfa: start 0x5F06 end 0x5F08 type pointers
5F08  paren_plus_loop_cfa: 
5F08 defw paren_plus_loop_pfa
; [DASMZ80 ZONE] paren_plus_loop_cfa: start 0x5F08 end 0x5F0A type pointers
5F0A  paren_plus_loop_pfa: 
; [DASMZ80 ZONE] paren_plus_loop_cfa: start 0x5F0A end 0x5F0D type code

5EC5  paren_loop_nfa: 
5EC5 defb 0x06+0x80,"(LOOP",")"+0x80
; [DASMZ80 ZONE] paren_loop_nfa: start 0x5EC5 end 0x5ECC type bytedata
5ECC  paren_loop_lfa: 
5ECC defw zero_branch_nfa
; [DASMZ80 ZONE] paren_loop_lfa: start 0x5ECC end 0x5ECE type pointers
5ECE  paren_loop_cfa: 
5ECE defw paren_loop_pfa
; [DASMZ80 ZONE] paren_loop_cfa: start 0x5ECE end 0x5ED0 type pointers
5ED0  paren_loop_pfa: 
; [DASMZ80 ZONE] paren_loop_cfa: start 0x5ED0 end 0x5EFE type code

5EAF  zero_branch_nfa: 
5EAF defb 0x07+0x80,"0BRANC","H"+0x80
; [DASMZ80 ZONE] zero_branch_nfa: start 0x5EAF end 0x5EB7 type bytedata
5EB7  zero_branch_lfa: 
5EB7 defw branch_nfa
; [DASMZ80 ZONE] zero_branch_lfa: start 0x5EB7 end 0x5EB9 type pointers
5EB9  zero_branch_cfa: 
5EB9 defw zero_branch_pfa
; [DASMZ80 ZONE] zero_branch_cfa: start 0x5EB9 end 0x5EBB type pointers
5EBB  zero_branch_pfa: 
; [DASMZ80 ZONE] zero_branch_cfa: start 0x5EBB end 0x5EC5 type code

5E98  branch_nfa: 
5E98 defb 0x06+0x80,"BRANC","H"+0x80
; [DASMZ80 ZONE] branch_nfa: start 0x5E98 end 0x5E9F type bytedata
5E9F  branch_lfa: 
5E9F defw execute_nfa
; [DASMZ80 ZONE] branch_lfa: start 0x5E9F end 0x5EA1 type pointers
5EA1  branch_cfa: 
5EA1 defw branch_pfa
; [DASMZ80 ZONE] branch_cfa: start 0x5EA1 end 0x5EA3 type pointers
5EA3  branch_pfa: 
; [DASMZ80 ZONE] branch_cfa: start 0x5EA3 end 0x5EAF type code

5E88  execute_nfa: 
5E88 defb 0x07+0x80,"EXECUT","E"+0x80
; [DASMZ80 ZONE] execute_nfa: start 0x5E88 end 0x5E90 type bytedata
5E90  execute_lfa: 
5E90 defw lit_nfa
; [DASMZ80 ZONE] execute_lfa: start 0x5E90 end 0x5E92 type pointers
5E92  execute_cfa: 
5E92 defw execute_pfa
; [DASMZ80 ZONE] execute_cfa: start 0x5E92 end 0x5E94 type pointers
5E94  execute_pfa: 
; [DASMZ80 ZONE] execute_cfa: start 0x5E94 end 0x5E98 type code

5E77  lit_nfa: 
5E77 defb 0x03+0x80,"LI","T"+0x80
; [DASMZ80 ZONE] lit_nfa: start 0x5E77 end 0x5E7B type bytedata
5E7B  lit_lfa: 
5E7B defw 0 
; [DASMZ80 ZONE] lit_lfa: start 0x5E7B end 0x5E7D type pointers
5E7D  lit_cfa: 
5E7D defw lit_pfa
; [DASMZ80 ZONE] lit_cfa: start 0x5E7D end 0x5E7F type pointers
5E7F  lit_pfa: 
; [DASMZ80 ZONE] lit_cfa: start 0x5E7F end 0x5E88 type code
